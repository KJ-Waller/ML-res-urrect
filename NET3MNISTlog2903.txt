Script started on Thu 28 Mar 2019 01:34:09 PM UTC
]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ vim NET-3
NET-3_MNIST.py  NET-3.py        
]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ vim NET-3_MNIST.py 
[?1000h[?1049h[?1h=[2;1Hâ–½[6n[2;1H  [1;1H]11;?[1;41r[?12;25h[?12l[?25h[27m[23m[m[H[2J[?25l[41;1H"NET-3_MNIST.py" 151L, 4776C[>c[1;1H[35mimport[m torch
[35mimport[m torch.nn [38;5;130mas[m nn
[35mimport[m torch.nn.functional [38;5;130mas[m F
[35mimport[m torchvision

device = torch.device([31m'cuda:0'[m [38;5;130mif[m torch.cuda.is_available() [38;5;130melse[m [31m'cpu'[m)
[36mprint[m(device)

[34m# Image preprocessing modules[m
transform = torchvision.transforms.Compose([
    torchvision.transforms.Pad([31m4[m),
    torchvision.transforms.RandomHorizontalFlip(),
    torchvision.transforms.RandomCrop([31m32[m),
    torchvision.transforms.ToTensor()])

[34m# train_set = torchvision.datasets.CIFAR10('../data/', train=True, transform=transform, download=True)
# test_set = torchvision.datasets.CIFAR10('../data/', train=False, transform=transform)[m
train_set = torchvision.datasets.MNIST([31m'../data/'[m, train=[36mTrue[m, transform=transform, download=[36mTrue[m)
test_set = torchvision.datasets.MNIST([31m'../data/'[m, train=[36mFalse[m, transform=transform)

num_epochs = [31m200[m
batch_size = [31m50[m
num_classes = [31m10[m
learning_rate = [31m0.0005[m [34m#68%
# learning_rate = 0.0001 #61%[m

[38;5;130mclass[m [36mResBlock[m(nn.Module):
    [38;5;130mdef[m [36m__init__[m(self, in_channels, out_channels, stride=[31m1[m):[29;9H[36msuper[m(ResBlock, self).__init__()[31;9Hself.layer1 = nn.Sequential([32;13Hnn.BatchNorm2d(in_channels),[33;13Hnn.ReLU(),[34;13Hnn.Conv2d(in_channels, out_channels, [31m3[m, stride, [31m1[m),[35;13Hnn.BatchNorm2d(out_channels),[36;13Hnn.ReLU(),[37;13Hnn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[38;9H)[40;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[41;98H1,1[11CTop[1;1H[?12l[?25h[?1000l[?1002hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[41;88Ha[1;1H[41;88H [1;2H[41;1H[1m-- INSERT --[m[41;13H[K[41;98H1,2[11CTop[1;2H[?12l[?25h[?25l[41;98H2[2;2H[?12l[?25h[?25l[41;98H3[3;2H[?12l[?25h[?25l[41;98H4[4;2H[?12l[?25h[?25l[41;98H5,1[5;1H[?12l[?25h[?25l[41;98H6,2[6;2H[?12l[?25h[?25l[41;98H7[7;2H[?12l[?25h[?25l[41;98H8,1[8;1H[?12l[?25h[?25l[41;98H9,2[9;2H[?12l[?25h[?25l[41;98H10,2[10;2H[?12l[?25h[?25l[41;99H1[11;2H[?12l[?25h[?25l[41;99H2[12;2H[?12l[?25h[?25l[41;99H3[13;2H[?12l[?25h[?25l[41;99H2[12;2H[?12l[?25h[?25l[41;99H1[11;2H[?12l[?25h[?25l[41;99H2[12;2H[?12l[?25h[?25l[41;99H3[13;2H[?12l[?25h[?25l[41;99H4[14;2H[?12l[?25h[?25l[41;99H5,1[15;1H[?12l[?25h[?25l[41;99H6,2[16;2H[?12l[?25h[?25l[41;99H7[17;2H[?12l[?25h[?25l[41;99H8[18;2H[?12l[?25h[?25l[41;99H9[19;2H[?12l[?25h[?25l[41;98H20,1[20;1H[?12l[?25h[?25l[41;99H1,2[21;2H[?12l[?25h[?25l[41;99H2[22;2H[?12l[?25h[?25l[41;99H3[23;2H[?12l[?25h[?25l[41;99H4[24;2H[?12l[?25h[?25l[41;99H5[25;2H[?12l[?25h[?25l[41;99H6,1[26;1H[?12l[?25h[?25l[41;99H7,2[27;2H[?12l[?25h[?25l[41;99H8[28;2H[?12l[?25h[?25l[41;99H9[29;2H[?12l[?25h[?25l[41;98H30[30;2H[?12l[?25h[?25l[41;99H1[31;2H[?12l[?25h[?25l[41;99H2[32;2H[?12l[?25h[?25l[41;99H3[33;2H[?12l[?25h[?25l[41;99H4[34;2H[?12l[?25h[?25l[41;99H5[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hself.shrink = nn.Sequential([41;98H[K[41;98H36,2[11C0%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[41;98H[K[41;98H37,2[11C1%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13H)[41;98H[K[41;98H38,2[11C2%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[38;5;130melse[m:[41;98H[K[41;98H39,2[11C3%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hself.shrink = nn.Sequential()[41;98H[K[41;98H40,2[11C4%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H41,2[11C5%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;5H[38;5;130mdef[m [36mforward[m(self, x):[41;98H[K[41;98H42,2[11C6%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H43,2[11C7%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hx = self.layer1(x)[41;98H[K[41;98H44,2[11C8%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H45,2[11C9%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[38;5;130mreturn[m x[41;98H[K[41;98H46,2[11C9%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H47,2[10C10%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H48,2[10C11%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1H[38;5;130mclass[m [36mResBlock1[m(nn.Module):[41;98H[K[41;98H49,2[10C12%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;5H[38;5;130mdef[m [36m__init__[m(self, in_channels, out_channels, stride=[31m1[m):[41;98H[K[41;98H50,2[10C13%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[36msuper[m(ResBlock1, self).__init__()[41;98H[K[41;98H51,2[10C14%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H52,2[10C15%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hself.layer1 = nn.Sequential([41;98H[K[41;98H53,2[10C16%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.Conv2d(in_channels, out_channels, [31m3[m, stride, [31m1[m),[41;98H[K[41;98H54,2[10C17%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.BatchNorm2d(out_channels),[41;98H[K[41;98H55,2[10C18%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.ReLU(),[41;98H[K[41;98H56,2[10C18%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[41;98H[K[41;98H57,2[10C19%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H)[41;98H[K[41;98H58,2[10C20%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H59,2[10C21%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[41;98H[K[41;98H60,2[10C22%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hself.shrink = nn.Sequential([41;98H[K[41;98H61,2[10C23%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[41;98H[K[41;98H62,2[10C24%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13H)[41;98H[K[41;98H63,2[10C25%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[38;5;130melse[m:[41;98H[K[41;98H64,2[10C26%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hself.shrink = nn.Sequential()[41;98H[K[41;98H65,2[10C27%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H66,2[10C27%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;5H[38;5;130mdef[m [36mforward[m(self, x):[41;98H[K[41;98H67,2[10C28%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hx = self.layer1(F.relu(x))[41;98H[K[41;98H68,2[10C29%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H69,2[10C30%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[38;5;130mreturn[m x[41;98H[K[41;98H70,2[10C31%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H71,2[10C32%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1H[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[41;98H[K[41;98H72,2[10C33%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H73,2[10C34%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[41;98H[K[41;98H74,2[10C35%[35;2H[?12l[?25h[?25l[1;40r[1;1H[2M[1;41r[39;9H[36msuper[m(CIFARNET, self).__init__()[41;98H[K[41;98H76,2[10C36%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hself.reslayer1 = nn.Sequential([41;98H[K[41;98H77,2[10C37%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[41;98H[K[41;98H78,2[10C38%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.BatchNorm2d([31m16[m),[41;98H[K[41;98H79,2[10C39%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.ReLU(),[41;98H[K[41;98H80,2[10C40%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13HResBlock1([31m16[m, [31m32[m),[41;98H[K[41;98H81,2[10C41%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13HResBlock([31m32[m, [31m32[m),[41;98H[K[41;98H82,2[10C42%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.BatchNorm2d([31m32[m),[41;98H[K[41;98H83,2[10C43%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13HResBlock1([31m32[m, [31m64[m),[41;98H[K[41;98H84,2[10C44%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13HResBlock([31m64[m, [31m64[m),[41;98H[K[41;98H85,2[10C45%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13HResBlock1([31m64[m, [31m128[m),[41;98H[K[41;98H86,2[10C45%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13HResBlock([31m128[m, [31m128[m),[41;98H[K[41;98H87,2[10C46%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.BatchNorm2d([31m128[m),[41;98H[K[41;98H88,2[10C47%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.ReLU(),[41;98H[K[41;98H89,2[10C48%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;13Hnn.AvgPool2d([31m8[m,[31m1[m,[31m1[m)[41;98H[K[41;98H90,2[10C49%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H)[41;98H[K[41;98H91,2[10C50%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H92,2[10C51%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hself.fc1 = nn.Linear([31m22[m*[31m22[m*[31m128[m, num_classes)[41;98H[K[41;98H93,2[10C52%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H94,2[10C53%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;5H[38;5;130mdef[m [36mforward[m(self, x):[41;98H[K[41;98H95,2[10C54%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hx = self.reslayer1(x)[41;98H[K[41;98H96,2[10C54%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hx = x.reshape(x.size([31m0[m), -[31m1[m)[41;98H[K[41;98H97,2[10C55%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hx = self.fc1(x)[41;98H[K[41;98H98,2[10C56%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[38;5;130mreturn[m x[41;98H[K[41;98H99,2[10C57%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H100,2[9C58%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1Hmodel = CIFARNET(num_classes).to(device)[41;98H[K[41;98H101,2[9C59%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H102,2[9C60%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1Htrain_loader = torch.utils.data.DataLoader(dataset=train_set, batch_size=batch_size, shuffle=[36mTrue[m)[41;98H[K[41;98H103,2[9C61%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1Htest_loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=batch_size, shuffle=[36mFalse[m)[41;98H[K[41;98H104,2[9C62%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H105,2[9C63%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1Hcriterion = nn.CrossEntropyLoss()[41;98H[K[41;98H106,2[9C63%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1Hoptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)[41;98H[K[41;98H107,1[9C64%[35;1H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H108,2[9C65%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1Htotal_step = [36mlen[m(train_loader)[41;98H[K[41;98H109,2[9C66%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H110,1[9C67%[35;1H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1Hmodel.train()[41;98H[K[41;98H111,2[9C68%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1H[38;5;130mfor[m epoch [38;5;130min[m [36mrange[m(num_epochs):[41;98H[K[41;98H112,2[9C69%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;5H[38;5;130mfor[m i, (images, labels) [38;5;130min[m [36menumerate[m(train_loader):[41;98H[K[41;98H113,1[9C70%[35;1H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Himages = images.to(device)[41;98H[K[41;98H114,2[9C71%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hlabels = labels.to(device)[41;98H[K[41;98H115,1[9C72%[35;1H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H116,2[9C72%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[34m# Forward[m[41;98H[K[41;98H117,2[9C73%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Houtput = model(images)[41;98H[K[41;98H118,2[9C74%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hloss = criterion(output, labels)[41;98H[K[41;98H119,2[9C75%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H120,2[9C76%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[34m# Backprop and Gradient Descent[m[41;98H[K[41;98H121,2[9C77%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hoptimizer.zero_grad()[41;98H[K[41;98H122,2[9C78%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hloss.backward()[41;98H[K[41;98H123,2[9C79%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hoptimizer.step()[41;98H[K[41;98H124,2[9C80%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H125,2[9C81%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[34m# Print out current progress of training[m[41;98H[K[41;98H126,2[9C81%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H[38;5;130mif[m (i+[31m1[m) % [31m100[m == [31m0[m:[41;98H[K[41;98H127,2[9C82%[35;2H[?12l[?25h[?25l[1;40r[1;1H[2M[1;41r[39;13H[36mprint[m([31m'Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'[m.format(epoch+[31m1[m, num_epochs, i+[31m1[m, total_step, loss.itee[40;1Hm()))[41;98H[K[41;98H128,2[9C83%[34;2H[?12l[?25h[?25l[41;100H9[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H130,2[9C84%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1H[34m# Test the model[m[41;98H[K[41;98H131,2[9C85%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1Hmodel.eval()  [34m# eval mode [m[41;98H[K[41;98H132,2[9C86%[35;2H[?12l[?25h[?25l[1;40r[1;1H[2M[1;41r[39;1H[38;5;130mwith[m torch.no_grad():
    correct = [31m0[m[41;98H[K[41;98H133,2[9C88%[34;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;5Htotal = [31m0[m[41;98H[K[41;98H134,1[9C89%[35;1H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;5H[38;5;130mfor[m images, labels [38;5;130min[m test_loader:[41;98H[K[41;98H135,2[9C90%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Himages = images.to(device)[41;98H[K[41;98H136,2[9C91%[35;2H[?12l[?25h[?25l[1;40r[1;1H[2M[1;41r[39;9Hlabels = labels.to(device)[40;9Houtputs = model(images)[41;98H[K[41;98H138,2[9C92%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9H_, predicted = torch.max(outputs.data, [31m1[m)[41;98H[K[41;98H139,2[9C93%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Htotal += labels.size([31m0[m)[41;98H[K[41;98H140,2[9C94%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;9Hcorrect += (predicted == labels).sum().item()[41;98H[K[41;98H141,2[9C95%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H142,2[9C96%[35;2H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;5H[36mprint[m([31m'Test Accuracy of the model on the 10000 test images: {} %'[m.format([31m100[m * correct / total))[41;98H[K[41;98H143,2[9C97%[35;2H[?12l[?25h[?25l[41;102H3[35;3H[?12l[?25h[?25l[41;102H5[35;5H[?12l[?25h[?25l[41;102H6[35;6H[?12l[?25h[?25l[41;102H7[35;7H[?12l[?25h[?25l[41;102H8[35;8H[?12l[?25h[?25l[41;102H9[35;9H[?12l[?25h[?25l[41;102H10[35;10H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[41;98H[K[41;98H144,11[8C98%[35;11H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1Htorch.save(model.state_dict(), [31m'./net3-final2803.pt'[m)[41;98H[K[41;98H145,11[8C99%[35;11H[?12l[?25h[?25l[1;40r[40;1H
[1;41r[40;1Hmodel.load_state_dict(torch.load([31m'./net3-final2803.pt'[m))[41;98H[K[41;98H146,11[8CBot[35;11H[?12l[?25h[?25l[41;100H7,1 [36;1H[?12l[?25h[?25l[37;10H[106m([89C)[m[41;100H8,11[37;11H[?12l[?25h[?25l([89C)[41;100H9,1 [38;1H[?12l[?25h[?25l[39;11H[106m([41C)[m[41;99H50,11[39;11H[?12l[?25h[?25l([41C)[41;100H1[40;11H[?12l[?25h[?25l[41;103H2[40;12H[?12l[?25h[?25l[41;103H3[40;13H[?12l[?25h[?25l[41;103H4[40;14H[?12l[?25h[?25l[41;103H5[40;15H[?12l[?25h[?25l[41;103H6[40;16H[?12l[?25h[?25l[41;103H7[40;17H[?12l[?25h[?25l[41;103H8[40;18H[?12l[?25h[?25l[41;103H9[40;19H[?12l[?25h[?25l[41;102H20[40;20H[?12l[?25h[?25l[41;103H1[40;21H[?12l[?25h[?25lt[106m([33C)[m[41;103H2[40;22H[?12l[?25h[?25l[41;103H3[40;23H[?12l[?25h[?25l([33C)[41;103H4[40;24H[?12l[?25h[?25l[41;103H5[40;25H[?12l[?25h[?25l[41;103H7[40;27H[?12l[?25h[?25l[41;103H8[40;28H[?12l[?25h[?25l[41;103H9[40;29H[?12l[?25h[?25l[41;102H30[40;30H[?12l[?25h[?25l[41;103H1[40;31H[?12l[?25h[?25l[41;103H2[40;32H[?12l[?25h[?25ld[106m([21C)[m[41;103H3[40;33H[?12l[?25h[?25l[41;103H4[40;34H[?12l[?25h[?25l([21C)[41;103H5[40;35H[?12l[?25h[?25l[41;103H6[40;36H[?12l[?25h[?25l[41;103H7[40;37H[?12l[?25h[?25l[41;103H9[40;39H[?12l[?25h[?25l[41;102H40[40;40H[?12l[?25h[?25l[41;103H1[40;41H[?12l[?25h[?25l[41;103H2[40;42H[?12l[?25h[?25l[41;103H3[40;43H[?12l[?25h[?25l[41;103H4[40;44H[?12l[?25h[?25l[41;103H5[40;45H[?12l[?25h[?25l[41;103H6[40;46H[?12l[?25h[?25l[41;103H7[40;47H[?12l[?25h[?25l[41;103H8[40;48H[?12l[?25h[?25l[41;103H9[40;49H[?12l[?25h[?25l[41;103H8[40;48H[?12l[?25h[?25l[41;103H7[40;47H[?12l[?25h[?25l[41;103H6[40;46H[?12l[?25h[?25l[41;103H7[40;47H[?12l[?25h[?25l[41;103H6[40;46H[?12l[?25h[?25l[41;103H5[40;45H[?12l[?25h[?25l[41;103H4[40;44H[?12l[?25h[?25l[41;103H3[40;43H[?12l[?25h[?25l[41;103H2[40;42H[?12l[?25h[?25l[41;103H1[40;41H[?12l[?25h[?25l[41;103H2[40;42H[?12l[?25h[?25l[41;103H3[40;43H[?12l[?25h[?25l[41;103H4[40;44H[?12l[?25h[?25l[41;103H5[40;45H[?12l[?25h[?25l[41;103H6[40;46H[?12l[?25h[?25l[41;103H7[40;47H[?12l[?25h[?25l[41;103H8[40;48H[?12l[?25h[?25l[41;103H9[40;49H[?12l[?25h[?25l[41;102H50[40;50H[?12l[?25h[?25l[41;103H1[40;51H[?12l[?25h[?25l[31m.pt'[m)[40;56H[K[41;103H0[40;50H[?12l[?25h[?25l[31m.pt'[m)[40;55H[K[41;102H49[40;49H[?12l[?25h[?25l[31m.pt'[m)[40;54H[K[41;103H8[40;48H[?12l[?25h[?25l[31m.pt'[m)[40;53H[K[41;103H7[40;47H[?12l[?25h[?25l[31m.pt'[m)[40;52H[K[41;103H6[40;46H[?12l[?25h[?25l[31m.pt'[m)[40;51H[K[41;103H5[40;45H[?12l[?25h[?25l[31m.pt'[m)[40;50H[K[41;103H4[40;44H[?12l[?25h[?25l[31m.pt'[m)[40;49H[K[41;103H3[40;43H[?12l[?25h[?25l[31m.pt'[m)[40;48H[K[41;103H2[40;42H[?12l[?25h[?25l[31mN.pt'[m))[41;103H3[40;43H[?12l[?25h[?25l[31m.pt'[m)[40;48H[K[41;103H2[40;42H[?12l[?25h[?25l[31mM.pt'[m))[41;103H3[40;43H[?12l[?25h[?25l[31mI.pt'[m))[41;103H4[40;44H[?12l[?25h[?25l[31mN.pt'[m))[41;103H5[40;45H[?12l[?25h[?25l[31mS.pt'[m))[41;103H6[40;46H[?12l[?25h[?25l[31mT.pt'[m))[41;103H7[40;47H[?12l[?25h[?25l[31m.pt'[m)[40;52H[K[41;103H6[40;46H[?12l[?25h[?25l[31m.pt'[m)[40;51H[K[41;103H5[40;45H[?12l[?25h[?25l[31m.pt'[m)[40;50H[K[41;103H4[40;44H[?12l[?25h[?25l[31m.pt'[m)[40;49H[K[41;103H3[40;43H[?12l[?25h[?25l[31mN.pt'[m))[41;103H4[40;44H[?12l[?25h[?25l[31mI.pt'[m))[41;103H5[40;45H[?12l[?25h[?25l[31mS.pt'[m))[41;103H6[40;46H[?12l[?25h[?25l[31mT.pt'[m))[41;103H7[40;47H[?12l[?25h[?25l[31m2.pt'[m))[41;103H8[40;48H[?12l[?25h[?25l[31m9.pt'[m))[41;103H9[40;49H[?12l[?25h[?25l[31m0.pt'[m))[41;102H50[40;50H[?12l[?25h[?25l[31m3.pt'[m))[41;103H1[40;51H[?12l[?25h[?25l[41;100H0[39;51H[?12l[?25h[?25l[41;103H0[39;50H[?12l[?25h[?25l[41;102H49[39;49H[?12l[?25h[?25l[31m.pt'[m)[39;53H[K[41;103H8[39;48H[?12l[?25h[?25l[31m.pt'[m)[39;52H[K[41;103H7[39;47H[?12l[?25h[?25l[31m.pt'[m)[39;51H[K[41;103H6[39;46H[?12l[?25h[?25l[31m.pt'[m)[39;50H[K[41;103H5[39;45H[?12l[?25h[?25l[31m.pt'[m)[39;49H[K[41;103H4[39;44H[?12l[?25h[?25l[31m.pt'[m)[39;48H[K[41;103H3[39;43H[?12l[?25h[?25l[31m.pt'[m)[39;47H[K[41;103H2[39;42H[?12l[?25h[?25l[31m.pt'[m)[39;46H[K[41;103H1[39;41H[?12l[?25h[?25l[31m.pt'[m)[39;45H[K[41;103H0[39;40H[?12l[?25h[?25l[31mM.pt'[m)[41;103H1[39;41H[?12l[?25h[?25l[31mN.pt'[m)[41;103H2[39;42H[?12l[?25h[?25l[31mI.pt'[m)[41;103H3[39;43H[?12l[?25h[?25l[31mS.pt'[m)[41;103H4[39;44H[?12l[?25h[?25l[31mT.pt'[m)[41;103H5[39;45H[?12l[?25h[?25l[31m2.pt'[m)[41;103H6[39;46H[?12l[?25h[?25l[31m9.pt'[m)[41;103H7[39;47H[?12l[?25h[?25l[31m0.pt'[m)[41;103H8[39;48H[?12l[?25h[?25l[31m3.pt'[m)[41;103H9[39;49H[?12l[?25h[41;1H[K[39;48H[?25l[41;88H^[[39;48H[41;88H  [39;49H[41;98H150,48[8CBot[39;48H[?12l[?25h[?25l[41;88H:[39;48H[41;88H[K[41;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l[?1002l"NET-3_MNIST.py" 151L, 4776C written
[?1l>[?12l[?25h[?1049l]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ python3NET[K[K[K NET-3_MNIST.py 
cuda:0
Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz
Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz
Processing...
Done!
Traceback (most recent call last):
  File "NET-3_MNIST.py", line 123, in <module>
    output = model(images)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "NET-3_MNIST.py", line 103, in forward
    x = self.fc1(x)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/linear.py", line 67, in forward
    return F.linear(input, self.weight, self.bias)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/functional.py", line 1352, in linear
    ret = torch.addmm(torch.jit._unwrap_optional(bias), input, weight.t())
RuntimeError: size mismatch, m1: [50 x 93312], m2: [61952 x 10] at /opt/conda/conda-bld/pytorch_1544202130060/work/aten/src/THC/generic/THCTensorMathBlas.cu:266
]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ vim[K[K[Kpython3 NET-3_MNIST.py [4Pvim[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?1000h[?1049h[?1h=[2;1Hâ–½[6n[2;1H  [1;1H]11;?[1;53r[?12;25h[?12l[?25h[27m[23m[m[H[2J[?25l[53;1H"NET-3_MNIST.py" 151L, 4776C[>c[1;5H[38;5;130mdef[m [36mforward[m(self, x):[2;9Hx = self.reslayer1(x)[3;9Hx = x.reshape(x.size([31m0[m), -[31m1[m)[4;9Hx = self.fc1(x)[5;9H[38;5;130mreturn[m x

model = CIFARNET(num_classes).to(device)

train_loader = torch.utils.data.DataLoader(dataset=train_set, batch_size=batch_size, shuffle=[36mTrue[m)
test_loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=batch_size, shuffle=[36mFalse[m)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

total_step = [36mlen[m(train_loader)

model.train()
[38;5;130mfor[m epoch [38;5;130min[m [36mrange[m(num_epochs):
    [38;5;130mfor[m i, (images, labels) [38;5;130min[m [36menumerate[m(train_loader):[20;9Himages = images.to(device)[21;9Hlabels = labels.to(device)[23;9H[34m# Forward[m[24;9Houtput = model(images)[25;9Hloss = criterion(output, labels)[27;9H[34m# Backprop and Gradient Descent[m[28;9Hoptimizer.zero_grad()[29;9Hloss.backward()[30;9Hoptimizer.step()[32;9H[34m# Print out current progress of training[m[33;9H[38;5;130mif[m (i+[31m1[m) % [31m100[m == [31m0[m:[34;13H[36mprint[m([31m'Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'[m.format(epoch+[31m1[m, num_epochs, i+[31m1[m, total_step, loss.item()))

[34m# Test the model[m
model.eval()  [34m# eval mode [m
[38;5;130mwith[m torch.no_grad():
    correct = [31m0[m
    total = [31m0[m
    [38;5;130mfor[m images, labels [38;5;130min[m test_loader:[42;9Himages = images.to(device)[43;9Hlabels = labels.to(device)[44;9Houtputs = model(images)[45;9H_, predicted = torch.max(outputs.data, [31m1[m)[46;9Htotal += labels.size([31m0[m)[47;9Hcorrect += (predicted == labels).sum().item()[49;5H[36mprint[m([31m'Test Accuracy of the model on the 10000 test images: {} %'[m.format([31m100[m * correct / total))

torch.save(model.state_dict(), [31m'./net3-MNIST2903.pt'[m)
model.load_state_dict(torch.load([31m'./net3-MNIST2903.pt'[m))[53;169H150,48[8CBot[51;48H[?12l[?25h[?1000l[?1002hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[53;159H~@k[51;48H[53;159H   [50;1H[53;170H49,0-1[50;1H[?12l[?25h[?25l[53;159H~@k[50;1H[53;159H   [49;48H[53;171H8,48 [49;48H[?12l[?25h[?25l[53;159H~@k[49;48H[53;159H   [48;1H[53;171H7,0-1[48;1H[?12l[?25h[?25l[53;159H~@k[48;1H[53;159H   [47;48H[53;171H6,48 [47;48H[?12l[?25h[?25l[53;159H~@k[47;48H[53;159H   [46;31H[106m([1C)[m[53;171H5,31[46;31H[?12l[?25h[?25l[53;159H~@k[46;31H[53;159H   [45;48H[46;29H([1C)[53;171H4,48[45;48H[?12l[?25h[?25l[53;159H~@k[45;48H[53;159H   [44;31H[44;24H[106m([mimages[106m)[m[53;171H3,31[44;31H[?12l[?25h[?25l[53;159H~@k[44;31H[53;159H   [43;34H[43;27H[106m([mdevice[106m)[m[44;24H(images)[53;171H2,34[43;34H[?12l[?25h[?25l[53;159H~@k[43;34H[53;159H   [42;34H[42;27H[106m([mdevice[106m)[m[43;27H(device)[53;171H1[42;34H[?12l[?25h[?25l[53;159H~@k[42;34H[53;159H   [41;38H[42;27H(device)[53;171H0,38[41;38H[?12l[?25h[?25l[53;159H~@k[41;38H[53;159H   [40;13H[53;170H39,13[40;13H[?12l[?25h[?25l[53;159H~@k[40;13H[53;159H   [39;15H[53;171H8,15[39;15H[?12l[?25h[?25l[53;159H~@k[39;15H[53;159H   [38;21H[53;171H7,21[38;21H[?12l[?25h[?25l[53;159H~@k[38;21H[53;159H   [37;26H[53;171H6,26[37;26H[?12l[?25h[?25l[53;159H~@k[37;26H[53;159H   [36;16H[53;171H5,1[36;16H[?12l[?25h[?25l[53;159H~@k[36;16H[53;159H   [35;1H[53;171H4,0-1[35;1H[?12l[?25h[?25l[53;171H3,48 [34;48H[?12l[?25h[?25l[53;159H~@k[34;48H[53;159H   [33;28H[53;171H2,2[33;28H[?12l[?25h[?25l[53;159H~@k[33;28H[53;159H   [32;48H[53;171H1,4[32;48H[?12l[?25h[?25l[53;159H~@k[32;48H[53;159H   [31;8H[53;171H0,8 [31;8H[?12l[?25h[?25l[53;159H~@k[31;8H[53;159H   [30;24H[106m()[m[53;170H29,24[30;24H[?12l[?25h[?25l[53;159H~@k[30;24H[53;159H   [29;23H[106m()[m[30;23H()[53;171H8,23[29;23H[?12l[?25h[?25l[53;159H~@k[29;23H[53;159H   [28;29H[106m()[m[29;22H()[53;171H7,29[28;29H[?12l[?25h[?25l[53;159H~@k[28;29H[53;159H   [27;39H[28;28H()[53;171H6,3[27;39H[?12l[?25h[?25l[53;159H~@k[27;39H[53;159H   [26;8H[53;171H5,8 [26;8H[?12l[?25h[?25l[53;159H~@k[26;8H[53;159H   [25;40H[25;25H[106m([14C)[m[53;171H4,40[25;40H[?12l[?25h[?25l[53;159H~@k[25;40H[53;159H   [24;30H[24;23H[106m([mimages[106m)[m[25;25H([14C)[53;171H3,3[24;30H[?12l[?25h[?25l[53;159H~@k[24;30H[53;159H   [23;17H[24;23H(images)[53;171H2,17[23;17H[?12l[?25h[?25l[53;159H~@k[23;17H[53;159H   [22;8H[53;171H1,8 [22;8H[?12l[?25h[?25l[53;159H~@k[22;8H[53;159H   [21;34H[21;27H[106m([mdevice[106m)[m[53;171H0,34[21;34H[?12l[?25h[?25l[53;159H~@k[21;34H[53;159H   [20;34H[20;27H[106m([mdevice[106m)[m[21;27H(device)[53;170H19[20;34H[?12l[?25h[?25l[53;159H~@k[20;34H[53;159H   [19;48H[20;27H(device)[53;171H8,48[19;48H[?12l[?25h[?25l[53;159H~@k[19;48H[53;159H   [18;31H[53;171H7,31[18;31H[?12l[?25h[?25l[53;159H~@k[18;31H[53;159H   [17;13H[106m()[m[53;171H6,13[17;13H[?12l[?25h[?25l[53;159H~@k[17;13H[53;159H   [16;1H[17;12H()[53;171H5,0-1[16;1H[?12l[?25h[?25l[53;159H~@k[16;1H[53;159H   [15;30H[15;17H[106m([12C)[m[53;171H4,30 [15;30H[?12l[?25h[?25l[53;159H~@k[15;30H[53;159H   [14;1H[15;17H([12C)[53;171H3,0-1[14;1H[?12l[?25h[?25l[53;159H~@k[14;1H[53;159H   [13;48H[53;171H2,48 [13;48H[?12l[?25h[?25l[53;159H~@k[13;48H[53;159H   [12;33H[106m()[m[53;171H1,33[12;33H[?12l[?25h[?25l[53;159H~@k[12;33H[53;159H   [11;1H[12;32H()[53;171H0,0-1[11;1H[?12l[?25h[?25l[53;159H~@k[11;1H[53;159H   [10;48H[53;170H09,48 [10;48H[?12l[?25h[?25l[53;159H~@k[10;48H[53;159H   [9;48H[53;171H8[9;48H[?12l[?25h[?25l[53;159H~@k[9;48H[53;159H   [8;1H[53;171H7,0-1[8;1H[?12l[?25h[?25l[53;159H~@k[8;1H[53;159H   [7;40H[7;33H[106m([mdevice[106m)[m[53;171H6,40 [7;40H[?12l[?25h[?25l[53;159H~@k[7;40H[53;159H   [6;4H[7;33H(device)[53;171H5,4 [6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;16H[1;52r[1;1H[L[1;53r[53;1H[K[53;169H104,16[8C98%[6;16H[?12l[?25h[?25l[53;159H~@k[6;16H[53;159H   [6;23H[1;52r[1;1H[L[1;53r[1;9Hself.fc1 = nn.Linear([31m22[m*[31m22[m*[31m128[m, num_classes)[6;21H[106m([mx[106m)[m[53;169H[K[53;169H103,23[8C97%[6;23H[?12l[?25h[?25l[53;159H~@k[6;23H[53;159H   [6;36H[1;52r[1;1H[L[1;53r[6;22H[106m([13C)[m[7;21H(x)[53;169H[K[53;169H102,36[8C96%[6;36H[?12l[?25h[?25l[53;159H~@k[6;36H[53;159H   [6;29H[1;52r[1;1H[L[1;53r[1;9H)[6;27H[106m([mx[106m)[m[7;22H([13C)[53;169H[K[53;169H101,29[8C95%[6;29H[?12l[?25h[?25l[53;159H~@k[6;29H[53;159H   [6;25H[1;52r[1;1H[L[1;53r[1;13Hnn.AvgPool2d([31m8[m,[31m1[m,[31m1[m)[7;27H(x)[53;169H[K[53;169H100,25[8C94%[6;25H[?12l[?25h[?25l[53;159H~@k[6;25H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;13Hnn.ReLU(),[53;169H[K[53;169H99,8[10C93%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;48H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d([31m128[m),[53;169H[K[53;169H98,48[9C92%[6;48H[?12l[?25h[?25l[53;159H~@k[6;48H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;13HResBlock([31m128[m, [31m128[m),[53;169H[K[53;169H97,8[10C91%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;9H[1;52r[1;1H[L[1;53r[1;13HResBlock1([31m64[m, [31m128[m),[53;169H[K[53;169H96,9[10C90%[6;9H[?12l[?25h[?25l[53;159H~@k[6;9H[53;159H   [6;31H[1;52r[1;1H[L[1;53r[1;13HResBlock([31m64[m, [31m64[m),[6;25H[106m([5C)[m[53;169H[K[53;169H95,31[9C89%[6;31H[?12l[?25h[?25l[53;159H~@k[6;31H[53;159H   [6;22H[1;52r[1;1H[L[1;53r[1;13HResBlock1([31m32[m, [31m64[m),[7;25H([5C)[53;169H[K[53;169H94,22[9C88%[6;22H[?12l[?25h[?25l[53;159H~@k[6;22H[53;159H   [6;32H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d([31m32[m),[53;169H[K[53;169H93,32[9C87%[6;32H[?12l[?25h[?25l[53;159H~@k[6;32H[53;159H   [6;31H[1;52r[1;1H[L[1;53r[1;13HResBlock([31m32[m, [31m32[m),[53;169H[K[53;169H92,31[9C86%[6;31H[?12l[?25h[?25l[53;159H~@k[6;31H[53;159H   [6;31H[1;52r[1;1H[L[1;53r[1;13HResBlock1([31m16[m, [31m32[m),[53;169H[K[53;169H91,31[9C85%[6;31H[?12l[?25h[?25l[53;159H~@k[6;31H[53;159H   [6;29H[1;52r[1;1H[L[1;53r[1;13Hnn.ReLU(),[53;169H[K[53;169H90,29[9C84%[6;29H[?12l[?25h[?25l[53;159H~@k[6;29H[53;159H   [6;30H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d([31m16[m),[53;169H[K[53;169H89,30[9C83%[6;30H[?12l[?25h[?25l[53;159H~@k[6;30H[53;159H   [6;31H[1;52r[1;1H[L[1;53r[1;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[53;169H[K[53;169H88,31[9C82%[6;31H[?12l[?25h[?25l[53;159H~@k[6;31H[53;159H   [6;29H[1;52r[1;1H[L[1;53r[1;9Hself.reslayer1 = nn.Sequential([53;169H[K[53;169H87,29[9C81%[6;29H[?12l[?25h[?25l[53;159H~@k[6;29H[53;159H   [6;30H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H86,30[9C80%[6;30H[?12l[?25h[?25l[53;159H~@k[6;30H[53;159H   [6;22H[1;52r[1;1H[L[1;53r[1;9H[36msuper[m(CIFARNET, self).__init__()[53;169H[K[53;169H85,22[9C79%[6;22H[?12l[?25h[?25l[53;159H~@k[6;22H[53;159H   [6;31H[1;52r[1;1H[L[1;53r[1;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[53;169H[K[53;169H84,31[9C78%[6;31H[?12l[?25h[?25l[1;52r[1;1H[L[1;53r[53;169H[K[53;169H83,48[9C77%[6;48H[?12l[?25h[?25l[53;159H~@k[6;48H[53;159H   [6;39H[1;52r[1;1H[L[1;53r[1;1H[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[6;39H[106m([20;9H)[m[53;169H[K[53;169H82,39[9C76%[6;39H[?12l[?25h[?25l[53;159H~@k[6;39H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[7;39H([21;9H)[53;169H[K[53;169H81,8[10C75%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;40H[1;52r[1;1H[L[1;53r[1;9H[38;5;130mreturn[m x[6;39H[106m()[m[53;169H[K[53;169H80,40[9C74%[6;40H[?12l[?25h[?25l[53;159H~@k[6;40H[53;159H   [6;39H[1;52r[1;1H[L[1;53r[7;39H()[53;169H[K[53;169H79,39[9C73%[6;39H[?12l[?25h[?25l[53;159H~@k[6;39H[53;159H   [6;4H[1;52r[1;1H[L[1;53r[1;9Hx = self.layer1(F.relu(x))[53;169H[K[53;169H78,4[10C72%[6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;26H[1;52r[1;1H[L[1;53r[1;5H[38;5;130mdef[m [36mforward[m(self, x):[53;169H[K[53;169H77,26[9C71%[6;26H[?12l[?25h[?25l[53;159H~@k[6;26H[53;159H   [6;4H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H76,4[10C70%[6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;16H[1;52r[1;1H[L[1;53r[1;13Hself.shrink = nn.Sequential()[53;169H[K[53;169H75,16[9C69%[6;16H[?12l[?25h[?25l[53;159H~@k[6;16H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;9H[38;5;130melse[m:[53;169H[K[53;169H74,8[10C68%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;34H[1;52r[1;1H[L[1;53r[1;13H)[6;24H[106m([9C)[m[53;169H[K[53;169H73,34[9C67%[6;34H[?12l[?25h[?25l[53;159H~@k[6;34H[53;159H   [6;25H[1;52r[1;1H[L[1;53r[1;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[7;24H([9C)[53;169H[K[53;169H72,25[9C66%[6;25H[?12l[?25h[?25l[53;159H~@k[6;25H[53;159H   [6;4H[1;52r[1;1H[L[1;53r[1;13Hself.shrink = nn.Sequential([53;169H[K[53;169H71,4[10C65%[6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;41H[1;52r[1;1H[L[1;53r[1;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[6;40H[106m()[m[53;169H[K[53;169H70,41[9C64%[6;41H[?12l[?25h[?25l[53;159H~@k[6;41H[53;159H   [6;13H[1;52r[1;1H[L[1;53r[7;40H()[53;169H[K[53;169H69,13[9C63%[6;13H[?12l[?25h[?25l[53;159H~@k[6;13H[53;159H   [6;13H[1;52r[1;1H[L[1;53r[1;9H)[4;40H[106m([6;13H)[m[53;169H[K[53;169H68,13[9C62%[6;13H[?12l[?25h[?25l[53;159H~@k[6;13H[53;159H   [6;48H[1;52r[1;1H[L[1;53r[1;13Hnn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[5;40H([7;13H)[53;169H[K[53;169H67,48[9C61%[6;48H[?12l[?25h[?25l[53;159H~@k[6;48H[53;159H   [7;13H[5;40H[106m([7;13H)[m[53;170H8,13[7;13H[?12l[?25h[?25l[53;159H~@k[7;13H[53;159H   [8;13H[5;40H([7;13H)[53;170H9[8;13H[?12l[?25h[?25l[53;159H~@k[8;13H[53;159H   [9;41H[106m()[m[53;169H70,41[9;41H[?12l[?25h[?25l[53;159H~@k[9;41H[53;159H   [10;4H[9;40H()[53;170H1,4 [10;4H[?12l[?25h[?25l[53;159H~@k[10;4H[53;159H   [11;25H[53;170H2,25[11;25H[?12l[?25h[?25l[53;159H~@k[11;25H[53;159H   [12;34H[12;24H[106m([9C)[m[53;170H3,34[12;34H[?12l[?25h[?25l[53;159H~@k[12;34H[53;159H   [13;8H[12;24H([9C)[53;170H4,8 [13;8H[?12l[?25h[?25l[53;159H~@k[13;8H[53;159H   [14;16H[53;170H5,16[14;16H[?12l[?25h[?25l[53;159H~@k[14;16H[53;159H   [15;4H[53;170H6,4 [15;4H[?12l[?25h[?25l[53;159H~@k[15;4H[53;159H   [16;26H[53;170H7,26[16;26H[?12l[?25h[?25l[53;159H~@k[16;26H[53;159H   [17;4H[53;170H8,4 [17;4H[?12l[?25h[?25l[53;159H~@k[17;4H[53;159H   [18;39H[53;170H9,39[18;39H[?12l[?25h[?25l[53;159H~@k[18;39H[53;159H   [19;40H[106m()[m[53;169H80,40[19;40H[?12l[?25h[?25l[53;159H~@k[19;40H[53;159H   [20;8H[19;39H()[53;170H1,8 [20;8H[?12l[?25h[?25l[53;159H~@k[20;8H[53;159H   [21;39H[106m([35;9H)[m[53;170H2,39[21;39H[?12l[?25h[?25l[53;159H~@k[21;39H[53;159H   [22;48H[21;39H([35;9H)[53;170H3,48[22;48H[?12l[?25h[?25l[53;159H~@k[22;48H[53;159H   [23;31H[53;170H4,31[23;31H[?12l[?25h[?25l[53;159H~@k[23;31H[53;159H   [24;22H[53;170H5,22[24;22H[?12l[?25h[?25l[53;159H~@k[24;22H[53;159H   [25;30H[53;170H6,30[25;30H[?12l[?25h[?25l[53;159H~@k[25;30H[53;159H   [26;29H[53;170H7,29[26;29H[?12l[?25h[?25l[53;159H~@k[26;29H[53;159H   [27;31H[53;170H8,31[27;31H[?12l[?25h[?25l[53;159H~@k[27;31H[53;159H   [28;30H[53;170H9,30[28;30H[?12l[?25h[?25l[53;159H~@k[28;30H[53;159H   [29;29H[53;169H90,29[29;29H[?12l[?25h[?25l[53;159H~@k[29;29H[53;159H   [30;31H[53;170H1,31[30;31H[?12l[?25h[?25l[53;159H~@k[30;31H[53;159H   [31;31H[53;170H2[31;31H[?12l[?25h[?25l[53;159H~@k[31;31H[53;159H   [32;32H[53;170H3,32[32;32H[?12l[?25h[?25l[53;159H~@k[32;32H[53;159H   [33;22H[53;170H4,2[33;22H[?12l[?25h[?25l[53;159H~@k[33;22H[53;159H   [34;31H[106m([5C)[m[53;170H5,31[34;31H[?12l[?25h[?25l[53;159H~@k[34;31H[53;159H   [35;9H[21;39H[106m([m[34;25H([5C)[35;9H[106m)[m[53;170H6,9 [35;9H[?12l[?25h[?25l[53;159H~@k[35;9H[53;159H   [36;8H[21;39H([35;9H)[53;170H7,8[36;8H[?12l[?25h[?25l[53;159H~@k[36;8H[53;159H   [37;48H[53;170H8,48[37;48H[?12l[?25h[?25l[53;159H~@k[37;48H[53;159H   [38;8H[53;170H9,8 [38;8H[?12l[?25h[?25l[53;159H~@k[38;8H[53;159H   [39;25H[53;169H100,25[39;25H[?12l[?25h[?25l[53;159H~@k[39;25H[53;159H   [40;29H[106m([mx[106m)[m[53;171H1,29[40;29H[?12l[?25h[?25l[53;159H~@k[40;29H[53;159H   [39;25H[40;27H(x)[53;171H0,25[39;25H[?12l[?25h[?25l[53;159H~@k[39;25H[53;159H   [38;8H[53;169H99,8  [38;8H[?12l[?25h[?25l[53;159H~@k[38;8H[53;159H   [37;48H[53;170H8,48[37;48H[?12l[?25h[?25l[53;159H~@k[37;48H[53;159H   [37;47H[53;173H7[37;47H[?12l[?25h[?25l[53;159H~@k[37;47H[53;159H   [37;46H[53;173H6[37;46H[?12l[?25h[?25l[53;159H~@k[37;46H[53;159H   [37;45H[53;173H5[37;45H[?12l[?25h[?25l[53;159H~@k[37;45H[53;159H   [37;44H[53;173H4[37;44H[?12l[?25h[?25l[53;159H~@k[37;44H[53;159H   [37;43H[53;173H3[37;43H[?12l[?25h[?25l[53;159H~@k[37;43H[53;159H   [37;42H[53;173H2[37;42H[?12l[?25h[?25l[53;159H~@k[37;42H[53;159H   [37;41H[53;173H1[37;41H[?12l[?25h[?25l[53;159H~@k[37;41H[53;159H   [37;40H[53;173H0[37;40H[?12l[?25h[?25l[53;159H~@k[37;40H[53;159H   [37;39H[53;172H39[37;39H[?12l[?25h[?25l[53;159H~@k[37;39H[53;159H   [37;38H[53;173H8[37;38H[?12l[?25h[?25l[53;159H~@k[37;38H[53;159H   [37;37H[53;173H7[37;37H[?12l[?25h[?25l[53;159H~@k[37;37H[53;159H   [37;36H[53;173H6[37;36H[?12l[?25h[?25l[53;159H~@k[37;36H[53;159H   [37;35H[53;173H5[37;35H[?12l[?25h[?25l[53;159Ha[37;35H[53;159H [37;36H[53;1H[1m-- INSERT --[m[53;169H[K[53;169H98,36[9C61%[37;36H[?12l[?25h[?25l[53;173H5[37;35H[?12l[?25h[?25l\*[31m128[m, num_classes)[53;173H6[37;36H[?12l[?25h[?25l*[31m128[m, num_classes)[37;53H[K[53;173H5[37;35H[?12l[?25h[?25l*[31m128[m, num_classes)[37;52H[K[53;173H4[37;34H[?12l[?25h[?25l[31m3[m*[31m128[m, num_classes)[53;173H5[37;35H[?12l[?25h[?25l[53;173H4[37;34H[?12l[?25h[?25l[53;173H3[37;33H[?12l[?25h[?25l[53;173H2[37;32H[?12l[?25h[?25l*[31m23[m*[31m128[m, num_classes)[37;52H[K[53;173H1[37;31H[?12l[?25h[?25l[31m3[m*[31m23[m*[31m128[m, num_classes)[53;173H2[37;32H[?12l[?25h[53;1H[K[37;31H[?25l[53;159H^[[37;31H[53;159H  [37;32H[53;169H98,31[9C61%[37;31H[?12l[?25h[?25l[53;159H:[37;31H[53;159H[K[53;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l[?1002l"NET-3_MNIST.py" 151L, 4776C written
[?1l>[?12l[?25h[?1049l]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ vim NET-3_MNIST.py [4@python3[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
cuda:0
Traceback (most recent call last):
  File "NET-3_MNIST.py", line 123, in <module>
    output = model(images)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "NET-3_MNIST.py", line 103, in forward
    x = self.fc1(x)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/linear.py", line 67, in forward
    return F.linear(input, self.weight, self.bias)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/functional.py", line 1352, in linear
    ret = torch.addmm(torch.jit._unwrap_optional(bias), input, weight.t())
RuntimeError: size mismatch, m1: [50 x 93312], m2: [67712 x 10] at /opt/conda/conda-bld/pytorch_1544202130060/work/aten/src/THC/generic/THCTensorMathBlas.cu:266
]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ python3 NET-3_MNIST.py [4Pvim[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?1000h[?1049h[?1h=[2;1Hâ–½[6n[2;1H  [1;1H]11;?[1;53r[?12;25h[?12l[?25h[27m[23m[m[H[2J[?25l[53;1H"NET-3_MNIST.py" 151L, 4776C[>c[1;9Hx = self.layer1(F.relu(x))[3;9H[38;5;130mreturn[m x

[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[7;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[8;9H[36msuper[m(CIFARNET, self).__init__()[10;9Hself.reslayer1 = nn.Sequential([11;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[12;13Hnn.BatchNorm2d([31m16[m),[13;13Hnn.ReLU(),[14;13HResBlock1([31m16[m, [31m32[m),[15;13HResBlock([31m32[m, [31m32[m),[16;13Hnn.BatchNorm2d([31m32[m),[17;13HResBlock1([31m32[m, [31m64[m),[18;13HResBlock([31m64[m, [31m64[m),[19;13HResBlock1([31m64[m, [31m128[m),[20;13HResBlock([31m128[m, [31m128[m),[21;13Hnn.BatchNorm2d([31m128[m),[22;13Hnn.ReLU(),[23;13Hnn.AvgPool2d([31m8[m,[31m1[m,[31m1[m)[24;9H)[26;9Hself.fc1 = nn.Linear([31m23[m*[31m23[m*[31m128[m, num_classes)[28;5H[38;5;130mdef[m [36mforward[m(self, x):[29;9Hx = self.reslayer1(x)[30;9Hx = x.reshape(x.size([31m0[m), -[31m1[m)[31;9Hx = self.fc1(x)[32;9H[38;5;130mreturn[m x

model = CIFARNET(num_classes).to(device)

train_loader = torch.utils.data.DataLoader(dataset=train_set, batch_size=batch_size, shuffle=[36mTrue[m)
test_loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=batch_size, shuffle=[36mFalse[m)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

total_step = [36mlen[m(train_loader)

model.train()
[38;5;130mfor[m epoch [38;5;130min[m [36mrange[m(num_epochs):
    [38;5;130mfor[m i, (images, labels) [38;5;130min[m [36menumerate[m(train_loader):[47;9Himages = images.to(device)[48;9Hlabels = labels.to(device)[50;9H[34m# Forward[m[51;9Houtput = model(images)[52;9Hloss = criterion(output, labels)[53;169H98,31[9C72%[26;31H[?12l[?25h[?1000l[?1002hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[53;159H~@k[26;31H[53;159H   [26;32H[53;173H2[26;32H[?12l[?25h[?25l[53;159H~@k[26;32H[53;159H   [27;8H[53;170H9,8 [27;8H[?12l[?25h[?25l[53;159H~@k[27;8H[53;159H   [28;25H[53;169H100,25[28;25H[?12l[?25h[?25l[53;159H~@k[28;25H[53;159H   [27;8H[53;169H99,8  [27;8H[?12l[?25h[?25l[53;159H~@k[27;8H[53;159H   [26;32H[53;170H8,32[26;32H[?12l[?25h[?25l[53;159H~@k[26;32H[53;159H   [25;8H[53;170H7,8 [25;8H[?12l[?25h[?25l[53;159H~@k[25;8H[53;159H   [24;9H[10;39H[106m([24;9H)[m[53;170H6,9[24;9H[?12l[?25h[?25l[53;159H~@k[24;9H[53;159H   [23;31H[10;39H([23;25H[106m([5C)[m[24;9H)[53;170H5,31[23;31H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13Hself.shrink = nn.Sequential()[3;5H[38;5;130mdef[m [36mforward[m(self, x):[53;1H[K[53;169H95,31[9C69%[26;31H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[2;13H)[3;9H[38;5;130melse[m:[53;169H[K[53;169H95,31[9C66%[29;31H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[2;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[3;13Hself.shrink = nn.Sequential([53;169H[K[53;169H95,31[9C63%[32;31H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13Hnn.ReLU(),[2;13Hnn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[3;9H)[53;169H[K[53;169H95,31[9C60%[35;31H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;9Hself.layer1 = nn.Sequential([2;13Hnn.Conv2d(in_channels, out_channels, [31m3[m, stride, [31m1[m),[3;13Hnn.BatchNorm2d(out_channels),[53;169H[K[53;169H95,31[9C57%[38;31H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;5H[38;5;130mdef[m [36m__init__[m(self, in_channels, out_channels, stride=[31m1[m):[2;9H[36msuper[m(ResBlock1, self).__init__()[53;169H[K[53;169H95,31[9C54%[41;31H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[3;1H[38;5;130mclass[m [36mResBlock1[m(nn.Module):[53;169H[K[53;169H95,31[9C51%[44;31H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;9Hx = self.layer1(x)[3;9H[38;5;130mreturn[m x[53;169H[K[53;169H95,31[9C48%[47;31H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[2;5H[38;5;130mdef[m [36mforward[m(self, x):[50;25H([5C)[53;169H[K[53;169H92,31[9C45%[47;31H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13H)[2;9H[38;5;130melse[m:[3;13Hself.shrink = nn.Sequential()[53;169H[K[53;169H89,30[9C42%[47;30H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[2;13Hself.shrink = nn.Sequential([3;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[53;169H[K[53;169H86,30[9C39%[47;30H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13Hnn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[2;9H)[53;169H[K[53;169H83,32[9C36%[47;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13Hnn.Conv2d(in_channels, out_channels, [31m3[m, stride, [31m1[m),[2;13Hnn.BatchNorm2d(out_channels),[3;13Hnn.ReLU(),[53;169H[K[53;169H80,32[9C33%[47;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;9Hself.layer1 = nn.Sequential([2;13Hnn.BatchNorm2d(in_channels),[3;13Hnn.ReLU(),[53;169H[K[53;169H77,26[9C30%[47;26H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;5H[38;5;130mdef[m [36m__init__[m(self, in_channels, out_channels, stride=[31m1[m):[2;9H[36msuper[m(ResBlock, self).__init__()[53;169H[K[53;169H74,8[10C27%[47;8H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1H[34m# learning_rate = 0.0001 #61%[m

[38;5;130mclass[m [36mResBlock[m(nn.Module):[53;169H[K[53;169H71,4[10C24%[47;4H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1Hbatch_size = [31m50[m
num_classes = [31m10[m
learning_rate = [31m0.0005[m [34m#68%[m[45;40H[106m([47;13H)[m[53;169H[K[53;169H68,13[9C21%[47;13H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1Htest_set = torchvision.datasets.MNIST([31m'../data/'[m, train=[36mFalse[m, transform=transform)

num_epochs = [31m200[m[48;40H([50;13H)[53;169H[K[53;169H65,32[9C18%[47;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1H[34m# train_set = torchvision.datasets.CIFAR10('../data/', train=True, transform=transform, download=True)
# test_set = torchvision.datasets.CIFAR10('../data/', train=False, transform=transform)[m
train_set = torchvision.datasets.MNIST([31m'../data/'[m, train=[36mTrue[m, transform=transform, download=[36mTrue[m)[53;169H[K[53;169H62,32[9C15%[47;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;5Htorchvision.transforms.RandomCrop([31m32[m),
    torchvision.transforms.ToTensor()])[53;169H[K[53;169H59,32[9C12%[47;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1Htransform = torchvision.transforms.Compose([
    torchvision.transforms.Pad([31m4[m),
    torchvision.transforms.RandomHorizontalFlip(),[53;169H[K[53;169H56,32[10C9%[47;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1H[36mprint[m(device)

[34m# Image preprocessing modules[m[53;169H[K[53;169H53,4[11C6%[47;4H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1H[35mimport[m torchvision

device = torch.device([31m'cuda:0'[m [38;5;130mif[m torch.cuda.is_available() [38;5;130melse[m [31m'cpu'[m)[53;169H[K[53;169H50,8[11C3%[47;8H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1H[35mimport[m torch
[35mimport[m torch.nn [38;5;130mas[m nn
[35mimport[m torch.nn.functional [38;5;130mas[m F[53;169H[K[53;169H47,25[9CTop[47;25H[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;1H[38;5;130mclass[m [36mResBlock1[m(nn.Module):
    [38;5;130mdef[m [36m__init__[m(self, in_channels, out_channels, stride=[31m1[m):[53;169H[K[53;169H47,25[10C3%[44;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9H[36msuper[m(ResBlock1, self).__init__()[52;9Hself.layer1 = nn.Sequential([53;169H[K[53;169H47,25[10C6%[41;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;13Hnn.Conv2d(in_channels, out_channels, [31m3[m, stride, [31m1[m),[51;13Hnn.BatchNorm2d(out_channels),[52;13Hnn.ReLU(),[53;169H[K[53;169H47,25[10C9%[38;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;13Hnn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[51;9H)[53;169H[K[53;169H47,25[9C12%[35;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[51;13Hself.shrink = nn.Sequential([52;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[53;169H[K[53;169H47,25[9C15%[32;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;13H)[51;9H[38;5;130melse[m:[52;13Hself.shrink = nn.Sequential()[53;169H[K[53;169H47,25[9C18%[29;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;5H[38;5;130mdef[m [36mforward[m(self, x):[52;9Hx = self.layer1(F.relu(x))[53;169H[K[53;169H47,25[9C21%[26;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;9H[38;5;130mreturn[m x[53;169H[K[53;169H47,25[9C24%[23;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;1H[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[52;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[53;169H[K[53;169H47,25[9C27%[20;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9H[36msuper[m(CIFARNET, self).__init__()[52;9Hself.reslayer1 = nn.Sequential([53;169H[K[53;169H47,25[9C30%[17;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[51;13Hnn.BatchNorm2d([31m16[m),[52;13Hnn.ReLU(),[53;169H[K[53;169H47,25[9C33%[14;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;13HResBlock1([31m16[m, [31m32[m),[51;13HResBlock([31m32[m, [31m32[m),[52;13Hnn.BatchNorm2d([31m32[m),[53;169H[K[53;169H47,25[9C36%[11;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;13HResBlock1([31m32[m, [31m64[m),[51;13HResBlock([31m64[m, [31m64[m),[52;13HResBlock1([31m64[m, [31m128[m),[53;169H[K[53;169H47,25[9C39%[8;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;13HResBlock([31m128[m, [31m128[m),[51;13Hnn.BatchNorm2d([31m128[m),[52;13Hnn.ReLU(),[53;169H[K[53;169H48,12[9C42%[6;12H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;13Hnn.AvgPool2d([31m8[m,[31m1[m,[31m1[m)[51;9H)[53;169H[K[53;169H51,16[9C45%[6;16H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Hself.fc1 = nn.Linear([31m23[m*[31m23[m*[31m128[m, num_classes)[52;5H[38;5;130mdef[m [36mforward[m(self, x):[53;169H[K[53;169H54,27[9C48%[6;27H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Hx = self.reslayer1(x)[51;9Hx = x.reshape(x.size([31m0[m), -[31m1[m)[52;9Hx = self.fc1(x)[53;169H[K[53;169H57,8[10C51%[6;8H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9H[38;5;130mreturn[m x

model = CIFARNET(num_classes).to(device)[53;169H[K[53;169H60,32[9C54%[6;32H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[1;36H[106m([6;9H)[m[51;1Htrain_loader = torch.utils.data.DataLoader(dataset=train_set, batch_size=batch_size, shuffle=[36mTrue[m)
test_loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=batch_size, shuffle=[36mFalse[m)[53;169H[K[53;169H63,9[10C57%[6;9H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[3;9H)[51;1Hcriterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)[53;169H[K[53;169H66,32[9C60%[6;32H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;1Htotal_step = [36mlen[m(train_loader)[53;169H[K[53;169H69,13[9C63%[6;13H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;1Hmodel.train()
[38;5;130mfor[m epoch [38;5;130min[m [36mrange[m(num_epochs):
    [38;5;130mfor[m i, (images, labels) [38;5;130min[m [36menumerate[m(train_loader):[53;169H[K[53;169H72,25[9C66%[6;25H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Himages = images.to(device)[51;9Hlabels = labels.to(device)[53;169H[K[53;169H75,16[9C69%[6;16H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9H[34m# Forward[m[51;9Houtput = model(images)[52;9Hloss = criterion(output, labels)[53;169H[K[53;169H78,4[10C72%[6;4H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;9H[34m# Backprop and Gradient Descent[m[52;9Hoptimizer.zero_grad()[53;169H[K[53;169H81,8[10C75%[6;8H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Hloss.backward()[51;9Hoptimizer.step()[53;169H[K[53;169H84,31[9C78%[6;31H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9H[34m# Print out current progress of training[m[51;9H[38;5;130mif[m (i+[31m1[m) % [31m100[m == [31m0[m:[52;13H[36mprint[m([31m'Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'[m.format(epoch+[31m1[m, num_epochs, i+[31m1[m, total_step, loss.item()))[53;169H[K[53;169H87,29[9C81%[6;29H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;1H[34m# Test the model[m
model.eval()  [34m# eval mode [m[53;169H[K[53;169H90,29[9C84%[6;29H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;1H[38;5;130mwith[m torch.no_grad():
    correct = [31m0[m
    total = [31m0[m[53;169H[K[53;169H93,32[9C87%[6;32H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;5H[38;5;130mfor[m images, labels [38;5;130min[m test_loader:[51;9Himages = images.to(device)[52;9Hlabels = labels.to(device)[53;169H[K[53;169H96,9[10C90%[6;9H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Houtputs = model(images)[51;9H_, predicted = torch.max(outputs.data, [31m1[m)[52;9Htotal += labels.size([31m0[m)[53;169H[K[53;169H99,8[10C93%[6;8H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Hcorrect += (predicted == labels).sum().item()[52;5H[36mprint[m([31m'Test Accuracy of the model on the 10000 test images: {} %'[m.format([31m100[m * correct / total))[53;169H[K[53;169H102,32[8C96%[6;32H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;1Htorch.save(model.state_dict(), [31m'./net3-MNIST2903.pt'[m)
model.load_state_dict(torch.load([31m'./net3-MNIST2903.pt'[m))[53;169H[K[53;169H105,4[9CBot[6;4H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H108,32[8CBot[6;32H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[6;32H[106m()[m[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H111,32[8CBot[6;32H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[3;32H()[6;17H[106m([12C)[m[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H114,30[8CBot[6;30H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[3;17H([12C)[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H117,31[8CBot[6;31H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H120,32[8CBot[6;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1Hoptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

total_step = [36mlen[m(train_loader)[53;169H[K[53;169H120,32[8CBot[9;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1Htest_loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=batch_size, shuffle=[36mFalse[m)

criterion = nn.CrossEntropyLoss()[53;169H[K[53;169H120,32[8CBot[12;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;1Hmodel = CIFARNET(num_classes).to(device)

train_loader = torch.utils.data.DataLoader(dataset=train_set, batch_size=batch_size, shuffle=[36mTrue[m)[53;169H[K[53;169H120,32[8CBot[15;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;9Hx = self.fc1(x)[2;9H[38;5;130mreturn[m x[53;169H[K[53;169H120,32[8CBot[18;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;5H[38;5;130mdef[m [36mforward[m(self, x):[2;9Hx = self.reslayer1(x)[3;9Hx = x.reshape(x.size([31m0[m), -[31m1[m)[53;169H[K[53;169H120,32[8CBot[21;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[2;9Hself.fc1 = nn.Linear([31m23[m*[31m23[m*[31m128[m, num_classes)[53;169H[K[53;169H120,32[8C96%[24;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13Hnn.ReLU(),[2;13Hnn.AvgPool2d([31m8[m,[31m1[m,[31m1[m)[3;9H)[53;169H[K[53;169H120,32[8C93%[27;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13HResBlock1([31m64[m, [31m128[m),[2;13HResBlock([31m128[m, [31m128[m),[3;13Hnn.BatchNorm2d([31m128[m),[53;169H[K[53;169H120,32[8C90%[30;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13Hnn.BatchNorm2d([31m32[m),[2;13HResBlock1([31m32[m, [31m64[m),[3;13HResBlock([31m64[m, [31m64[m),[53;169H[K[53;169H120,32[8C87%[33;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13Hnn.ReLU(),[2;13HResBlock1([31m16[m, [31m32[m),[3;13HResBlock([31m32[m, [31m32[m),[53;169H[K[53;169H120,32[8C84%[36;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;9Hself.reslayer1 = nn.Sequential([2;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[3;13Hnn.BatchNorm2d([31m16[m),[53;169H[K[53;169H120,32[8C81%[39;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[2;9H[36msuper[m(CIFARNET, self).__init__()[53;169H[K[53;169H120,32[8C78%[42;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[2;1H[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[53;169H[K[53;169H120,32[8C75%[45;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;9Hx = self.layer1(F.relu(x))[3;9H[38;5;130mreturn[m x[53;169H[K[53;169H119,32[8C72%[47;32H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13Hself.shrink = nn.Sequential()[3;5H[38;5;130mdef[m [36mforward[m(self, x):[47;12H[106m()[m[53;169H[K[53;169H116,13[8C69%[47;13H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[2;13H)[3;9H[38;5;130melse[m:[50;12H()[53;169H[K[53;169H113,0-1[7C66%[47;1H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[2;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[3;13Hself.shrink = nn.Sequential([53;169H[K[53;169H110,0-1[7C63%[47;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;1Hmodel.train()
[38;5;130mfor[m epoch [38;5;130min[m [36mrange[m(num_epochs):
    [38;5;130mfor[m i, (images, labels) [38;5;130min[m [36menumerate[m(train_loader):[53;169H[K[53;169H110,0-1[7C66%[44;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Himages = images.to(device)[51;9Hlabels = labels.to(device)[53;169H[K[53;169H110,0-1[7C69%[41;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9H[34m# Forward[m[51;9Houtput = model(images)[52;9Hloss = criterion(output, labels)[53;169H[K[53;169H110,0-1[7C72%[38;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;9H[34m# Backprop and Gradient Descent[m[52;9Hoptimizer.zero_grad()[53;169H[K[53;169H110,0-1[7C75%[35;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Hloss.backward()[51;9Hoptimizer.step()[53;169H[K[53;169H110,0-1[7C78%[32;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9H[34m# Print out current progress of training[m[51;9H[38;5;130mif[m (i+[31m1[m) % [31m100[m == [31m0[m:[52;13H[36mprint[m([31m'Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'[m.format(epoch+[31m1[m, num_epochs, i+[31m1[m, total_step, loss.item()))[53;169H[K[53;169H110,0-1[7C81%[29;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;1H[34m# Test the model[m
model.eval()  [34m# eval mode [m[53;169H[K[53;169H110,0-1[7C84%[26;1H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;9Hself.reslayer1 = nn.Sequential([2;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[3;13Hnn.BatchNorm2d([31m16[m),[53;169H[K[53;169H110,0-1[7C81%[29;1H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[2;9H[36msuper[m(CIFARNET, self).__init__()[53;169H[K[53;169H110,0-1[7C78%[32;1H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[2;1H[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[53;169H[K[53;169H110,0-1[7C75%[35;1H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;9Hx = self.layer1(F.relu(x))[3;9H[38;5;130mreturn[m x[53;169H[K[53;169H110,0-1[7C72%[38;1H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;13Hself.shrink = nn.Sequential()[3;5H[38;5;130mdef[m [36mforward[m(self, x):[53;169H[K[53;169H110,0-1[7C69%[41;1H[?12l[?25h[?25l[1;52r[1;1H[3L[1;53r[1;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[2;13H)[3;9H[38;5;130melse[m:[53;169H[K[53;169H110,0-1[7C66%[44;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Himages = images.to(device)[51;9Hlabels = labels.to(device)[53;169H[K[53;169H110,0-1[7C69%[41;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9H[34m# Forward[m[51;9Houtput = model(images)[52;9Hloss = criterion(output, labels)[53;169H[K[53;169H110,0-1[7C72%[38;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;9H[34m# Backprop and Gradient Descent[m[52;9Hoptimizer.zero_grad()[53;169H[K[53;169H110,0-1[7C75%[35;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Hloss.backward()[51;9Hoptimizer.step()[53;169H[K[53;169H110,0-1[7C78%[32;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9H[34m# Print out current progress of training[m[51;9H[38;5;130mif[m (i+[31m1[m) % [31m100[m == [31m0[m:[52;13H[36mprint[m([31m'Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'[m.format(epoch+[31m1[m, num_epochs, i+[31m1[m, total_step, loss.item()))[53;169H[K[53;169H110,0-1[7C81%[29;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;1H[34m# Test the model[m
model.eval()  [34m# eval mode [m[53;169H[K[53;169H110,0-1[7C84%[26;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;1H[38;5;130mwith[m torch.no_grad():
    correct = [31m0[m
    total = [31m0[m[53;169H[K[53;169H110,0-1[7C87%[23;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;5H[38;5;130mfor[m images, labels [38;5;130min[m test_loader:[51;9Himages = images.to(device)[52;9Hlabels = labels.to(device)[53;169H[K[53;169H110,0-1[7C90%[20;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Houtputs = model(images)[51;9H_, predicted = torch.max(outputs.data, [31m1[m)[52;9Htotal += labels.size([31m0[m)[53;169H[K[53;169H110,0-1[7C93%[17;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;9Hcorrect += (predicted == labels).sum().item()[52;5H[36mprint[m([31m'Test Accuracy of the model on the 10000 test images: {} %'[m.format([31m100[m * correct / total))[53;169H[K[53;169H110,0-1[7C96%[14;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[51;1Htorch.save(model.state_dict(), [31m'./net3-MNIST2903.pt'[m)
model.load_state_dict(torch.load([31m'./net3-MNIST2903.pt'[m))[53;169H[K[53;169H110,0-1[7CBot[11;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H110,0-1[7CBot[8;1H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[6;32H[106m()[m[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H111,32[8CBot[6;32H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[3;32H()[6;17H[106m([12C)[m[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H114,30[8CBot[6;30H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[3;17H([12C)[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H117,31[8CBot[6;31H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H120,32[8CBot[6;32H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[6;23H[106m([mimages[106m)[m[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H123,30[8CBot[6;30H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[3;23H(images)[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H126,32[8CBot[6;32H[?12l[?25h[?25l[1;52r[1;1H[3M[1;53r[6;23H[106m()[m[50;1H[94m~                                                                                                                                                                                         [51;1H~                                                                                                                                                                                         [52;1H~                                                                                                                                                                                         [m[53;169H[K[53;169H129,24[8CBot[6;24H[?12l[?25h[?25l[53;159H^[[6;24H[53;159H  [6;24H[53;159H^[[6;24H[53;159H  [6;24H[?12l[?25h[?25l[53;159H^[[6;24H[53;159H  [6;24H[53;159H^[[6;24H[53;159H  [6;24H[?12l[?25h[?25l[53;159H^[[6;24H[53;159H  [6;24H[53;159H^[[6;24H[53;159H  [6;24H[?12l[?25h[?25l[53;159H:[6;24H[53;159H[K[53;1H:[?12l[?25hq[?25l[?12l[?25h[?25l[?1002l[53;1H[K[53;1H[?1l>[?12l[?25h[?1049l]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ 
Display all 1379 possibilities? (y or n)^C
]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ vim NET-3_MNIST.py [4@python3[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[4Pvim[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?1000h[?1049h[?1h=[2;1Hâ–½[6n[2;1H  [1;1H]11;?[1;53r[?12;25h[?12l[?25h[27m[23m[m[H[2J[?25l[53;1H"NET-3_MNIST.py" 151L, 4776C[>c[1;5H[38;5;130mdef[m [36mforward[m(self, x):[2;9Hx = self.reslayer1(x)[3;9Hx = x.reshape(x.size([31m0[m), -[31m1[m)[4;9Hx = self.fc1(x)[5;9H[38;5;130mreturn[m x

model = CIFARNET(num_classes).to(device)

train_loader = torch.utils.data.DataLoader(dataset=train_set, batch_size=batch_size, shuffle=[36mTrue[m)
test_loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=batch_size, shuffle=[36mFalse[m)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

total_step = [36mlen[m(train_loader)

model.train()
[38;5;130mfor[m epoch [38;5;130min[m [36mrange[m(num_epochs):
    [38;5;130mfor[m i, (images, labels) [38;5;130min[m [36menumerate[m(train_loader):[20;9Himages = images.to(device)[21;9Hlabels = labels.to(device)[23;9H[34m# Forward[m[24;9Houtput = model(images)[25;9Hloss = criterion(output, labels)[27;9H[34m# Backprop and Gradient Descent[m[28;9Hoptimizer.zero_grad()[29;9Hloss.backward()[30;9Hoptimizer.step[106m()[m[32;9H[34m# Print out current progress of training[m[33;9H[38;5;130mif[m (i+[31m1[m) % [31m100[m == [31m0[m:[34;13H[36mprint[m([31m'Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'[m.format(epoch+[31m1[m, num_epochs, i+[31m1[m, total_step, loss.item()))

[34m# Test the model[m
model.eval()  [34m# eval mode [m
[38;5;130mwith[m torch.no_grad():
    correct = [31m0[m
    total = [31m0[m
    [38;5;130mfor[m images, labels [38;5;130min[m test_loader:[42;9Himages = images.to(device)[43;9Hlabels = labels.to(device)[44;9Houtputs = model(images)[45;9H_, predicted = torch.max(outputs.data, [31m1[m)[46;9Htotal += labels.size([31m0[m)[47;9Hcorrect += (predicted == labels).sum().item()[49;5H[36mprint[m([31m'Test Accuracy of the model on the 10000 test images: {} %'[m.format([31m100[m * correct / total))

torch.save(model.state_dict(), [31m'./net3-MNIST2903.pt'[m)
model.load_state_dict(torch.load([31m'./net3-MNIST2903.pt'[m))[53;169H129,24[8CBot[30;24H[?12l[?25h[?1000l[?1002hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[53;159H~@k[30;24H[53;159H   [31;8H[30;23H()[53;170H30,8 [31;8H[?12l[?25h[?25l[53;159H~@k[31;8H[53;159H   [32;24H[53;171H1,24[32;24H[?12l[?25h[?25l[53;159H~@k[32;24H[53;159H   [31;8H[53;171H0,8 [31;8H[?12l[?25h[?25l[53;159H~@k[31;8H[53;159H   [30;24H[106m()[m[53;170H29,24[30;24H[?12l[?25h[?25l[53;159H~@k[30;24H[53;159H   [29;23H[106m()[m[30;23H()[53;171H8,23[29;23H[?12l[?25h[?25l[53;159H~@k[29;23H[53;159H   [28;24H[29;22H()[53;171H7,24[28;24H[?12l[?25h[?25l[53;159H~@k[28;24H[53;159H   [27;24H[53;171H6[27;24H[?12l[?25h[?25l[53;159H~@k[27;24H[53;159H   [26;8H[53;171H5,8 [26;8H[?12l[?25h[?25l[53;159H~@k[26;8H[53;159H   [25;24H[53;171H4,24[25;24H[?12l[?25h[?25l[53;159H~@k[25;24H[53;159H   [24;24H[53;171H3[24;24H[?12l[?25h[?25l[53;159H~@k[24;24H[53;159H   [23;17H[53;171H2,17[23;17H[?12l[?25h[?25l[53;159H~@k[23;17H[53;159H   [22;8H[53;171H1,8 [22;8H[?12l[?25h[?25l[53;159H~@k[22;8H[53;159H   [21;24H[53;171H0,24[21;24H[?12l[?25h[?25l[53;159H~@k[21;24H[53;159H   [20;24H[53;170H19[20;24H[?12l[?25h[?25l[53;159H~@k[20;24H[53;159H   [19;24H[53;171H8[19;24H[?12l[?25h[?25l[53;159H~@k[19;24H[53;159H   [18;24H[53;171H7[18;24H[?12l[?25h[?25l[53;159H~@k[18;24H[53;159H   [17;13H[106m()[m[53;171H6,13[17;13H[?12l[?25h[?25l[53;159H~@k[17;13H[53;159H   [16;1H[17;12H()[53;171H5,0-1[16;1H[?12l[?25h[?25l[53;159H~@k[16;1H[53;159H   [15;24H[53;171H4,24 [15;24H[?12l[?25h[?25l[53;159H~@k[15;24H[53;159H   [14;1H[53;171H3,0-1[14;1H[?12l[?25h[?25l[53;159H~@k[14;1H[53;159H   [13;24H[53;171H2,24 [13;24H[?12l[?25h[?25l[53;159H~@k[13;24H[53;159H   [12;24H[53;171H1[12;24H[?12l[?25h[?25l[53;159H~@k[12;24H[53;159H   [11;1H[53;171H0,0-1[11;1H[?12l[?25h[?25l[53;159H~@k[11;1H[53;159H   [10;24H[53;170H09,24 [10;24H[?12l[?25h[?25l[53;159H~@k[10;24H[53;159H   [9;24H[53;171H8[9;24H[?12l[?25h[?25l[53;159H~@k[9;24H[53;159H   [8;1H[53;171H7,0-1[8;1H[?12l[?25h[?25l[53;159H~@k[8;1H[53;159H   [7;24H[53;171H6,24 [7;24H[?12l[?25h[?25l[53;159H~@k[7;24H[53;159H   [6;4H[53;171H5,4 [6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;16H[1;52r[1;1H[L[1;53r[53;1H[K[53;169H104,16[8C98%[6;16H[?12l[?25h[?25l[53;159H~@k[6;16H[53;159H   [6;23H[1;52r[1;1H[L[1;53r[1;9Hself.fc1 = nn.Linear([31m23[m*[31m23[m*[31m128[m, num_classes)[6;21H[106m([mx[106m)[m[53;169H[K[53;169H103,23[8C97%[6;23H[?12l[?25h[?25l[53;159H~@k[6;23H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[7;21H(x)[53;169H[K[53;169H102,24[8C96%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9H)[53;169H[K[53;169H101,24[8C95%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.AvgPool2d([31m8[m,[31m1[m,[31m1[m)[6;16H[106m([7C)[m[53;169H[K[53;169H100,24[8C94%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;13Hnn.ReLU(),[7;16H([7C)[53;169H[K[53;169H99,8[10C93%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d([31m128[m),[53;169H[K[53;169H98,24[9C92%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;13HResBlock([31m128[m, [31m128[m),[53;169H[K[53;169H97,8[10C91%[6;8H[?12l[?25h[?25l[1;52r[1;1H[L[1;53r[1;13HResBlock1([31m64[m, [31m128[m),[53;169H[K[53;169H96,9[10C90%[6;9H[?12l[?25h[?25l[53;159H~@k[6;9H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13HResBlock([31m64[m, [31m64[m),[53;169H[K[53;169H95,24[9C89%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;22H[1;52r[1;1H[L[1;53r[1;13HResBlock1([31m32[m, [31m64[m),[53;169H[K[53;169H94,22[9C88%[6;22H[?12l[?25h[?25l[53;159H~@k[6;22H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d([31m32[m),[53;169H[K[53;169H93,24[9C87%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13HResBlock([31m32[m, [31m32[m),[53;169H[K[53;169H92,24[9C86%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13HResBlock1([31m16[m, [31m32[m),[53;169H[K[53;169H91,24[9C85%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.ReLU(),[53;169H[K[53;169H90,24[9C84%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d([31m16[m),[53;169H[K[53;169H89,24[9C83%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[53;169H[K[53;169H88,24[9C82%[6;24H[?12l[?25h[?25l[1;52r[1;1H[L[1;53r[1;9Hself.reslayer1 = nn.Sequential([53;169H[K[53;169H87,24[9C81%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H86,24[9C80%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;22H[1;52r[1;1H[L[1;53r[1;9H[36msuper[m(CIFARNET, self).__init__()[53;169H[K[53;169H85,22[9C79%[6;22H[?12l[?25h[?25l[53;159H~@k[6;22H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[53;169H[K[53;169H84,24[9C78%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H83,24[9C77%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;1H[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[53;169H[K[53;169H82,24[9C76%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H81,8[10C75%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9H[38;5;130mreturn[m x[53;169H[K[53;169H80,24[9C74%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H79,24[9C73%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;4H[1;52r[1;1H[L[1;53r[1;9Hx = self.layer1(F.relu(x))[53;169H[K[53;169H78,4[10C72%[6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;5H[38;5;130mdef[m [36mforward[m(self, x):[53;169H[K[53;169H77,24[9C71%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;4H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H76,4[10C70%[6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [7;24H[53;170H7,24[7;24H[?12l[?25h[?25l[53;159H~@k[7;24H[53;159H   [8;4H[53;170H8,4 [8;4H[?12l[?25h[?25l[53;159H~@k[8;4H[53;159H   [9;24H[53;170H9,24[9;24H[?12l[?25h[?25l[53;159H~@k[9;24H[53;159H   [10;24H[53;169H80[10;24H[?12l[?25h[?25l[53;159H~@k[10;24H[53;159H   [11;8H[53;170H1,8 [11;8H[?12l[?25h[?25l[53;159H~@k[11;8H[53;159H   [12;24H[53;170H2,24[12;24H[?12l[?25h[?25l[53;159H~@k[12;24H[53;159H   [13;24H[53;170H3[13;24H[?12l[?25h[?25l[53;159H~@k[13;24H[53;159H   [14;24H[53;170H4[14;24H[?12l[?25h[?25l[53;159H~@k[14;24H[53;159H   [15;22H[53;170H5,22[15;22H[?12l[?25h[?25l[53;159H~@k[15;22H[53;159H   [16;24H[53;170H6,24[16;24H[?12l[?25h[?25l[53;159H~@k[16;24H[53;159H   [17;24H[53;170H7[17;24H[?12l[?25h[?25l[53;159H~@k[17;24H[53;159H   [18;24H[53;170H8[18;24H[?12l[?25h[?25l[53;159H~@k[18;24H[53;159H   [19;24H[53;170H9[19;24H[?12l[?25h[?25l[53;159H~@k[19;24H[53;159H   [20;24H[53;169H90[20;24H[?12l[?25h[?25l[53;159H~@k[20;24H[53;159H   [21;24H[53;170H1[21;24H[?12l[?25h[?25l[53;159H~@k[21;24H[53;159H   [22;24H[53;170H2[22;24H[?12l[?25h[?25l[53;159H~@k[22;24H[53;159H   [23;24H[53;170H3[23;24H[?12l[?25h[?25l[53;159H~@k[23;24H[53;159H   [24;22H[53;170H4,22[24;22H[?12l[?25h[?25l[53;159H~@k[24;22H[53;159H   [25;24H[53;170H5,24[25;24H[?12l[?25h[?25l[53;159H~@k[25;24H[53;159H   [26;9H[12;39H[106m([26;9H)[m[53;170H6,9 [26;9H[?12l[?25h[?25l[53;159H~@k[26;9H[53;159H   [27;8H[12;39H([26;9H)[53;170H7,8[27;8H[?12l[?25h[?25l[53;159H~@k[27;8H[53;159H   [28;24H[53;170H8,24[28;24H[?12l[?25h[?25l[53;159H^[[28;24H[53;159H  [28;24H[?12l[?25h[?25l[53;159H^[[28;24H[53;159H  [28;24H[53;159H^[[28;24H[53;159H  [28;24H[?12l[?25h[?25l[53;159H:[28;24H[53;159H[K[53;1H:[?12l[?25hq[?25l[?12l[?25h[?25l[?1002l[53;1H[K[53;1H[?1l>[?12l[?25h[?1049l]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ vim NET-3_MNIST.py [4@python3[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
cuda:0
Traceback (most recent call last):
  File "NET-3_MNIST.py", line 123, in <module>
    output = model(images)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "NET-3_MNIST.py", line 103, in forward
    x = self.fc1(x)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/modules/linear.py", line 67, in forward
    return F.linear(input, self.weight, self.bias)
  File "/opt/anaconda3/lib/python3.7/site-packages/torch/nn/functional.py", line 1352, in linear
    ret = torch.addmm(torch.jit._unwrap_optional(bias), input, weight.t())
RuntimeError: size mismatch, m1: [50 x 93312], m2: [67712 x 10] at /opt/conda/conda-bld/pytorch_1544202130060/work/aten/src/THC/generic/THCTensorMathBlas.cu:266
]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ python3 NET-3_MNIST.py [4Pvim[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?1000h[?1049h[?1h=[2;1Hâ–½[6n[2;1H  [1;1H]11;?[1;53r[?12;25h[?12l[?25h[27m[23m[m[H[2J[?25l[53;1H"NET-3_MNIST.py" 151L, 4776C[>c[1;9Hx = self.layer1(F.relu(x))[3;9H[38;5;130mreturn[m x

[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[7;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[8;9H[36msuper[m(CIFARNET, self).__init__()[10;9Hself.reslayer1 = nn.Sequential([11;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[12;13Hnn.BatchNorm2d([31m16[m),[13;13Hnn.ReLU(),[14;13HResBlock1([31m16[m, [31m32[m),[15;13HResBlock([31m32[m, [31m32[m),[16;13Hnn.BatchNorm2d([31m32[m),[17;13HResBlock1([31m32[m, [31m64[m),[18;13HResBlock([31m64[m, [31m64[m),[19;13HResBlock1([31m64[m, [31m128[m),[20;13HResBlock([31m128[m, [31m128[m),[21;13Hnn.BatchNorm2d([31m128[m),[22;13Hnn.ReLU(),[23;13Hnn.AvgPool2d([31m8[m,[31m1[m,[31m1[m)[24;9H)[26;9Hself.fc1 = nn.Linear([31m23[m*[31m23[m*[31m128[m, num_classes)[28;5H[38;5;130mdef[m [36mforward[m(self, x):[29;9Hx = self.reslayer1(x)[30;9Hx = x.reshape(x.size([31m0[m), -[31m1[m)[31;9Hx = self.fc1(x)[32;9H[38;5;130mreturn[m x

model = CIFARNET(num_classes).to(device)

train_loader = torch.utils.data.DataLoader(dataset=train_set, batch_size=batch_size, shuffle=[36mTrue[m)
test_loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=batch_size, shuffle=[36mFalse[m)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

total_step = [36mlen[m(train_loader)

model.train()
[38;5;130mfor[m epoch [38;5;130min[m [36mrange[m(num_epochs):
    [38;5;130mfor[m i, (images, labels) [38;5;130min[m [36menumerate[m(train_loader):[47;9Himages = images.to(device)[48;9Hlabels = labels.to(device)[50;9H[34m# Forward[m[51;9Houtput = model(images)[52;9Hloss = criterion(output, labels)[53;169H98,24[9C72%[26;24H[?12l[?25h[?1000l[?1002hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[53;159H~@k[26;24H[53;159H   [27;8H[53;170H9,8 [27;8H[?12l[?25h[?25l[53;159H~@k[27;8H[53;159H   [28;24H[28;16H[106m([7C)[m[53;169H100,24[28;24H[?12l[?25h[?25l[53;159H~@k[28;24H[53;159H   [29;24H[28;16H([7C)[53;171H1[29;24H[?12l[?25h[?25l[53;159H~@k[29;24H[53;159H   [30;24H[53;171H2[30;24H[?12l[?25h[?25l[53;159H~@k[30;24H[53;159H   [31;23H[106m([mx[106m)[m[53;171H3,23[31;23H[?12l[?25h[?25l[53;159H~@k[31;23H[53;159H   [32;16H[31;21H(x)[53;171H4,16[32;16H[?12l[?25h[?25l[53;159H~@k[32;16H[53;159H   [33;4H[53;171H5,4 [33;4H[?12l[?25h[?25l[53;159H~@k[33;4H[53;159H   [34;24H[53;171H6,24[34;24H[?12l[?25h[?25l[53;159H~@k[34;24H[53;159H   [33;4H[53;171H5,4 [33;4H[?12l[?25h[?25l[53;159H~@k[33;4H[53;159H   [32;16H[53;171H4,16[32;16H[?12l[?25h[?25l[53;159H~@k[32;16H[53;159H   [31;23H[106m([mx[106m)[m[53;171H3,23[31;23H[?12l[?25h[?25l[53;159H~@k[31;23H[53;159H   [30;24H[31;21H(x)[53;171H2,24[30;24H[?12l[?25h[?25l[53;159H~@k[30;24H[53;159H   [29;24H[53;171H1[29;24H[?12l[?25h[?25l[53;159H~@k[29;24H[53;159H   [28;24H[28;16H[106m([7C)[m[53;171H0[28;24H[?12l[?25h[?25l[53;159H~@k[28;24H[53;159H   [27;8H[28;16H([7C)[53;169H99,8  [27;8H[?12l[?25h[?25l[53;159H~@k[27;8H[53;159H   [26;24H[53;170H8,24[26;24H[?12l[?25h[?25l[53;159H~@k[26;24H[53;159H   [27;8H[53;170H9,8 [27;8H[?12l[?25h[?25l[53;159H~@k[27;8H[53;159H   [28;24H[28;16H[106m([7C)[m[53;169H100,24[28;24H[?12l[?25h[?25l[53;159H~@k[28;24H[53;159H   [29;24H[28;16H([7C)[53;171H1[29;24H[?12l[?25h[?25l[53;159H~@k[29;24H[53;159H   [30;24H[53;171H2[30;24H[?12l[?25h[?25l[53;159H~@k[30;24H[53;159H   [31;23H[106m([mx[106m)[m[53;171H3,23[31;23H[?12l[?25h[?25l[53;159H~@k[31;23H[53;159H   [30;24H[31;21H(x)[53;171H2,24[30;24H[?12l[?25h[?25l[53;159H~@k[30;24H[53;159H   [29;24H[53;171H1[29;24H[?12l[?25h[?25l[53;159H~@k[29;24H[53;159H   [28;24H[28;16H[106m([7C)[m[53;171H0[28;24H[?12l[?25h[?25l[53;159H~@k[28;24H[53;159H   [27;8H[28;16H([7C)[53;169H99,8  [27;8H[?12l[?25h[?25l[53;159H~@k[27;8H[53;159H   [26;24H[53;170H8,24[26;24H[?12l[?25h[?25l[53;159H~@k[26;24H[53;159H   [25;8H[53;170H7,8 [25;8H[?12l[?25h[?25l[53;159H~@k[25;8H[53;159H   [24;9H[10;39H[106m([24;9H)[m[53;170H6,9[24;9H[?12l[?25h[?25l[53;159H~@k[24;9H[53;159H   [23;24H[10;39H([24;9H)[53;170H5,24[23;24H[?12l[?25h[?25l[53;159H~@k[23;24H[53;159H   [22;22H[53;170H4,22[22;22H[?12l[?25h[?25l[53;159H~@k[22;22H[53;159H   [21;24H[53;170H3,24[21;24H[?12l[?25h[?25l[53;170H2[20;24H[?12l[?25h[?25l[53;159H~@k[20;24H[53;159H   [19;24H[53;170H1[19;24H[?12l[?25h[?25l[53;159H~@k[19;24H[53;159H   [18;24H[53;170H0[18;24H[?12l[?25h[?25l[53;159H~@k[18;24H[53;159H   [17;24H[53;169H89[17;24H[?12l[?25h[?25l[53;159H~@k[17;24H[53;159H   [16;24H[53;170H8[16;24H[?12l[?25h[?25l[53;159H~@k[16;24H[53;159H   [15;24H[53;170H7[15;24H[?12l[?25h[?25l[53;159H~@k[15;24H[53;159H   [14;24H[53;170H6[14;24H[?12l[?25h[?25l[53;159H~@k[14;24H[53;159H   [13;22H[53;170H5,22[13;22H[?12l[?25h[?25l[53;159H~@k[13;22H[53;159H   [12;24H[53;170H4,24[12;24H[?12l[?25h[?25l[53;159H~@k[12;24H[53;159H   [11;24H[53;170H3[11;24H[?12l[?25h[?25l[53;159H~@k[11;24H[53;159H   [10;24H[53;170H2[10;24H[?12l[?25h[?25l[53;159H~@k[10;24H[53;159H   [9;8H[53;170H1,8 [9;8H[?12l[?25h[?25l[53;159H~@k[9;8H[53;159H   [8;24H[53;170H0,24[8;24H[?12l[?25h[?25l[53;159H~@k[8;24H[53;159H   [7;24H[53;169H79[7;24H[?12l[?25h[?25l[53;159H~@k[7;24H[53;159H   [6;4H[53;170H8,4 [6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;5H[38;5;130mdef[m [36mforward[m(self, x):[53;1H[K[53;169H77,24[9C71%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;4H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H76,4[10C70%[6;4H[?12l[?25h[?25l[1;52r[1;1H[L[1;53r[1;13Hself.shrink = nn.Sequential()[53;169H[K[53;169H75,16[9C69%[6;16H[?12l[?25h[?25l[53;159H~@k[6;16H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;9H[38;5;130melse[m:[53;169H[K[53;169H74,8[10C68%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13H)[6;24H[106m([9C)[m[53;169H[K[53;169H73,24[9C67%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[6;16H[106m([7C)[m[7;24H([9C)[53;169H[K[53;169H72,24[9C66%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;4H[1;52r[1;1H[L[1;53r[1;13Hself.shrink = nn.Sequential([7;16H([7C)[53;169H[K[53;169H71,4[10C65%[6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[53;169H[K[53;169H70,24[9C64%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;13H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H69,13[9C63%[6;13H[?12l[?25h[?25l[53;159H~@k[6;13H[53;159H   [6;13H[1;52r[1;1H[L[1;53r[1;9H)[4;40H[106m([6;13H)[m[53;169H[K[53;169H68,13[9C62%[6;13H[?12l[?25h[?25l[53;159H~@k[6;13H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[5;40H([7;13H)[53;169H[K[53;169H67,24[9C61%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.ReLU(),[53;169H[K[53;169H66,24[9C60%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d(out_channels),[53;169H[K[53;169H65,24[9C59%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;13Hnn.Conv2d(in_channels, out_channels, [31m3[m, stride, [31m1[m),[53;169H[K[53;169H64,8[10C58%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;9H[6;52r[6;1H[L[1;53r[1;9Hself.layer1 = nn.Sequential[106m([m[1;37H[K[2;16HConv2d(in_channels, out_channels, [31m3[m, stride, [31m1[m),[3;16HBatchNorm2d(out_channels),[4;16HReLU(),[4;23H[K[5;9H    nn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[6;9H[106m)[m[53;169H[K[53;169H63,9[10C57%[6;9H[?12l[?25h[?25l[53;159H~@k[6;9H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[2;36H([7;9H)[53;169H[K[53;169H62,24[9C56%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;22H[1;52r[1;1H[L[1;53r[1;9H[36msuper[m(ResBlock1, self).__init__()[53;169H[K[53;169H61,22[9C55%[6;22H[?12l[?25h[?25l[53;159H~@k[6;22H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;5H[38;5;130mdef[m [36m__init__[m(self, in_channels, out_channels, stride=[31m1[m):[53;169H[K[53;169H60,24[9C54%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;1H[38;5;130mclass[m [36mResBlock1[m(nn.Module):[53;169H[K[53;169H59,24[9C53%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H58,24[9C52%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H57,8[10C51%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9H[38;5;130mreturn[m x[53;169H[K[53;169H56,24[9C50%[6;24H[?12l[?25h[?25l[1;52r[1;1H[L[1;53r[53;169H[K[53;169H55,24[9C49%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9Hx = self.layer1(x)[53;169H[K[53;169H54,24[9C48%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;4H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H53,4[10C47%[6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;5H[38;5;130mdef[m [36mforward[m(self, x):[53;169H[K[53;169H52,8[10C46%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;16H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H51,16[9C45%[6;16H[?12l[?25h[?25l[53;159H~@k[6;16H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;13Hself.shrink = nn.Sequential()[53;169H[K[53;169H50,8[10C44%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9H[38;5;130melse[m:[6;24H[106m([mx[106m)[m[53;169H[K[53;169H49,24[9C43%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;12H[1;52r[1;1H[L[1;53r[1;13H)[7;24H(x)[53;169H[K[53;169H48,12[9C42%[6;12H[?12l[?25h[?25l[53;159H~@k[6;12H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[6;16H[106m([7C)[m[53;169H[K[53;169H47,24[9C41%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;4H[1;52r[1;1H[L[1;53r[1;13Hself.shrink = nn.Sequential([7;16H([7C)[53;169H[K[53;169H46,4[10C40%[6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[53;169H[K[53;169H45,24[9C39%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;13H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H44,13[9C38%[6;13H[?12l[?25h[?25l[53;159H~@k[6;13H[53;159H   [6;13H[1;52r[1;1H[L[1;53r[1;9H)[4;40H[106m([6;13H)[m[53;169H[K[53;169H43,13[9C37%[6;13H[?12l[?25h[?25l[53;159H~@k[6;13H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[5;40H([7;13H)[53;169H[K[53;169H42,24[9C36%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.ReLU(),[53;169H[K[53;169H41,24[9C35%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d(out_channels),[53;169H[K[53;169H40,24[9C34%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;13Hnn.Conv2d(in_channels, out_channels, [31m3[m, stride, [31m1[m),[53;169H[K[53;169H39,8[10C33%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;9H[1;52r[1;1H[L[1;53r[1;13Hnn.ReLU(),[53;169H[K[53;169H38,9[10C32%[6;9H[?12l[?25h[?25l[53;159H~@k[6;9H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d(in_channels),[53;169H[K[53;169H37,24[9C31%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;22H[1;52r[1;1H[L[1;53r[1;9Hself.layer1 = nn.Sequential([53;169H[K[53;169H36,22[9C30%[6;22H[?12l[?25h[?25l[53;159H~@k[6;22H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H35,24[9C29%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9H[36msuper[m(ResBlock, self).__init__()[53;169H[K[53;169H34,24[9C28%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;22H[1;52r[1;1H[L[1;53r[1;5H[38;5;130mdef[m [36m__init__[m(self, in_channels, out_channels, stride=[31m1[m):[53;169H[K[53;169H33,22[9C27%[6;22H[?12l[?25h[?25l[53;159H~@k[6;22H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;1H[38;5;130mclass[m [36mResBlock[m(nn.Module):[53;169H[K[53;169H32,24[9C26%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H31,24[9C25%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;1H[34m# learning_rate = 0.0001 #61%[m[53;169H[K[53;169H30,8[10C24%[6;8H[?12l[?25h[?25l[1;52r[1;1H[L[1;53r[1;1Hlearning_rate = [31m0.0005[m [34m#68%[m[53;169H[K[53;169H29,24[9C23%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;1Hnum_classes = [31m10[m[53;169H[K[53;169H28,24[9C22%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;1Hbatch_size = [31m50[m[53;169H[K[53;169H27,24[9C21%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;1H[1;52r[1;1H[L[1;53r[1;1Hnum_epochs = [31m200[m[53;169H[K[53;169H26,0-1[8C20%[6;1H[?12l[?25h[?25l[53;159H~@k[6;1H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H25,24[9C19%[6;24H[?12l[?25h[?25l[1;52r[1;1H[L[1;53r[1;1Htest_set = torchvision.datasets.MNIST([31m'../data/'[m, train=[36mFalse[m, transform=transform)[53;169H[K[53;169H24,24[9C18%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;16H[1;52r[1;1H[L[1;53r[1;1Htrain_set = torchvision.datasets.MNIST([31m'../data/'[m, train=[36mTrue[m, transform=transform, download=[36mTrue[m)[53;169H[K[53;169H23,16[9C17%[6;16H[?12l[?25h[?25l[53;159H~@k[6;16H[53;159H   [6;15H[1;52r[1;1H[L[1;53r[1;1H[34m# test_set = torchvision.datasets.CIFAR10('../data/', train=False, transform=transform)[m[53;169H[K[53;169H22,15[9C16%[6;15H[?12l[?25h[?25l[53;159H~@k[6;15H[53;159H   [6;16H[1;52r[1;1H[L[1;53r[1;1H[34m# train_set = torchvision.datasets.CIFAR10('../data/', train=True, transform=transform, download=True)[m[53;169H[K[53;169H21,16[9C15%[6;16H[?12l[?25h[?25l[53;159H~@k[6;16H[53;159H   [6;1H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H20,0-1[8C14%[6;1H[?12l[?25h[?25l[53;159H~@k[6;1H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;5Htorchvision.transforms.ToTensor()])[53;169H[K[53;169H19,24[9C13%[6;24H[?12l[?25h[?25l[1;52r[1;1H[L[1;53r[1;5Htorchvision.transforms.RandomCrop([31m32[m),[53;169H[K[53;169H18,24[9C12%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;5Htorchvision.transforms.RandomHorizontalFlip(),[53;169H[K[53;169H17,24[9C11%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;5Htorchvision.transforms.Pad([31m4[m),[53;169H[K[53;169H16,24[9C10%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;1H[1;52r[1;1H[L[1;53r[1;1Htransform = torchvision.transforms.Compose([[53;169H[K[53;169H15,0-1[9C9%[6;1H[?12l[?25h[?25l[53;159H~@k[6;1H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;1H[34m# Image preprocessing modules[m[53;169H[K[53;169H14,24[10C8%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H13,24[10C7%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;1H[36mprint[m(device)[53;169H[K[53;169H12,24[10C6%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;1Hdevice = torch.device([31m'cuda:0'[m [38;5;130mif[m torch.cuda.is_available() [38;5;130melse[m [31m'cpu'[m)[53;169H[K[53;169H11,24[10C5%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H10,24[10C4%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;1H[35mimport[m torchvision[53;169H[K[53;169H9,24[11C3%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;1H[1;52r[1;1H[L[1;53r[1;1H[35mimport[m torch.nn.functional [38;5;130mas[m F[53;169H[K[53;169H8,0-1[10C2%[6;1H[?12l[?25h[?25l[53;159H~@k[6;1H[53;159H   [6;13H[1;52r[1;1H[L[1;53r[1;1H[35mimport[m torch.nn [38;5;130mas[m nn[6;6H[106m([mdevice[106m)[m[53;169H[K[53;169H7,13[11C1%[6;13H[?12l[?25h[?25l[53;159H~@k[6;13H[53;159H   [7;1H[6;6H(device)[53;169H8,0-1[7;1H[?12l[?25h[?25l[53;159H~@k[7;1H[53;159H   [8;24H[53;169H9,24 [8;24H[?12l[?25h[?25l[53;159H~@k[8;24H[53;159H   [9;24H[53;169H10,24[9;24H[?12l[?25h[?25l[53;159H~@k[9;24H[53;159H   [10;24H[53;170H1[10;24H[?12l[?25h[?25l[53;159H~@k[10;24H[53;159H   [11;24H[53;170H2[11;24H[?12l[?25h[?25l[53;159H~@k[11;24H[53;159H   [12;24H[53;170H3[12;24H[?12l[?25h[?25l[53;159H~@k[12;24H[53;159H   [13;24H[53;170H4[13;24H[?12l[?25h[?25l[53;159H~@k[13;24H[53;159H   [14;1H[53;170H5,0-1[14;1H[?12l[?25h[?25l[53;159H~@k[14;1H[53;159H   [15;24H[53;170H6,24 [15;24H[?12l[?25h[?25l[53;159H~@k[15;24H[53;159H   [16;24H[53;170H7[16;24H[?12l[?25h[?25l[53;159H~@k[16;24H[53;159H   [17;24H[53;170H8[17;24H[?12l[?25h[?25l[53;159H~@k[17;24H[53;159H   [18;24H[53;170H9[18;24H[?12l[?25h[?25l[53;159H~@k[18;24H[53;159H   [19;1H[53;169H20,0-1[19;1H[?12l[?25h[?25l[53;159H~@k[19;1H[53;159H   [20;16H[53;170H1,16 [20;16H[?12l[?25h[?25l[53;159H~@k[20;16H[53;159H   [21;15H[53;170H2,15[21;15H[?12l[?25h[?25l[53;159H~@k[21;15H[53;159H   [22;16H[53;170H3,16[22;16H[?12l[?25h[?25l[53;159H~@k[22;16H[53;159H   [23;24H[53;170H4,24[23;24H[?12l[?25h[?25l[53;159H~@k[23;24H[53;159H   [24;24H[53;170H5[24;24H[?12l[?25h[?25l[53;159H~@k[24;24H[53;159H   [25;1H[53;170H6,0-1[25;1H[?12l[?25h[?25l[53;159H~@k[25;1H[53;159H   [26;24H[53;170H7,24 [26;24H[?12l[?25h[?25l[53;159H~@k[26;24H[53;159H   [27;24H[53;170H8[27;24H[?12l[?25h[?25l[53;159H~@k[27;24H[53;159H   [28;24H[53;170H9[28;24H[?12l[?25h[?25l[53;159H~@k[28;24H[53;159H   [29;8H[53;169H30,8 [29;8H[?12l[?25h[?25l[53;159H~@k[29;8H[53;159H   [30;24H[53;170H1,24[30;24H[?12l[?25h[?25l[53;159H~@k[30;24H[53;159H   [31;24H[53;170H2[31;24H[?12l[?25h[?25l[53;159H~@k[31;24H[53;159H   [32;22H[53;170H3,22[32;22H[?12l[?25h[?25l[53;159H~@k[32;22H[53;159H   [33;24H[53;170H4,24[33;24H[?12l[?25h[?25l[53;159H~@k[33;24H[53;159H   [34;24H[53;170H5[34;24H[?12l[?25h[?25l[53;159H~@k[34;24H[53;159H   [35;22H[53;170H6,22[35;22H[?12l[?25h[?25l[53;159H~@k[35;22H[53;159H   [36;24H[53;170H7,24[36;24H[?12l[?25h[?25l[53;159H~@k[36;24H[53;159H   [37;9H[30;36H[106m([37;9H)[m[53;170H8,9 [37;9H[?12l[?25h[?25l[30;36H([37;9H)[53;170H9,8[38;8H[?12l[?25h[?25l[53;169H40,24[39;24H[?12l[?25h[?25l[53;159H~@k[39;24H[53;159H   [40;24H[53;170H1[40;24H[?12l[?25h[?25l[53;159H~@k[40;24H[53;159H   [41;24H[53;170H2[41;24H[?12l[?25h[?25l[53;159H~@k[41;24H[53;159H   [42;13H[40;40H[106m([42;13H)[m[53;170H3,13[42;13H[?12l[?25h[?25l[53;159H~@k[42;13H[53;159H   [43;13H[40;40H([42;13H)[53;170H4[43;13H[?12l[?25h[?25l[53;159H~@k[43;13H[53;159H   [44;24H[53;170H5,24[44;24H[?12l[?25h[?25l[53;159H~@k[44;24H[53;159H   [45;4H[53;170H6,4 [45;4H[?12l[?25h[?25l[53;159H~@k[45;4H[53;159H   [46;24H[46;16H[106m([7C)[m[53;170H7,24[46;24H[?12l[?25h[?25l[53;159H~@k[46;24H[53;159H   [47;12H[46;16H([7C)[53;170H8,12[47;12H[?12l[?25h[?25l[53;159H~@k[47;12H[53;159H   [47;24H[1;52r[52;1H
[1;53r[47;24H[106m([mx[106m)[m[52;1H[38;5;130mclass[m [36mResBlock1[m(nn.Module):[53;169H[K[53;169H49,24[10C2%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;8H[1;52r[52;1H
[1;53r[46;24H(x)[52;5H[38;5;130mdef[m [36m__init__[m(self, in_channels, out_channels, stride=[31m1[m):[53;169H[K[53;169H50,8[11C3%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;16H[1;52r[52;1H
[1;53r[52;9H[36msuper[m(ResBlock1, self).__init__()[53;169H[K[53;169H51,16[10C4%[47;16H[?12l[?25h[?25l[53;159H~@k[47;16H[53;159H   [47;8H[1;52r[52;1H
[1;53r[53;169H[K[53;169H52,8[11C5%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;4H[1;52r[52;1H
[1;53r[52;9Hself.layer1 = nn.Sequential([53;169H[K[53;169H53,4[11C6%[47;4H[?12l[?25h[?25l[53;159H~@k[47;4H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13Hnn.Conv2d(in_channels, out_channels, [31m3[m, stride, [31m1[m),[53;169H[K[53;169H54,24[10C7%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13Hnn.BatchNorm2d(out_channels),[53;169H[K[53;169H55,24[10C8%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13Hnn.ReLU(),[53;169H[K[53;169H56,24[10C9%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;8H[1;52r[52;1H
[1;53r[52;13Hnn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[53;169H[K[53;169H57,8[10C10%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9H)[53;169H[K[53;169H58,24[9C11%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[53;169H[K[53;169H59,24[9C12%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[53;169H[K[53;169H60,24[9C13%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;22H[1;52r[52;1H
[1;53r[52;13Hself.shrink = nn.Sequential([53;169H[K[53;169H61,22[9C14%[47;22H[?12l[?25h[?25l[53;159H~@k[47;22H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[53;169H[K[53;169H62,24[9C15%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;9H[1;52r[52;1H
[1;53r[42;36H[106m([47;9H)[m[52;13H)[53;169H[K[53;169H63,9[10C16%[47;9H[?12l[?25h[?25l[53;159H~@k[47;9H[53;159H   [47;8H[1;52r[52;1H
[1;53r[41;36H([46;9H)[52;9H[38;5;130melse[m:[53;169H[K[53;169H64,8[10C17%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13Hself.shrink = nn.Sequential()[53;169H[K[53;169H65,24[9C18%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[53;169H[K[53;169H66,24[9C19%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;5H[38;5;130mdef[m [36mforward[m(self, x):[53;169H[K[53;169H67,24[9C20%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;13H[1;52r[52;1H
[1;53r[45;40H[106m([47;13H)[m[52;9Hx = self.layer1(F.relu(x))[53;169H[K[53;169H68,13[9C21%[47;13H[?12l[?25h[?25l[53;159H~@k[47;13H[53;159H   [47;13H[1;52r[52;1H
[1;53r[44;40H([46;13H)[53;169H[K[53;169H69,13[9C22%[47;13H[?12l[?25h[?25l[53;159H~@k[47;13H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9H[38;5;130mreturn[m x[53;169H[K[53;169H70,24[9C23%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;4H[1;52r[52;1H
[1;53r[53;169H[K[53;169H71,4[10C24%[47;4H[?12l[?25h[?25l[53;159H~@k[47;4H[53;159H   [47;24H[1;52r[52;1H
[1;53r[47;16H[106m([7C)[m[52;1H[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[53;169H[K[53;169H72,24[9C25%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[46;16H([7C)[47;24H[106m([9C)[m[53;169H[K[53;169H73,24[9C26%[47;24H[?12l[?25h[?25l[1;52r[52;1H
[1;53r[46;24H([9C)[52;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[53;169H[K[53;169H74,8[10C27%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;16H[1;52r[52;1H
[1;53r[52;9H[36msuper[m(CIFARNET, self).__init__()[53;169H[K[53;169H75,16[9C28%[47;16H[?12l[?25h[?25l[53;159H~@k[47;16H[53;159H   [47;4H[1;52r[52;1H
[1;53r[53;169H[K[53;169H76,4[10C29%[47;4H[?12l[?25h[?25l[53;159H~@k[47;4H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Hself.reslayer1 = nn.Sequential([53;169H[K[53;169H77,24[9C30%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;4H[1;52r[52;1H
[1;53r[52;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[53;169H[K[53;169H78,4[10C31%[47;4H[?12l[?25h[?25l[53;159H~@k[47;4H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13Hnn.BatchNorm2d([31m16[m),[53;169H[K[53;169H79,24[9C32%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13Hnn.ReLU(),[53;169H[K[53;169H80,24[9C33%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;8H[1;52r[52;1H
[1;53r[52;13HResBlock1([31m16[m, [31m32[m),[53;169H[K[53;169H81,8[10C34%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13HResBlock([31m32[m, [31m32[m),[53;169H[K[53;169H82,24[9C35%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13Hnn.BatchNorm2d([31m32[m),[53;169H[K[53;169H83,24[9C36%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13HResBlock1([31m32[m, [31m64[m),[53;169H[K[53;169H84,24[9C37%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;22H[1;52r[52;1H
[1;53r[52;13HResBlock([31m64[m, [31m64[m),[53;169H[K[53;169H85,22[9C38%[47;22H[?12l[?25h[?25l[53;159H~@k[47;22H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13HResBlock1([31m64[m, [31m128[m),[53;169H[K[53;169H86,24[9C39%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13HResBlock([31m128[m, [31m128[m),[53;169H[K[53;169H87,24[9C40%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13Hnn.BatchNorm2d([31m128[m),[53;169H[K[53;169H88,24[9C41%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13Hnn.ReLU(),[53;169H[K[53;169H89,24[9C42%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;13Hnn.AvgPool2d([31m8[m,[31m1[m,[31m1[m)[53;169H[K[53;169H90,24[9C43%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9H)[53;169H[K[53;169H91,24[9C44%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[53;169H[K[53;169H92,24[9C45%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Hself.fc1 = nn.Linear([31m23[m*[31m23[m*[31m128[m, num_classes)[53;169H[K[53;169H93,24[9C46%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;22H[1;52r[52;1H
[1;53r[53;169H[K[53;169H94,22[9C47%[47;22H[?12l[?25h[?25l[53;159H~@k[47;22H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;5H[38;5;130mdef[m [36mforward[m(self, x):[53;169H[K[53;169H95,24[9C48%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;9H[1;52r[52;1H
[1;53r[33;39H[106m([47;9H)[m[52;9Hx = self.reslayer1(x)[53;169H[K[53;169H96,9[10C49%[47;9H[?12l[?25h[?25l[53;159H~@k[47;9H[53;159H   [47;8H[1;52r[52;1H
[1;53r[32;39H([46;9H)[52;9Hx = x.reshape(x.size([31m0[m), -[31m1[m)[53;169H[K[53;169H97,8[10C50%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Hx = self.fc1(x)[53;169H[K[53;169H98,24[9C51%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;8H[1;52r[52;1H
[1;53r[52;9H[38;5;130mreturn[m x[53;169H[K[53;169H99,8[10C52%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;24H[1;52r[52;1H
[1;53r[47;16H[106m([7C)[m[53;169H[K[53;169H100,24[8C53%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[46;16H([7C)[52;1Hmodel = CIFARNET(num_classes).to(device)[53;169H[K[53;169H101,24[8C54%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[53;169H[K[53;169H102,24[8C55%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;23H[1;52r[52;1H
[1;53r[47;21H[106m([mx[106m)[m[52;1Htrain_loader = torch.utils.data.DataLoader(dataset=train_set, batch_size=batch_size, shuffle=[36mTrue[m)[53;169H[K[53;169H103,23[8C56%[47;23H[?12l[?25h[?25l[53;159H~@k[47;23H[53;159H   [47;16H[1;52r[52;1H
[1;53r[46;21H(x)[52;1Htest_loader = torch.utils.data.DataLoader(dataset=test_set, batch_size=batch_size, shuffle=[36mFalse[m)[53;169H[K[53;169H104,16[8C57%[47;16H[?12l[?25h[?25l[1;52r[52;1H
[1;53r[53;169H[K[53;169H105,4[9C58%[47;4H[?12l[?25h[?25l[53;159H~@k[47;4H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;1Hcriterion = nn.CrossEntropyLoss()[53;169H[K[53;169H106,24[8C59%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;1H[1;52r[52;1H
[1;53r[52;1Hoptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)[53;169H[K[53;169H107,0-1[7C60%[47;1H[?12l[?25h[?25l[53;159H~@k[47;1H[53;159H   [47;24H[1;52r[52;1H
[1;53r[53;169H[K[53;169H108,24[8C61%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;1Htotal_step = [36mlen[m(train_loader)[53;169H[K[53;169H109,24[8C62%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;1H[1;52r[52;1H
[1;53r[53;169H[K[53;169H110,0-1[7C63%[47;1H[?12l[?25h[?25l[53;159H~@k[47;1H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;1Hmodel.train()[53;169H[K[53;169H111,24[8C64%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;1H[38;5;130mfor[m epoch [38;5;130min[m [36mrange[m(num_epochs):[53;169H[K[53;169H112,24[8C65%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;1H[1;52r[52;1H
[1;53r[52;5H[38;5;130mfor[m i, (images, labels) [38;5;130min[m [36menumerate[m(train_loader):[53;169H[K[53;169H113,0-1[7C66%[47;1H[?12l[?25h[?25l[53;159H~@k[47;1H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Himages = images.to(device)[53;169H[K[53;169H114,24[8C67%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;1H[1;52r[52;1H
[1;53r[52;9Hlabels = labels.to(device)[53;169H[K[53;169H115,0-1[7C68%[47;1H[?12l[?25h[?25l[53;159H~@k[47;1H[53;159H   [47;13H[1;52r[52;1H
[1;53r[47;12H[106m()[m[53;169H[K[53;169H116,13[8C69%[47;13H[?12l[?25h[?25l[53;159H~@k[47;13H[53;159H   [47;24H[1;52r[52;1H
[1;53r[46;12H()[52;9H[34m# Forward[m[53;169H[K[53;169H117,24[8C70%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Houtput = model(images)[53;169H[K[53;169H118,24[8C71%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Hloss = criterion(output, labels)[53;169H[K[53;169H119,24[8C72%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[53;169H[K[53;169H120,24[8C73%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;8H[1;52r[52;1H
[1;53r[52;9H[34m# Backprop and Gradient Descent[m[53;169H[K[53;169H121,8[9C74%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;17H[1;52r[52;1H
[1;53r[52;9Hoptimizer.zero_grad()[53;169H[K[53;169H122,17[8C75%[47;17H[?12l[?25h[?25l[53;159H~@k[47;17H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Hloss.backward()[53;169H[K[53;169H123,24[8C76%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Hoptimizer.step()[53;169H[K[53;169H124,24[8C77%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;8H[1;52r[52;1H
[1;53r[53;169H[K[53;169H125,8[9C78%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9H[34m# Print out current progress of training[m[53;169H[K[53;169H126,24[8C79%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9H[38;5;130mif[m (i+[31m1[m) % [31m100[m == [31m0[m:[53;169H[K[53;169H127,24[8C80%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;23H[1;52r[52;1H
[1;53r[47;22H[106m()[m[52;13H[36mprint[m([31m'Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'[m.format(epoch+[31m1[m, num_epochs, i+[31m1[m, total_step, loss.item()))[53;169H[K[53;169H128,23[8C81%[47;23H[?12l[?25h[?25l[1;52r[52;1H
[1;53r[46;22H()[47;23H[106m()[m[53;169H[K[53;169H129,24[8C82%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;8H[1;52r[52;1H
[1;53r[46;23H()[52;1H[34m# Test the model[m[53;169H[K[53;169H130,8[9C83%[47;8H[?12l[?25h[?25l[53;159H~@k[47;8H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;1Hmodel.eval()  [34m# eval mode [m[53;169H[K[53;169H131,24[8C84%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;1H[38;5;130mwith[m torch.no_grad():[53;169H[K[53;169H132,24[8C85%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;5Hcorrect = [31m0[m[53;169H[K[53;169H133,24[8C86%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;1H[1;52r[52;1H
[1;53r[52;5Htotal = [31m0[m[53;169H[K[53;169H134,0-1[7C87%[47;1H[?12l[?25h[?25l[53;159H~@k[47;1H[53;159H   [47;16H[1;52r[52;1H
[1;53r[52;5H[38;5;130mfor[m images, labels [38;5;130min[m test_loader:[53;169H[K[53;169H135,16[8C88%[47;16H[?12l[?25h[?25l[53;159H~@k[47;16H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Himages = images.to(device)[53;169H[K[53;169H136,24[8C89%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;21H[1;52r[52;1H
[1;53r[52;9Hlabels = labels.to(device)[53;169H[K[53;169H137,21[8C90%[47;21H[?12l[?25h[?25l[53;159H~@k[47;21H[53;159H   [47;15H[1;52r[52;1H
[1;53r[52;9Houtputs = model(images)[53;169H[K[53;169H138,15[8C91%[47;15H[?12l[?25h[?25l[53;159H~@k[47;15H[53;159H   [47;13H[1;52r[52;1H
[1;53r[52;9H_, predicted = torch.max(outputs.data, [31m1[m)[53;169H[K[53;169H139,13[8C92%[47;13H[?12l[?25h[?25l[53;159H~@k[47;13H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Htotal += labels.size([31m0[m)[53;169H[K[53;169H140,24[8C93%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;9Hcorrect += (predicted == labels).sum().item()[53;169H[K[53;169H141,24[8C94%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[53;169H[K[53;169H142,24[8C95%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[47;24H[106m([mimages[106m)[m[52;5H[36mprint[m([31m'Test Accuracy of the model on the 10000 test images: {} %'[m.format([31m100[m * correct / total))[53;169H[K[53;169H143,24[8C96%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[46;24H(images)[53;169H[K[53;169H144,24[8C97%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;1Htorch.save(model.state_dict(), [31m'./net3-MNIST2903.pt'[m)[53;169H[K[53;169H145,24[8C98%[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [47;24H[1;52r[52;1H
[1;53r[52;1Hmodel.load_state_dict(torch.load([31m'./net3-MNIST2903.pt'[m))[53;169H[K[53;169H146,24[8CBot[47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [48;1H[53;171H7,0-1[48;1H[?12l[?25h[?25l[53;159H~@k[48;1H[53;159H   [49;24H[53;171H8,24 [49;24H[?12l[?25h[?25l[53;159H~@k[49;24H[53;159H   [48;1H[53;171H7,0-1[48;1H[?12l[?25h[?25l[53;159H~@k[48;1H[53;159H   [47;24H[53;171H6,24 [47;24H[?12l[?25h[?25l[53;159H~@k[47;24H[53;159H   [46;24H[53;171H5[46;24H[?12l[?25h[?25l[53;159H~@k[46;24H[53;159H   [45;24H[53;171H4[45;24H[?12l[?25h[?25l[53;159H~@k[45;24H[53;159H   [44;24H[106m([mimages[106m)[m[53;171H3[44;24H[?12l[?25h[?25l[53;159H~@k[44;24H[53;159H   [43;24H[44;24H(images)[53;171H2[43;24H[?12l[?25h[?25l[53;159H~@k[43;24H[53;159H   [42;24H[53;171H1[42;24H[?12l[?25h[?25l[53;159H~@k[42;24H[53;159H   [41;24H[53;171H0[41;24H[?12l[?25h[?25l[53;159H~@k[41;24H[53;159H   [40;13H[53;170H39,13[40;13H[?12l[?25h[?25l[53;159H~@k[40;13H[53;159H   [39;15H[53;171H8,15[39;15H[?12l[?25h[?25l[53;159H~@k[39;15H[53;159H   [38;21H[53;171H7,21[38;21H[?12l[?25h[?25l[53;159H~@k[38;21H[53;159H   [37;24H[53;171H6,24[37;24H[?12l[?25h[?25l[53;159H~@k[37;24H[53;159H   [36;16H[53;171H5,16[36;16H[?12l[?25h[?25l[53;159H~@k[36;16H[53;159H   [35;1H[53;171H4,0-1[35;1H[?12l[?25h[?25l[53;159H~@k[35;1H[53;159H   [34;24H[53;171H3,24 [34;24H[?12l[?25h[?25l[53;159H~@k[34;24H[53;159H   [33;24H[53;171H2[33;24H[?12l[?25h[?25l[53;159H~@k[33;24H[53;159H   [32;24H[53;171H1[32;24H[?12l[?25h[?25l[53;159H~@k[32;24H[53;159H   [31;8H[53;171H0,8 [31;8H[?12l[?25h[?25l[53;159H~@k[31;8H[53;159H   [30;24H[106m()[m[53;170H29,24[30;24H[?12l[?25h[?25l[53;159H~@k[30;24H[53;159H   [29;23H[106m()[m[30;23H()[53;171H8,23[29;23H[?12l[?25h[?25l[53;159H~@k[29;23H[53;159H   [28;24H[29;22H()[53;171H7,24[28;24H[?12l[?25h[?25l[53;159H~@k[28;24H[53;159H   [27;24H[53;171H6[27;24H[?12l[?25h[?25l[53;159H~@k[27;24H[53;159H   [26;8H[53;171H5,8 [26;8H[?12l[?25h[?25l[53;159H~@k[26;8H[53;159H   [25;24H[53;171H4,24[25;24H[?12l[?25h[?25l[53;159H~@k[25;24H[53;159H   [24;24H[53;171H3[24;24H[?12l[?25h[?25l[53;159H~@k[24;24H[53;159H   [23;17H[53;171H2,17[23;17H[?12l[?25h[?25l[53;159H~@k[23;17H[53;159H   [22;8H[53;171H1,8 [22;8H[?12l[?25h[?25l[53;159H~@k[22;8H[53;159H   [21;24H[53;171H0,24[21;24H[?12l[?25h[?25l[53;159H~@k[21;24H[53;159H   [20;24H[53;170H19[20;24H[?12l[?25h[?25l[53;159H~@k[20;24H[53;159H   [19;24H[53;171H8[19;24H[?12l[?25h[?25l[53;159H~@k[19;24H[53;159H   [18;24H[53;171H7[18;24H[?12l[?25h[?25l[53;159H~@k[18;24H[53;159H   [17;13H[106m()[m[53;171H6,13[17;13H[?12l[?25h[?25l[53;159H~@k[17;13H[53;159H   [16;1H[17;12H()[53;171H5,0-1[16;1H[?12l[?25h[?25l[53;159H~@k[16;1H[53;159H   [15;24H[53;171H4,24 [15;24H[?12l[?25h[?25l[53;159H~@k[15;24H[53;159H   [14;1H[53;171H3,0-1[14;1H[?12l[?25h[?25l[53;159H~@k[14;1H[53;159H   [13;24H[53;171H2,24 [13;24H[?12l[?25h[?25l[53;159H~@k[13;24H[53;159H   [12;24H[53;171H1[12;24H[?12l[?25h[?25l[53;159H~@k[12;24H[53;159H   [11;1H[53;171H0,0-1[11;1H[?12l[?25h[?25l[53;159H~@k[11;1H[53;159H   [10;24H[53;170H09,24 [10;24H[?12l[?25h[?25l[53;159H~@k[10;24H[53;159H   [9;24H[53;171H8[9;24H[?12l[?25h[?25l[53;159H~@k[9;24H[53;159H   [8;1H[53;171H7,0-1[8;1H[?12l[?25h[?25l[53;159H~@k[8;1H[53;159H   [7;24H[53;171H6,24 [7;24H[?12l[?25h[?25l[53;159H~@k[7;24H[53;159H   [6;4H[53;171H5,4 [6;4H[?12l[?25h[?25l[53;159H~@k[6;4H[53;159H   [6;16H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H104,16[8C98%[6;16H[?12l[?25h[?25l[53;159H~@k[6;16H[53;159H   [6;23H[1;52r[1;1H[L[1;53r[1;9Hself.fc1 = nn.Linear([31m23[m*[31m23[m*[31m128[m, num_classes)[6;21H[106m([mx[106m)[m[53;169H[K[53;169H103,23[8C97%[6;23H[?12l[?25h[?25l[53;159H~@k[6;23H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[7;21H(x)[53;169H[K[53;169H102,24[8C96%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9H)[53;169H[K[53;169H101,24[8C95%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.AvgPool2d([31m8[m,[31m1[m,[31m1[m)[6;16H[106m([7C)[m[53;169H[K[53;169H100,24[8C94%[6;24H[?12l[?25h[?25l[1;52r[1;1H[L[1;53r[1;13Hnn.ReLU(),[7;16H([7C)[53;169H[K[53;169H99,8[10C93%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d([31m128[m),[53;169H[K[53;169H98,24[9C92%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[1;13HResBlock([31m128[m, [31m128[m),[53;169H[K[53;169H97,8[10C91%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;9H[1;52r[1;1H[L[1;53r[1;13HResBlock1([31m64[m, [31m128[m),[53;169H[K[53;169H96,9[10C90%[6;9H[?12l[?25h[?25l[53;159H~@k[6;9H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13HResBlock([31m64[m, [31m64[m),[53;169H[K[53;169H95,24[9C89%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;22H[1;52r[1;1H[L[1;53r[1;13HResBlock1([31m32[m, [31m64[m),[53;169H[K[53;169H94,22[9C88%[6;22H[?12l[?25h[?25l[53;159H~@k[6;22H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d([31m32[m),[53;169H[K[53;169H93,24[9C87%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13HResBlock([31m32[m, [31m32[m),[53;169H[K[53;169H92,24[9C86%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13HResBlock1([31m16[m, [31m32[m),[53;169H[K[53;169H91,24[9C85%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.ReLU(),[53;169H[K[53;169H90,24[9C84%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.BatchNorm2d([31m16[m),[53;169H[K[53;169H89,24[9C83%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[53;169H[K[53;169H88,24[9C82%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9Hself.reslayer1 = nn.Sequential([53;169H[K[53;169H87,24[9C81%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H86,24[9C80%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;22H[1;52r[1;1H[L[1;53r[1;9H[36msuper[m(CIFARNET, self).__init__()[53;169H[K[53;169H85,22[9C79%[6;22H[?12l[?25h[?25l[1;52r[1;1H[L[1;53r[1;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[53;169H[K[53;169H84,24[9C78%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H83,24[9C77%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;1H[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[53;169H[K[53;169H82,24[9C76%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;8H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H81,8[10C75%[6;8H[?12l[?25h[?25l[53;159H~@k[6;8H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[1;9H[38;5;130mreturn[m x[53;169H[K[53;169H80,24[9C74%[6;24H[?12l[?25h[?25l[53;159H~@k[6;24H[53;159H   [6;24H[1;52r[1;1H[L[1;53r[53;169H[K[53;169H79,24[9C73%[6;24H[?12l[?25h[?25l[53;159H:[6;24H[53;159H[K[53;1H:[?12l[?25hq[?25l[?12l[?25h[?25l[?1002l[53;1H[K[53;1H[?1l>[?12l[?25h[?1049l]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ vim NET-3_MNIST.py [4@python3[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[4Pvim[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?1000h[?1049h[?1h=[2;1Hâ–½[6n[2;1H  [1;1H]11;?[1;53r[?12;25h[?12l[?25h[27m[23m[m[H[2J[?25l[53;1H"NET-3_MNIST.py" 151L, 4776C[>c[1;1H[38;5;130mclass[m [36mResBlock1[m(nn.Module):
    [38;5;130mdef[m [36m__init__[m(self, in_channels, out_channels, stride=[31m1[m):[3;9H[36msuper[m(ResBlock1, self).__init__()[5;9Hself.layer1 = nn.Sequential([6;13Hnn.Conv2d(in_channels, out_channels, [31m3[m, stride, [31m1[m),[7;13Hnn.BatchNorm2d(out_channels),[8;13Hnn.ReLU(),[9;13Hnn.Conv2d(out_channels, out_channels, [31m3[m, stride, [31m1[m),[10;9H)[12;9H[38;5;130mif[m stride != [31m1[m [38;5;130mor[m in_channels != out_channels:[13;13Hself.shrink = nn.Sequential([14;17Hnn.Conv2d(in_channels, out_channels, [31m1[m, stride)[15;13H)[16;9H[38;5;130melse[m:[17;13Hself.shrink = nn.Sequential()[19;5H[38;5;130mdef[m [36mforward[m(self, x):[20;9Hx = self.layer1(F.relu(x))[22;9H[38;5;130mreturn[m x

[38;5;130mclass[m [36mCIFARNET[m(nn.Module):[26;5H[38;5;130mdef[m [36m__init__[m(self, num_classes=[31m10[m):[27;9H[36msuper[m(CIFARNET, self).__init__()[29;9Hself.reslayer1 = nn.Sequential([30;13Hnn.Conv2d([31m1[m, [31m16[m, [31m3[m, [31m1[m, [31m1[m), [34m# 32 output[m[31;13Hnn.BatchNorm2d([31m16[m),[32;13Hnn.ReLU(),[33;13HResBlock1([31m16[m, [31m32[m),[34;13HResBlock([31m32[m, [31m32[m),[35;13Hnn.BatchNorm2d([31m32[m),[36;13HResBlock1([31m32[m, [31m64[m),[37;13HResBlock([31m64[m, [31m64[m),[38;13HResBlock1([31m64[m, [31m128[m),[39;13HResBlock([31m128[m, [31m128[m),[40;13Hnn.BatchNorm2d([31m128[m),[41;13Hnn.ReLU(),[42;13Hnn.AvgPool2d([31m8[m,[31m1[m,[31m1[m)[43;9H)[45;9Hself.fc1 = nn.Linear([31m23[m*[31m23[m*[31m128[m, num_classes)[47;5H[38;5;130mdef[m [36mforward[m(self, x):[48;9Hx = self.reslayer1(x)[49;9Hx = x.reshape(x.size([31m0[m), -[31m1[m)[50;9Hx = self.fc1(x)[51;9H[38;5;130mreturn[m x[53;169H79,24[9C53%[26;24H[?12l[?25h[?1000l[?1002hP+q436f\P+q6b75\P+q6b64\P+q6b72\P+q6b6c\P+q2332\P+q2334\P+q2569\P+q2a37\P+q6b31\[?25l[53;159H~@k[26;24H[53;159H   [27;24H[53;169H80[27;24H[?12l[?25h[?25l[53;159H~@k[27;24H[53;159H   [28;8H[53;170H1,8 [28;8H[?12l[?25h[?25l[53;159H~@k[28;8H[53;159H   [29;24H[53;170H2,24[29;24H[?12l[?25h[?25l[53;159H~@k[29;24H[53;159H   [30;24H[53;170H3[30;24H[?12l[?25h[?25l[53;159H~@k[30;24H[53;159H   [31;24H[53;170H4[31;24H[?12l[?25h[?25l[53;159H~@k[31;24H[53;159H   [32;22H[53;170H5,22[32;22H[?12l[?25h[?25l[53;159H~@k[32;22H[53;159H   [33;24H[53;170H6,24[33;24H[?12l[?25h[?25l[53;159H~@k[33;24H[53;159H   [34;24H[53;170H7[34;24H[?12l[?25h[?25l[53;159H~@k[34;24H[53;159H   [35;24H[53;170H8[35;24H[?12l[?25h[?25l[53;159H~@k[35;24H[53;159H   [36;24H[53;170H9[36;24H[?12l[?25h[?25l[53;159H~@k[36;24H[53;159H   [37;24H[53;169H90[37;24H[?12l[?25h[?25l[53;159H~@k[37;24H[53;159H   [38;24H[53;170H1[38;24H[?12l[?25h[?25l[53;159H~@k[38;24H[53;159H   [39;24H[53;170H2[39;24H[?12l[?25h[?25l[53;159H~@k[39;24H[53;159H   [40;24H[53;170H3[40;24H[?12l[?25h[?25l[53;159H~@k[40;24H[53;159H   [41;22H[53;170H4,22[41;22H[?12l[?25h[?25l[53;159H~@k[41;22H[53;159H   [42;24H[53;170H5,24[42;24H[?12l[?25h[?25l[53;159H~@k[42;24H[53;159H   [43;9H[29;39H[106m([43;9H)[m[53;170H6,9 [43;9H[?12l[?25h[?25l[53;159H~@k[43;9H[53;159H   [42;24H[29;39H([43;9H)[53;170H5,24[42;24H[?12l[?25h[?25l[53;159H~@k[42;24H[53;159H   [43;9H[29;39H[106m([43;9H)[m[53;170H6,9 [43;9H[?12l[?25h[?25l[53;159H~@k[43;9H[53;159H   [44;8H[29;39H([43;9H)[53;170H7,8[44;8H[?12l[?25h[?25l[53;159H~@k[44;8H[53;159H   [45;24H[53;170H8,24[45;24H[?12l[?25h[?25l[53;159H~@k[45;24H[53;159H   [45;25H[53;173H5[45;25H[?12l[?25h[?25l[53;159H~@k[45;25H[53;159H   [45;26H[53;173H6[45;26H[?12l[?25h[?25l[53;159H~@k[45;26H[53;159H   [45;27H[53;173H7[45;27H[?12l[?25h[?25l[53;159H~@k[45;27H[53;159H   [45;28H[53;173H8[45;28H[?12l[?25h[?25l[53;159H~@k[45;28H[53;159H   [45;29H[106m([22C)[m[53;173H9[45;29H[?12l[?25h[?25l[53;159H~@k[45;29H[53;159H   [45;30H([22C)[53;172H30[45;30H[?12l[?25h[?25l[53;159H~@k[45;30H[53;159H   [45;31H[53;173H1[45;31H[?12l[?25h[?25l[53;159H~@k[45;31H[53;159H   [45;32H[53;173H2[45;32H[?12l[?25h[?25l[53;159Hi[45;32H[53;159H [45;32H[53;1H[1m-- INSERT --[m[53;13H[K[53;169H98,32[9C53%[45;32H[?12l[?25h[?25l*[31m23[m*[31m128[m, num_classes)[45;52H[K[53;173H1[45;31H[?12l[?25h[?25l2mod *[1C[31m3[m*[31m128[m, num_classes)[53;173H5[45;35H[?12l[?25h[?25l[31m7[m*[31m23[m*[31m128[m, num_classes)[53;173H6[45;36H[?12l[?25h[?25l7is *[31m23[m*[31m128[m, num_classes)[53;173H9[45;39H[?12l[?25h[?25l*[31m23[m*[31m128[m, num_classes)[45;59H[K[53;173H8[45;38H[?12l[?25h[?25l2*[31m23[m*[31m128[m, num_classes)[53;173H9[45;39H[?12l[?25h[?25l7*[31m23[m*[31m128[m, num_classes)[53;172H40[45;40H[?12l[?25h[?25l*[31m23[m*[31m128[m, num_classes)[45;60H[K[53;172H39[45;39H[?12l[?25h[?25l*[31m23[m*[31m128[m, num_classes)[45;59H[K[53;173H8[45;38H[?12l[?25h[?25l*[31m23[m*[31m128[m, num_classes)[45;58H[K[53;173H7[45;37H[?12l[?25h[?25l[31m7[m*[31m23[m*[31m128[m, num_classes)[45;57H[K[53;173H6[45;36H[?12l[?25h[?25l*[31m23[m*[31m128[m, num_classes)[45;56H[K[53;173H5[45;35H[?12l[?25h[?25l*[31m23[m*[31m128[m, num_classes)[45;55H[K[53;173H4[45;34H[?12l[?25h[?25l*[31m23[m*[31m128[m, num_classes)[45;54H[K[53;173H3[45;33H[?12l[?25h[?25l*[31m23[m*[31m128[m, num_classes)[45;53H[K[53;173H2[45;32H[?12l[?25h[?25l[31m2[m*[31m23[m*[31m128[m, num_classes)[45;52H[K[53;173H1[45;31H[?12l[?25h[?25l[31m7[m*[31m23[m*[31m128[m, num_classes)[53;173H2[45;32H[?12l[?25h[?25l[53;173H3[45;33H[?12l[?25h[?25l[53;173H4[45;34H[?12l[?25h[?25l[53;173H5[45;35H[?12l[?25h[?25l*[31m128[m, num_classes)[45;52H[K[53;173H4[45;34H[?12l[?25h[?25l[31m7[m*[31m128[m, num_classes)[53;173H5[45;35H[?12l[?25h[?25l`*[31m128[m, num_classes)[53;173H6[45;36H[?12l[?25h[53;1H[K[45;35H[?25l[53;159H^[[45;35H[53;159H  [45;36H[53;169H98,35[9C53%[45;35H[?12l[?25h[?25l[53;159Hi[45;35H[53;159H [45;35H[53;1H[1m-- INSERT --[m[53;169H[K[53;169H98,35[9C53%[45;35H[?12l[?25h[?25l[53;173H6[45;36H[?12l[?25h[?25l*[31m128[m, num_classes)[45;53H[K[53;173H5[45;35H[?12l[?25h[53;1H[K[45;34H[?25l[53;159H^[[45;34H[53;159H  [45;35H[53;169H98,34[9C53%[45;34H[?12l[?25h[?25l[53;159H:[45;34H[53;159H[K[53;1H:[?12l[?25hw[?25l[?12l[?25hq[?25l[?12l[?25h[?25l[?1002l"NET-3_MNIST.py" 151L, 4776C written
[?1l>[?12l[?25h[?1049l]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ vim NET-3_MNIST.py [4@python3[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
cuda:0
Epoch [1/200], Step [100/1200], Loss: 0.5506
Epoch [1/200], Step [200/1200], Loss: 0.3479
Epoch [1/200], Step [300/1200], Loss: 0.1659
Epoch [1/200], Step [400/1200], Loss: 0.4768
Epoch [1/200], Step [500/1200], Loss: 0.1758
Epoch [1/200], Step [600/1200], Loss: 0.1793
Epoch [1/200], Step [700/1200], Loss: 0.1800
Epoch [1/200], Step [800/1200], Loss: 0.2851
Epoch [1/200], Step [900/1200], Loss: 0.1814
Epoch [1/200], Step [1000/1200], Loss: 0.2410
Epoch [1/200], Step [1100/1200], Loss: 0.0478
Epoch [1/200], Step [1200/1200], Loss: 0.3046
Epoch [2/200], Step [100/1200], Loss: 0.0880
Epoch [2/200], Step [200/1200], Loss: 0.3965
Epoch [2/200], Step [300/1200], Loss: 0.1972
Epoch [2/200], Step [400/1200], Loss: 0.1480
Epoch [2/200], Step [500/1200], Loss: 0.1199
Epoch [2/200], Step [600/1200], Loss: 0.0908
Epoch [2/200], Step [700/1200], Loss: 0.0505
Epoch [2/200], Step [800/1200], Loss: 0.0976
Epoch [2/200], Step [900/1200], Loss: 0.1343
Epoch [2/200], Step [1000/1200], Loss: 0.2597
Epoch [2/200], Step [1100/1200], Loss: 0.2223
Epoch [2/200], Step [1200/1200], Loss: 0.1115
Epoch [3/200], Step [100/1200], Loss: 0.2950
Epoch [3/200], Step [200/1200], Loss: 0.1864
Epoch [3/200], Step [300/1200], Loss: 0.1189
Epoch [3/200], Step [400/1200], Loss: 0.1406
Epoch [3/200], Step [500/1200], Loss: 0.0972
Epoch [3/200], Step [600/1200], Loss: 0.1338
Epoch [3/200], Step [700/1200], Loss: 0.1824
Epoch [3/200], Step [800/1200], Loss: 0.0389
Epoch [3/200], Step [900/1200], Loss: 0.2033
Epoch [3/200], Step [1000/1200], Loss: 0.0751
Epoch [3/200], Step [1100/1200], Loss: 0.0617
Epoch [3/200], Step [1200/1200], Loss: 0.2005
Epoch [4/200], Step [100/1200], Loss: 0.2034
Epoch [4/200], Step [200/1200], Loss: 0.1058
Epoch [4/200], Step [300/1200], Loss: 0.2943
Epoch [4/200], Step [400/1200], Loss: 0.0493
Epoch [4/200], Step [500/1200], Loss: 0.0586
Epoch [4/200], Step [600/1200], Loss: 0.0645
Epoch [4/200], Step [700/1200], Loss: 0.0236
Epoch [4/200], Step [800/1200], Loss: 0.0944
Epoch [4/200], Step [900/1200], Loss: 0.1009
Epoch [4/200], Step [1000/1200], Loss: 0.0364
Epoch [4/200], Step [1100/1200], Loss: 0.1126
Epoch [4/200], Step [1200/1200], Loss: 0.1484
Epoch [5/200], Step [100/1200], Loss: 0.1835
Epoch [5/200], Step [200/1200], Loss: 0.0362
Epoch [5/200], Step [300/1200], Loss: 0.1127
Epoch [5/200], Step [400/1200], Loss: 0.0808
Epoch [5/200], Step [500/1200], Loss: 0.0699
Epoch [5/200], Step [600/1200], Loss: 0.0239
Epoch [5/200], Step [700/1200], Loss: 0.2947
Epoch [5/200], Step [800/1200], Loss: 0.2370
Epoch [5/200], Step [900/1200], Loss: 0.0454
Epoch [5/200], Step [1000/1200], Loss: 0.2454
Epoch [5/200], Step [1100/1200], Loss: 0.1427
Epoch [5/200], Step [1200/1200], Loss: 0.1387
Epoch [6/200], Step [100/1200], Loss: 0.0624
Epoch [6/200], Step [200/1200], Loss: 0.0726
Epoch [6/200], Step [300/1200], Loss: 0.0687
Epoch [6/200], Step [400/1200], Loss: 0.1554
Epoch [6/200], Step [500/1200], Loss: 0.0592
Epoch [6/200], Step [600/1200], Loss: 0.0268
Epoch [6/200], Step [700/1200], Loss: 0.0568
Epoch [6/200], Step [800/1200], Loss: 0.0383
Epoch [6/200], Step [900/1200], Loss: 0.0629
Epoch [6/200], Step [1000/1200], Loss: 0.0195
Epoch [6/200], Step [1100/1200], Loss: 0.0396
Epoch [6/200], Step [1200/1200], Loss: 0.0440
Epoch [7/200], Step [100/1200], Loss: 0.1315
Epoch [7/200], Step [200/1200], Loss: 0.2056
Epoch [7/200], Step [300/1200], Loss: 0.0245
Epoch [7/200], Step [400/1200], Loss: 0.1751
Epoch [7/200], Step [500/1200], Loss: 0.0798
Epoch [7/200], Step [600/1200], Loss: 0.1115
Epoch [7/200], Step [700/1200], Loss: 0.0500
Epoch [7/200], Step [800/1200], Loss: 0.2741
Epoch [7/200], Step [900/1200], Loss: 0.0642
Epoch [7/200], Step [1000/1200], Loss: 0.0163
Epoch [7/200], Step [1100/1200], Loss: 0.0978
Epoch [7/200], Step [1200/1200], Loss: 0.0330
Epoch [8/200], Step [100/1200], Loss: 0.0381
Epoch [8/200], Step [200/1200], Loss: 0.0800
Epoch [8/200], Step [300/1200], Loss: 0.0466
Epoch [8/200], Step [400/1200], Loss: 0.0140
Epoch [8/200], Step [500/1200], Loss: 0.0111
Epoch [8/200], Step [600/1200], Loss: 0.0365
Epoch [8/200], Step [700/1200], Loss: 0.0297
Epoch [8/200], Step [800/1200], Loss: 0.0987
Epoch [8/200], Step [900/1200], Loss: 0.0751
Epoch [8/200], Step [1000/1200], Loss: 0.0967
Epoch [8/200], Step [1100/1200], Loss: 0.1235
Epoch [8/200], Step [1200/1200], Loss: 0.0274
Epoch [9/200], Step [100/1200], Loss: 0.1025
Epoch [9/200], Step [200/1200], Loss: 0.0047
Epoch [9/200], Step [300/1200], Loss: 0.0602
Epoch [9/200], Step [400/1200], Loss: 0.0132
Epoch [9/200], Step [500/1200], Loss: 0.0150
Epoch [9/200], Step [600/1200], Loss: 0.0207
Epoch [9/200], Step [700/1200], Loss: 0.0121
Epoch [9/200], Step [800/1200], Loss: 0.0452
Epoch [9/200], Step [900/1200], Loss: 0.0536
Epoch [9/200], Step [1000/1200], Loss: 0.0015
Epoch [9/200], Step [1100/1200], Loss: 0.0476
Epoch [9/200], Step [1200/1200], Loss: 0.0290
Epoch [10/200], Step [100/1200], Loss: 0.0299
Epoch [10/200], Step [200/1200], Loss: 0.0053
Epoch [10/200], Step [300/1200], Loss: 0.1319
Epoch [10/200], Step [400/1200], Loss: 0.1698
Epoch [10/200], Step [500/1200], Loss: 0.0359
Epoch [10/200], Step [600/1200], Loss: 0.0427
Epoch [10/200], Step [700/1200], Loss: 0.0532
Epoch [10/200], Step [800/1200], Loss: 0.0042
Epoch [10/200], Step [900/1200], Loss: 0.2106
Epoch [10/200], Step [1000/1200], Loss: 0.0154
Epoch [10/200], Step [1100/1200], Loss: 0.0922
Epoch [10/200], Step [1200/1200], Loss: 0.0156
Epoch [11/200], Step [100/1200], Loss: 0.0203
Epoch [11/200], Step [200/1200], Loss: 0.1382
Epoch [11/200], Step [300/1200], Loss: 0.1242
Epoch [11/200], Step [400/1200], Loss: 0.0319
Epoch [11/200], Step [500/1200], Loss: 0.1365
Epoch [11/200], Step [600/1200], Loss: 0.0305
Epoch [11/200], Step [700/1200], Loss: 0.0623
Epoch [11/200], Step [800/1200], Loss: 0.0233
Epoch [11/200], Step [900/1200], Loss: 0.0417
Epoch [11/200], Step [1000/1200], Loss: 0.0099
Epoch [11/200], Step [1100/1200], Loss: 0.1666
Epoch [11/200], Step [1200/1200], Loss: 0.0244
Epoch [12/200], Step [100/1200], Loss: 0.0130
Epoch [12/200], Step [200/1200], Loss: 0.0902
Epoch [12/200], Step [300/1200], Loss: 0.1080
Epoch [12/200], Step [400/1200], Loss: 0.0079
Epoch [12/200], Step [500/1200], Loss: 0.0560
Epoch [12/200], Step [600/1200], Loss: 0.0641
Epoch [12/200], Step [700/1200], Loss: 0.0367
Epoch [12/200], Step [800/1200], Loss: 0.0535
Epoch [12/200], Step [900/1200], Loss: 0.1165
Epoch [12/200], Step [1000/1200], Loss: 0.0184
Epoch [12/200], Step [1100/1200], Loss: 0.0988
Epoch [12/200], Step [1200/1200], Loss: 0.0955
Epoch [13/200], Step [100/1200], Loss: 0.0180
Epoch [13/200], Step [200/1200], Loss: 0.0280
Epoch [13/200], Step [300/1200], Loss: 0.0811
Epoch [13/200], Step [400/1200], Loss: 0.0509
Epoch [13/200], Step [500/1200], Loss: 0.0314
Epoch [13/200], Step [600/1200], Loss: 0.0848
Epoch [13/200], Step [700/1200], Loss: 0.0559
Epoch [13/200], Step [800/1200], Loss: 0.0259
Epoch [13/200], Step [900/1200], Loss: 0.0685
Epoch [13/200], Step [1000/1200], Loss: 0.0330
Epoch [13/200], Step [1100/1200], Loss: 0.0590
Epoch [13/200], Step [1200/1200], Loss: 0.0083
Epoch [14/200], Step [100/1200], Loss: 0.0293
Epoch [14/200], Step [200/1200], Loss: 0.1280
Epoch [14/200], Step [300/1200], Loss: 0.0255
Epoch [14/200], Step [400/1200], Loss: 0.0477
Epoch [14/200], Step [500/1200], Loss: 0.0015
Epoch [14/200], Step [600/1200], Loss: 0.0120
Epoch [14/200], Step [700/1200], Loss: 0.0111
Epoch [14/200], Step [800/1200], Loss: 0.0114
Epoch [14/200], Step [900/1200], Loss: 0.0082
Epoch [14/200], Step [1000/1200], Loss: 0.0071
Epoch [14/200], Step [1100/1200], Loss: 0.1007
Epoch [14/200], Step [1200/1200], Loss: 0.0183
Epoch [15/200], Step [100/1200], Loss: 0.0006
Epoch [15/200], Step [200/1200], Loss: 0.0310
Epoch [15/200], Step [300/1200], Loss: 0.0023
Epoch [15/200], Step [400/1200], Loss: 0.1070
Epoch [15/200], Step [500/1200], Loss: 0.0056
Epoch [15/200], Step [600/1200], Loss: 0.1075
Epoch [15/200], Step [700/1200], Loss: 0.1894
Epoch [15/200], Step [800/1200], Loss: 0.0047
Epoch [15/200], Step [900/1200], Loss: 0.0606
Epoch [15/200], Step [1000/1200], Loss: 0.0454
Epoch [15/200], Step [1100/1200], Loss: 0.0167
Epoch [15/200], Step [1200/1200], Loss: 0.0115
Epoch [16/200], Step [100/1200], Loss: 0.0303
Epoch [16/200], Step [200/1200], Loss: 0.0132
Epoch [16/200], Step [300/1200], Loss: 0.0217
Epoch [16/200], Step [400/1200], Loss: 0.0113
Epoch [16/200], Step [500/1200], Loss: 0.0238
Epoch [16/200], Step [600/1200], Loss: 0.0068
Epoch [16/200], Step [700/1200], Loss: 0.0336
Epoch [16/200], Step [800/1200], Loss: 0.0161
Epoch [16/200], Step [900/1200], Loss: 0.0219
Epoch [16/200], Step [1000/1200], Loss: 0.1433
Epoch [16/200], Step [1100/1200], Loss: 0.0430
Epoch [16/200], Step [1200/1200], Loss: 0.0370
Epoch [17/200], Step [100/1200], Loss: 0.1635
Epoch [17/200], Step [200/1200], Loss: 0.0983
Epoch [17/200], Step [300/1200], Loss: 0.0223
Epoch [17/200], Step [400/1200], Loss: 0.0678
Epoch [17/200], Step [500/1200], Loss: 0.0225
Epoch [17/200], Step [600/1200], Loss: 0.0017
Epoch [17/200], Step [700/1200], Loss: 0.0197
Epoch [17/200], Step [800/1200], Loss: 0.0144
Epoch [17/200], Step [900/1200], Loss: 0.0090
Epoch [17/200], Step [1000/1200], Loss: 0.1787
Epoch [17/200], Step [1100/1200], Loss: 0.0091
Epoch [17/200], Step [1200/1200], Loss: 0.0822
Epoch [18/200], Step [100/1200], Loss: 0.0205
Epoch [18/200], Step [200/1200], Loss: 0.0935
Epoch [18/200], Step [300/1200], Loss: 0.0800
Epoch [18/200], Step [400/1200], Loss: 0.0296
Epoch [18/200], Step [500/1200], Loss: 0.0231
Epoch [18/200], Step [600/1200], Loss: 0.0116
Epoch [18/200], Step [700/1200], Loss: 0.0230
Epoch [18/200], Step [800/1200], Loss: 0.0076
Epoch [18/200], Step [900/1200], Loss: 0.0044
Epoch [18/200], Step [1000/1200], Loss: 0.0127
Epoch [18/200], Step [1100/1200], Loss: 0.0435
Epoch [18/200], Step [1200/1200], Loss: 0.0103
Epoch [19/200], Step [100/1200], Loss: 0.0224
Epoch [19/200], Step [200/1200], Loss: 0.1148
Epoch [19/200], Step [300/1200], Loss: 0.0558
Epoch [19/200], Step [400/1200], Loss: 0.1027
Epoch [19/200], Step [500/1200], Loss: 0.0088
Epoch [19/200], Step [600/1200], Loss: 0.0077
Epoch [19/200], Step [700/1200], Loss: 0.0820
Epoch [19/200], Step [800/1200], Loss: 0.0326
Epoch [19/200], Step [900/1200], Loss: 0.0346
Epoch [19/200], Step [1000/1200], Loss: 0.0152
Epoch [19/200], Step [1100/1200], Loss: 0.0156
Epoch [19/200], Step [1200/1200], Loss: 0.0499
Epoch [20/200], Step [100/1200], Loss: 0.0015
Epoch [20/200], Step [200/1200], Loss: 0.0326
Epoch [20/200], Step [300/1200], Loss: 0.0063
Epoch [20/200], Step [400/1200], Loss: 0.0659
Epoch [20/200], Step [500/1200], Loss: 0.0133
Epoch [20/200], Step [600/1200], Loss: 0.0635
Epoch [20/200], Step [700/1200], Loss: 0.0358
Epoch [20/200], Step [800/1200], Loss: 0.0156
Epoch [20/200], Step [900/1200], Loss: 0.0693
Epoch [20/200], Step [1000/1200], Loss: 0.0150
Epoch [20/200], Step [1100/1200], Loss: 0.0188
Epoch [20/200], Step [1200/1200], Loss: 0.0537
Epoch [21/200], Step [100/1200], Loss: 0.0102
Epoch [21/200], Step [200/1200], Loss: 0.0033
Epoch [21/200], Step [300/1200], Loss: 0.0371
Epoch [21/200], Step [400/1200], Loss: 0.0138
Epoch [21/200], Step [500/1200], Loss: 0.0862
Epoch [21/200], Step [600/1200], Loss: 0.0661
Epoch [21/200], Step [700/1200], Loss: 0.0178
Epoch [21/200], Step [800/1200], Loss: 0.0032
Epoch [21/200], Step [900/1200], Loss: 0.0112
Epoch [21/200], Step [1000/1200], Loss: 0.0044
Epoch [21/200], Step [1100/1200], Loss: 0.0232
Epoch [21/200], Step [1200/1200], Loss: 0.0075
Epoch [22/200], Step [100/1200], Loss: 0.0007
Epoch [22/200], Step [200/1200], Loss: 0.0020
Epoch [22/200], Step [300/1200], Loss: 0.0538
Epoch [22/200], Step [400/1200], Loss: 0.1988
Epoch [22/200], Step [500/1200], Loss: 0.0338
Epoch [22/200], Step [600/1200], Loss: 0.0505
Epoch [22/200], Step [700/1200], Loss: 0.0512
Epoch [22/200], Step [800/1200], Loss: 0.0142
Epoch [22/200], Step [900/1200], Loss: 0.0173
Epoch [22/200], Step [1000/1200], Loss: 0.0061
Epoch [22/200], Step [1100/1200], Loss: 0.0150
Epoch [22/200], Step [1200/1200], Loss: 0.1239
Epoch [23/200], Step [100/1200], Loss: 0.0060
Epoch [23/200], Step [200/1200], Loss: 0.0068
Epoch [23/200], Step [300/1200], Loss: 0.0038
Epoch [23/200], Step [400/1200], Loss: 0.0439
Epoch [23/200], Step [500/1200], Loss: 0.0701
Epoch [23/200], Step [600/1200], Loss: 0.0373
Epoch [23/200], Step [700/1200], Loss: 0.0675
Epoch [23/200], Step [800/1200], Loss: 0.0597
Epoch [23/200], Step [900/1200], Loss: 0.0863
Epoch [23/200], Step [1000/1200], Loss: 0.0010
Epoch [23/200], Step [1100/1200], Loss: 0.0720
Epoch [23/200], Step [1200/1200], Loss: 0.0046
Epoch [24/200], Step [100/1200], Loss: 0.0619
Epoch [24/200], Step [200/1200], Loss: 0.0108
Epoch [24/200], Step [300/1200], Loss: 0.0116
Epoch [24/200], Step [400/1200], Loss: 0.0289
Epoch [24/200], Step [500/1200], Loss: 0.0075
Epoch [24/200], Step [600/1200], Loss: 0.0019
Epoch [24/200], Step [700/1200], Loss: 0.0293
Epoch [24/200], Step [800/1200], Loss: 0.0044
Epoch [24/200], Step [900/1200], Loss: 0.0279
Epoch [24/200], Step [1000/1200], Loss: 0.0177
Epoch [24/200], Step [1100/1200], Loss: 0.0839
Epoch [24/200], Step [1200/1200], Loss: 0.0091
Epoch [25/200], Step [100/1200], Loss: 0.0014
Epoch [25/200], Step [200/1200], Loss: 0.0202
Epoch [25/200], Step [300/1200], Loss: 0.0004
Epoch [25/200], Step [400/1200], Loss: 0.0133
Epoch [25/200], Step [500/1200], Loss: 0.0086
Epoch [25/200], Step [600/1200], Loss: 0.0320
Epoch [25/200], Step [700/1200], Loss: 0.0128
Epoch [25/200], Step [800/1200], Loss: 0.0585
Epoch [25/200], Step [900/1200], Loss: 0.0487
Epoch [25/200], Step [1000/1200], Loss: 0.0344
Epoch [25/200], Step [1100/1200], Loss: 0.1500
Epoch [25/200], Step [1200/1200], Loss: 0.0492
Epoch [26/200], Step [100/1200], Loss: 0.0897
Epoch [26/200], Step [200/1200], Loss: 0.0175
Epoch [26/200], Step [300/1200], Loss: 0.0451
Epoch [26/200], Step [400/1200], Loss: 0.0306
Epoch [26/200], Step [500/1200], Loss: 0.0136
Epoch [26/200], Step [600/1200], Loss: 0.1151
Epoch [26/200], Step [700/1200], Loss: 0.0154
Epoch [26/200], Step [800/1200], Loss: 0.0374
Epoch [26/200], Step [900/1200], Loss: 0.0029
Epoch [26/200], Step [1000/1200], Loss: 0.0195
Epoch [26/200], Step [1100/1200], Loss: 0.0288
Epoch [26/200], Step [1200/1200], Loss: 0.1376
Epoch [27/200], Step [100/1200], Loss: 0.0004
Epoch [27/200], Step [200/1200], Loss: 0.0635
Epoch [27/200], Step [300/1200], Loss: 0.0017
Epoch [27/200], Step [400/1200], Loss: 0.0048
Epoch [27/200], Step [500/1200], Loss: 0.0074
Epoch [27/200], Step [600/1200], Loss: 0.0072
Epoch [27/200], Step [700/1200], Loss: 0.0585
Epoch [27/200], Step [800/1200], Loss: 0.0572
Epoch [27/200], Step [900/1200], Loss: 0.0020
Epoch [27/200], Step [1000/1200], Loss: 0.0057
Epoch [27/200], Step [1100/1200], Loss: 0.0544
Epoch [27/200], Step [1200/1200], Loss: 0.0750
Epoch [28/200], Step [100/1200], Loss: 0.0037
Epoch [28/200], Step [200/1200], Loss: 0.0247
Epoch [28/200], Step [300/1200], Loss: 0.0049
Epoch [28/200], Step [400/1200], Loss: 0.1403
Epoch [28/200], Step [500/1200], Loss: 0.0007
Epoch [28/200], Step [600/1200], Loss: 0.0043
Epoch [28/200], Step [700/1200], Loss: 0.0550
Epoch [28/200], Step [800/1200], Loss: 0.0172
Epoch [28/200], Step [900/1200], Loss: 0.0269
Epoch [28/200], Step [1000/1200], Loss: 0.0114
Epoch [28/200], Step [1100/1200], Loss: 0.0054
Epoch [28/200], Step [1200/1200], Loss: 0.0420
Epoch [29/200], Step [100/1200], Loss: 0.0033
Epoch [29/200], Step [200/1200], Loss: 0.0721
Epoch [29/200], Step [300/1200], Loss: 0.0197
Epoch [29/200], Step [400/1200], Loss: 0.0006
Epoch [29/200], Step [500/1200], Loss: 0.0090
Epoch [29/200], Step [600/1200], Loss: 0.0011
Epoch [29/200], Step [700/1200], Loss: 0.0034
Epoch [29/200], Step [800/1200], Loss: 0.0091
Epoch [29/200], Step [900/1200], Loss: 0.0098
Epoch [29/200], Step [1000/1200], Loss: 0.1447
Epoch [29/200], Step [1100/1200], Loss: 0.0093
Epoch [29/200], Step [1200/1200], Loss: 0.0052
Epoch [30/200], Step [100/1200], Loss: 0.0041
Epoch [30/200], Step [200/1200], Loss: 0.0586
Epoch [30/200], Step [300/1200], Loss: 0.0689
Epoch [30/200], Step [400/1200], Loss: 0.0014
Epoch [30/200], Step [500/1200], Loss: 0.0029
Epoch [30/200], Step [600/1200], Loss: 0.0036
Epoch [30/200], Step [700/1200], Loss: 0.0183
Epoch [30/200], Step [800/1200], Loss: 0.0364
Epoch [30/200], Step [900/1200], Loss: 0.1227
Epoch [30/200], Step [1000/1200], Loss: 0.0175
Epoch [30/200], Step [1100/1200], Loss: 0.0068
Epoch [30/200], Step [1200/1200], Loss: 0.3458
Epoch [31/200], Step [100/1200], Loss: 0.1013
Epoch [31/200], Step [200/1200], Loss: 0.0629
Epoch [31/200], Step [300/1200], Loss: 0.0010
Epoch [31/200], Step [400/1200], Loss: 0.0352
Epoch [31/200], Step [500/1200], Loss: 0.0046
Epoch [31/200], Step [600/1200], Loss: 0.0232
Epoch [31/200], Step [700/1200], Loss: 0.0208
Epoch [31/200], Step [800/1200], Loss: 0.0024
Epoch [31/200], Step [900/1200], Loss: 0.0733
Epoch [31/200], Step [1000/1200], Loss: 0.2411
Epoch [31/200], Step [1100/1200], Loss: 0.0060
Epoch [31/200], Step [1200/1200], Loss: 0.0112
Epoch [32/200], Step [100/1200], Loss: 0.0070
Epoch [32/200], Step [200/1200], Loss: 0.0012
Epoch [32/200], Step [300/1200], Loss: 0.0090
Epoch [32/200], Step [400/1200], Loss: 0.0186
Epoch [32/200], Step [500/1200], Loss: 0.0205
Epoch [32/200], Step [600/1200], Loss: 0.0422
Epoch [32/200], Step [700/1200], Loss: 0.1737
Epoch [32/200], Step [800/1200], Loss: 0.0119
Epoch [32/200], Step [900/1200], Loss: 0.0039
Epoch [32/200], Step [1000/1200], Loss: 0.0180
Epoch [32/200], Step [1100/1200], Loss: 0.0167
Epoch [32/200], Step [1200/1200], Loss: 0.0063
Epoch [33/200], Step [100/1200], Loss: 0.0002
Epoch [33/200], Step [200/1200], Loss: 0.0376
Epoch [33/200], Step [300/1200], Loss: 0.0129
Epoch [33/200], Step [400/1200], Loss: 0.0007
Epoch [33/200], Step [500/1200], Loss: 0.0040
Epoch [33/200], Step [600/1200], Loss: 0.0063
Epoch [33/200], Step [700/1200], Loss: 0.0046
Epoch [33/200], Step [800/1200], Loss: 0.0039
Epoch [33/200], Step [900/1200], Loss: 0.0308
Epoch [33/200], Step [1000/1200], Loss: 0.0467
Epoch [33/200], Step [1100/1200], Loss: 0.0019
Epoch [33/200], Step [1200/1200], Loss: 0.0520
Epoch [34/200], Step [100/1200], Loss: 0.0414
Epoch [34/200], Step [200/1200], Loss: 0.0024
Epoch [34/200], Step [300/1200], Loss: 0.0005
Epoch [34/200], Step [400/1200], Loss: 0.1101
Epoch [34/200], Step [500/1200], Loss: 0.0262
Epoch [34/200], Step [600/1200], Loss: 0.0597
Epoch [34/200], Step [700/1200], Loss: 0.0164
Epoch [34/200], Step [800/1200], Loss: 0.0127
Epoch [34/200], Step [900/1200], Loss: 0.0006
Epoch [34/200], Step [1000/1200], Loss: 0.0025
Epoch [34/200], Step [1100/1200], Loss: 0.0164
Epoch [34/200], Step [1200/1200], Loss: 0.0077
Epoch [35/200], Step [100/1200], Loss: 0.0032
Epoch [35/200], Step [200/1200], Loss: 0.1886
Epoch [35/200], Step [300/1200], Loss: 0.1171
Epoch [35/200], Step [400/1200], Loss: 0.0656
Epoch [35/200], Step [500/1200], Loss: 0.0198
Epoch [35/200], Step [600/1200], Loss: 0.0058
Epoch [35/200], Step [700/1200], Loss: 0.0008
Epoch [35/200], Step [800/1200], Loss: 0.0177
Epoch [35/200], Step [900/1200], Loss: 0.0043
Epoch [35/200], Step [1000/1200], Loss: 0.0130
Epoch [35/200], Step [1100/1200], Loss: 0.0142
Epoch [35/200], Step [1200/1200], Loss: 0.0158
Epoch [36/200], Step [100/1200], Loss: 0.0300
Epoch [36/200], Step [200/1200], Loss: 0.0005
Epoch [36/200], Step [300/1200], Loss: 0.0019
Epoch [36/200], Step [400/1200], Loss: 0.0662
Epoch [36/200], Step [500/1200], Loss: 0.0014
Epoch [36/200], Step [600/1200], Loss: 0.0037
Epoch [36/200], Step [700/1200], Loss: 0.0084
Epoch [36/200], Step [800/1200], Loss: 0.0031
Epoch [36/200], Step [900/1200], Loss: 0.0008
Epoch [36/200], Step [1000/1200], Loss: 0.0407
Epoch [36/200], Step [1100/1200], Loss: 0.0584
Epoch [36/200], Step [1200/1200], Loss: 0.0004
Epoch [37/200], Step [100/1200], Loss: 0.0013
Epoch [37/200], Step [200/1200], Loss: 0.0037
Epoch [37/200], Step [300/1200], Loss: 0.0014
Epoch [37/200], Step [400/1200], Loss: 0.0002
Epoch [37/200], Step [500/1200], Loss: 0.0059
Epoch [37/200], Step [600/1200], Loss: 0.0058
Epoch [37/200], Step [700/1200], Loss: 0.0024
Epoch [37/200], Step [800/1200], Loss: 0.0309
Epoch [37/200], Step [900/1200], Loss: 0.0029
Epoch [37/200], Step [1000/1200], Loss: 0.0101
Epoch [37/200], Step [1100/1200], Loss: 0.0049
Epoch [37/200], Step [1200/1200], Loss: 0.0021
Epoch [38/200], Step [100/1200], Loss: 0.0081
Epoch [38/200], Step [200/1200], Loss: 0.0003
Epoch [38/200], Step [300/1200], Loss: 0.0013
Epoch [38/200], Step [400/1200], Loss: 0.0022
Epoch [38/200], Step [500/1200], Loss: 0.0082
Epoch [38/200], Step [600/1200], Loss: 0.0069
Epoch [38/200], Step [700/1200], Loss: 0.0013
Epoch [38/200], Step [800/1200], Loss: 0.0035
Epoch [38/200], Step [900/1200], Loss: 0.0047
Epoch [38/200], Step [1000/1200], Loss: 0.0005
Epoch [38/200], Step [1100/1200], Loss: 0.0003
Epoch [38/200], Step [1200/1200], Loss: 0.0364
Epoch [39/200], Step [100/1200], Loss: 0.0120
Epoch [39/200], Step [200/1200], Loss: 0.0239
Epoch [39/200], Step [300/1200], Loss: 0.0028
Epoch [39/200], Step [400/1200], Loss: 0.0023
Epoch [39/200], Step [500/1200], Loss: 0.0004
Epoch [39/200], Step [600/1200], Loss: 0.0008
Epoch [39/200], Step [700/1200], Loss: 0.0039
Epoch [39/200], Step [800/1200], Loss: 0.0007
Epoch [39/200], Step [900/1200], Loss: 0.0431
Epoch [39/200], Step [1000/1200], Loss: 0.0629
Epoch [39/200], Step [1100/1200], Loss: 0.0285
Epoch [39/200], Step [1200/1200], Loss: 0.0071
Epoch [40/200], Step [100/1200], Loss: 0.0212
Epoch [40/200], Step [200/1200], Loss: 0.0160
Epoch [40/200], Step [300/1200], Loss: 0.0019
Epoch [40/200], Step [400/1200], Loss: 0.0007
Epoch [40/200], Step [500/1200], Loss: 0.0018
Epoch [40/200], Step [600/1200], Loss: 0.1061
Epoch [40/200], Step [700/1200], Loss: 0.0010
Epoch [40/200], Step [800/1200], Loss: 0.1024
Epoch [40/200], Step [900/1200], Loss: 0.0103
Epoch [40/200], Step [1000/1200], Loss: 0.0217
Epoch [40/200], Step [1100/1200], Loss: 0.0131
Epoch [40/200], Step [1200/1200], Loss: 0.0347
Epoch [41/200], Step [100/1200], Loss: 0.0517
Epoch [41/200], Step [200/1200], Loss: 0.0127
Epoch [41/200], Step [300/1200], Loss: 0.0218
Epoch [41/200], Step [400/1200], Loss: 0.0008
Epoch [41/200], Step [500/1200], Loss: 0.0078
Epoch [41/200], Step [600/1200], Loss: 0.0196
Epoch [41/200], Step [700/1200], Loss: 0.0002
Epoch [41/200], Step [800/1200], Loss: 0.0090
Epoch [41/200], Step [900/1200], Loss: 0.0118
Epoch [41/200], Step [1000/1200], Loss: 0.0005
Epoch [41/200], Step [1100/1200], Loss: 0.0029
Epoch [41/200], Step [1200/1200], Loss: 0.0020
Epoch [42/200], Step [100/1200], Loss: 0.0002
Epoch [42/200], Step [200/1200], Loss: 0.0000
Epoch [42/200], Step [300/1200], Loss: 0.0011
Epoch [42/200], Step [400/1200], Loss: 0.0031
Epoch [42/200], Step [500/1200], Loss: 0.0076
Epoch [42/200], Step [600/1200], Loss: 0.0070
Epoch [42/200], Step [700/1200], Loss: 0.0134
Epoch [42/200], Step [800/1200], Loss: 0.0132
Epoch [42/200], Step [900/1200], Loss: 0.0022
Epoch [42/200], Step [1000/1200], Loss: 0.0076
Epoch [42/200], Step [1100/1200], Loss: 0.0307
Epoch [42/200], Step [1200/1200], Loss: 0.0038
Epoch [43/200], Step [100/1200], Loss: 0.0509
Epoch [43/200], Step [200/1200], Loss: 0.0500
Epoch [43/200], Step [300/1200], Loss: 0.0421
Epoch [43/200], Step [400/1200], Loss: 0.0092
Epoch [43/200], Step [500/1200], Loss: 0.0011
Epoch [43/200], Step [600/1200], Loss: 0.0084
Epoch [43/200], Step [700/1200], Loss: 0.1352
Epoch [43/200], Step [800/1200], Loss: 0.0155
Epoch [43/200], Step [900/1200], Loss: 0.0049
Epoch [43/200], Step [1000/1200], Loss: 0.0015
Epoch [43/200], Step [1100/1200], Loss: 0.0006
Epoch [43/200], Step [1200/1200], Loss: 0.0140
Epoch [44/200], Step [100/1200], Loss: 0.0017
Epoch [44/200], Step [200/1200], Loss: 0.0012
Epoch [44/200], Step [300/1200], Loss: 0.1632
Epoch [44/200], Step [400/1200], Loss: 0.0081
Epoch [44/200], Step [500/1200], Loss: 0.0066
Epoch [44/200], Step [600/1200], Loss: 0.0297
Epoch [44/200], Step [700/1200], Loss: 0.0074
Epoch [44/200], Step [800/1200], Loss: 0.0065
Epoch [44/200], Step [900/1200], Loss: 0.0834
Epoch [44/200], Step [1000/1200], Loss: 0.0522
Epoch [44/200], Step [1100/1200], Loss: 0.0252
Epoch [44/200], Step [1200/1200], Loss: 0.0013
Epoch [45/200], Step [100/1200], Loss: 0.0003
Epoch [45/200], Step [200/1200], Loss: 0.0134
Epoch [45/200], Step [300/1200], Loss: 0.0071
Epoch [45/200], Step [400/1200], Loss: 0.0299
Epoch [45/200], Step [500/1200], Loss: 0.0517
Epoch [45/200], Step [600/1200], Loss: 0.0986
Epoch [45/200], Step [700/1200], Loss: 0.0075
Epoch [45/200], Step [800/1200], Loss: 0.0011
Epoch [45/200], Step [900/1200], Loss: 0.0068
Epoch [45/200], Step [1000/1200], Loss: 0.0051
Epoch [45/200], Step [1100/1200], Loss: 0.0089
Epoch [45/200], Step [1200/1200], Loss: 0.0085
Epoch [46/200], Step [100/1200], Loss: 0.0013
Epoch [46/200], Step [200/1200], Loss: 0.0719
Epoch [46/200], Step [300/1200], Loss: 0.0306
Epoch [46/200], Step [400/1200], Loss: 0.0022
Epoch [46/200], Step [500/1200], Loss: 0.0160
Epoch [46/200], Step [600/1200], Loss: 0.1097
Epoch [46/200], Step [700/1200], Loss: 0.0040
Epoch [46/200], Step [800/1200], Loss: 0.0242
Epoch [46/200], Step [900/1200], Loss: 0.0762
Epoch [46/200], Step [1000/1200], Loss: 0.0044
Epoch [46/200], Step [1100/1200], Loss: 0.0254
Epoch [46/200], Step [1200/1200], Loss: 0.0257
Epoch [47/200], Step [100/1200], Loss: 0.0826
Epoch [47/200], Step [200/1200], Loss: 0.0028
Epoch [47/200], Step [300/1200], Loss: 0.0017
Epoch [47/200], Step [400/1200], Loss: 0.0008
Epoch [47/200], Step [500/1200], Loss: 0.0048
Epoch [47/200], Step [600/1200], Loss: 0.0127
Epoch [47/200], Step [700/1200], Loss: 0.0076
Epoch [47/200], Step [800/1200], Loss: 0.0112
Epoch [47/200], Step [900/1200], Loss: 0.0923
Epoch [47/200], Step [1000/1200], Loss: 0.1540
Epoch [47/200], Step [1100/1200], Loss: 0.0082
Epoch [47/200], Step [1200/1200], Loss: 0.0056
Epoch [48/200], Step [100/1200], Loss: 0.0111
Epoch [48/200], Step [200/1200], Loss: 0.0191
Epoch [48/200], Step [300/1200], Loss: 0.0099
Epoch [48/200], Step [400/1200], Loss: 0.0079
Epoch [48/200], Step [500/1200], Loss: 0.0003
Epoch [48/200], Step [600/1200], Loss: 0.0499
Epoch [48/200], Step [700/1200], Loss: 0.0020
Epoch [48/200], Step [800/1200], Loss: 0.0004
Epoch [48/200], Step [900/1200], Loss: 0.0502
Epoch [48/200], Step [1000/1200], Loss: 0.0065
Epoch [48/200], Step [1100/1200], Loss: 0.0489
Epoch [48/200], Step [1200/1200], Loss: 0.0092
Epoch [49/200], Step [100/1200], Loss: 0.0094
Epoch [49/200], Step [200/1200], Loss: 0.0068
Epoch [49/200], Step [300/1200], Loss: 0.0224
Epoch [49/200], Step [400/1200], Loss: 0.0081
Epoch [49/200], Step [500/1200], Loss: 0.0007
Epoch [49/200], Step [600/1200], Loss: 0.0427
Epoch [49/200], Step [700/1200], Loss: 0.0079
Epoch [49/200], Step [800/1200], Loss: 0.0154
Epoch [49/200], Step [900/1200], Loss: 0.0290
Epoch [49/200], Step [1000/1200], Loss: 0.0028
Epoch [49/200], Step [1100/1200], Loss: 0.0015
Epoch [49/200], Step [1200/1200], Loss: 0.0049
Epoch [50/200], Step [100/1200], Loss: 0.0004
Epoch [50/200], Step [200/1200], Loss: 0.0004
Epoch [50/200], Step [300/1200], Loss: 0.0004
Epoch [50/200], Step [400/1200], Loss: 0.0012
Epoch [50/200], Step [500/1200], Loss: 0.0042
Epoch [50/200], Step [600/1200], Loss: 0.0014
Epoch [50/200], Step [700/1200], Loss: 0.0001
Epoch [50/200], Step [800/1200], Loss: 0.0006
Epoch [50/200], Step [900/1200], Loss: 0.0408
Epoch [50/200], Step [1000/1200], Loss: 0.0052
Epoch [50/200], Step [1100/1200], Loss: 0.0607
Epoch [50/200], Step [1200/1200], Loss: 0.0002
Epoch [51/200], Step [100/1200], Loss: 0.0017
Epoch [51/200], Step [200/1200], Loss: 0.0009
Epoch [51/200], Step [300/1200], Loss: 0.0041
Epoch [51/200], Step [400/1200], Loss: 0.0043
Epoch [51/200], Step [500/1200], Loss: 0.0055
Epoch [51/200], Step [600/1200], Loss: 0.0030
Epoch [51/200], Step [700/1200], Loss: 0.0143
Epoch [51/200], Step [800/1200], Loss: 0.0367
Epoch [51/200], Step [900/1200], Loss: 0.0069
Epoch [51/200], Step [1000/1200], Loss: 0.0114
Epoch [51/200], Step [1100/1200], Loss: 0.0111
Epoch [51/200], Step [1200/1200], Loss: 0.0011
Epoch [52/200], Step [100/1200], Loss: 0.0060
Epoch [52/200], Step [200/1200], Loss: 0.0009
Epoch [52/200], Step [300/1200], Loss: 0.0055
Epoch [52/200], Step [400/1200], Loss: 0.0050
Epoch [52/200], Step [500/1200], Loss: 0.0443
Epoch [52/200], Step [600/1200], Loss: 0.0096
Epoch [52/200], Step [700/1200], Loss: 0.0570
Epoch [52/200], Step [800/1200], Loss: 0.0239
Epoch [52/200], Step [900/1200], Loss: 0.0429
Epoch [52/200], Step [1000/1200], Loss: 0.0025
Epoch [52/200], Step [1100/1200], Loss: 0.0111
Epoch [52/200], Step [1200/1200], Loss: 0.0007
Epoch [53/200], Step [100/1200], Loss: 0.0001
Epoch [53/200], Step [200/1200], Loss: 0.0009
Epoch [53/200], Step [300/1200], Loss: 0.0062
Epoch [53/200], Step [400/1200], Loss: 0.0003
Epoch [53/200], Step [500/1200], Loss: 0.0236
Epoch [53/200], Step [600/1200], Loss: 0.0003
Epoch [53/200], Step [700/1200], Loss: 0.0416
Epoch [53/200], Step [800/1200], Loss: 0.0007
Epoch [53/200], Step [900/1200], Loss: 0.0208
Epoch [53/200], Step [1000/1200], Loss: 0.0078
Epoch [53/200], Step [1100/1200], Loss: 0.0020
Epoch [53/200], Step [1200/1200], Loss: 0.0028
Epoch [54/200], Step [100/1200], Loss: 0.0010
Epoch [54/200], Step [200/1200], Loss: 0.1186
Epoch [54/200], Step [300/1200], Loss: 0.0102
Epoch [54/200], Step [400/1200], Loss: 0.0358
Epoch [54/200], Step [500/1200], Loss: 0.0059
Epoch [54/200], Step [600/1200], Loss: 0.0004
Epoch [54/200], Step [700/1200], Loss: 0.0183
Epoch [54/200], Step [800/1200], Loss: 0.0273
Epoch [54/200], Step [900/1200], Loss: 0.0130
Epoch [54/200], Step [1000/1200], Loss: 0.0026
Epoch [54/200], Step [1100/1200], Loss: 0.0004
Epoch [54/200], Step [1200/1200], Loss: 0.0258
Epoch [55/200], Step [100/1200], Loss: 0.0067
Epoch [55/200], Step [200/1200], Loss: 0.0015
Epoch [55/200], Step [300/1200], Loss: 0.0310
Epoch [55/200], Step [400/1200], Loss: 0.0005
Epoch [55/200], Step [500/1200], Loss: 0.0023
Epoch [55/200], Step [600/1200], Loss: 0.0222
Epoch [55/200], Step [700/1200], Loss: 0.0247
Epoch [55/200], Step [800/1200], Loss: 0.0000
Epoch [55/200], Step [900/1200], Loss: 0.0311
Epoch [55/200], Step [1000/1200], Loss: 0.0001
Epoch [55/200], Step [1100/1200], Loss: 0.0016
Epoch [55/200], Step [1200/1200], Loss: 0.0006
Epoch [56/200], Step [100/1200], Loss: 0.0524
Epoch [56/200], Step [200/1200], Loss: 0.0175
Epoch [56/200], Step [300/1200], Loss: 0.0108
Epoch [56/200], Step [400/1200], Loss: 0.0014
Epoch [56/200], Step [500/1200], Loss: 0.0027
Epoch [56/200], Step [600/1200], Loss: 0.0027
Epoch [56/200], Step [700/1200], Loss: 0.0327
Epoch [56/200], Step [800/1200], Loss: 0.0058
Epoch [56/200], Step [900/1200], Loss: 0.0047
Epoch [56/200], Step [1000/1200], Loss: 0.0061
Epoch [56/200], Step [1100/1200], Loss: 0.0205
Epoch [56/200], Step [1200/1200], Loss: 0.0002
Epoch [57/200], Step [100/1200], Loss: 0.0022
Epoch [57/200], Step [200/1200], Loss: 0.0027
Epoch [57/200], Step [300/1200], Loss: 0.0139
Epoch [57/200], Step [400/1200], Loss: 0.0091
Epoch [57/200], Step [500/1200], Loss: 0.0025
Epoch [57/200], Step [600/1200], Loss: 0.0004
Epoch [57/200], Step [700/1200], Loss: 0.0334
Epoch [57/200], Step [800/1200], Loss: 0.0596
Epoch [57/200], Step [900/1200], Loss: 0.0004
Epoch [57/200], Step [1000/1200], Loss: 0.0016
Epoch [57/200], Step [1100/1200], Loss: 0.0011
Epoch [57/200], Step [1200/1200], Loss: 0.0044
Epoch [58/200], Step [100/1200], Loss: 0.0025
Epoch [58/200], Step [200/1200], Loss: 0.0006
Epoch [58/200], Step [300/1200], Loss: 0.0294
Epoch [58/200], Step [400/1200], Loss: 0.0094
Epoch [58/200], Step [500/1200], Loss: 0.0012
Epoch [58/200], Step [600/1200], Loss: 0.0001
Epoch [58/200], Step [700/1200], Loss: 0.0178
Epoch [58/200], Step [800/1200], Loss: 0.0004
Epoch [58/200], Step [900/1200], Loss: 0.0163
Epoch [58/200], Step [1000/1200], Loss: 0.0380
Epoch [58/200], Step [1100/1200], Loss: 0.0063
Epoch [58/200], Step [1200/1200], Loss: 0.0067
Epoch [59/200], Step [100/1200], Loss: 0.0007
Epoch [59/200], Step [200/1200], Loss: 0.0005
Epoch [59/200], Step [300/1200], Loss: 0.0051
Epoch [59/200], Step [400/1200], Loss: 0.0388
Epoch [59/200], Step [500/1200], Loss: 0.0031
Epoch [59/200], Step [600/1200], Loss: 0.0260
Epoch [59/200], Step [700/1200], Loss: 0.0911
Epoch [59/200], Step [800/1200], Loss: 0.0152
Epoch [59/200], Step [900/1200], Loss: 0.0005
Epoch [59/200], Step [1000/1200], Loss: 0.0007
Epoch [59/200], Step [1100/1200], Loss: 0.1040
Epoch [59/200], Step [1200/1200], Loss: 0.0542
Epoch [60/200], Step [100/1200], Loss: 0.0001
Epoch [60/200], Step [200/1200], Loss: 0.0017
Epoch [60/200], Step [300/1200], Loss: 0.0095
Epoch [60/200], Step [400/1200], Loss: 0.0007
Epoch [60/200], Step [500/1200], Loss: 0.0004
Epoch [60/200], Step [600/1200], Loss: 0.0020
Epoch [60/200], Step [700/1200], Loss: 0.0044
Epoch [60/200], Step [800/1200], Loss: 0.0029
Epoch [60/200], Step [900/1200], Loss: 0.0438
Epoch [60/200], Step [1000/1200], Loss: 0.0013
Epoch [60/200], Step [1100/1200], Loss: 0.0139
Epoch [60/200], Step [1200/1200], Loss: 0.0292
Epoch [61/200], Step [100/1200], Loss: 0.0735
Epoch [61/200], Step [200/1200], Loss: 0.0012
Epoch [61/200], Step [300/1200], Loss: 0.0166
Epoch [61/200], Step [400/1200], Loss: 0.0011
Epoch [61/200], Step [500/1200], Loss: 0.0440
Epoch [61/200], Step [600/1200], Loss: 0.0029
Epoch [61/200], Step [700/1200], Loss: 0.0085
Epoch [61/200], Step [800/1200], Loss: 0.0876
Epoch [61/200], Step [900/1200], Loss: 0.0000
Epoch [61/200], Step [1000/1200], Loss: 0.0059
Epoch [61/200], Step [1100/1200], Loss: 0.0132
Epoch [61/200], Step [1200/1200], Loss: 0.0002
Epoch [62/200], Step [100/1200], Loss: 0.1316
Epoch [62/200], Step [200/1200], Loss: 0.0031
Epoch [62/200], Step [300/1200], Loss: 0.0002
Epoch [62/200], Step [400/1200], Loss: 0.0003
Epoch [62/200], Step [500/1200], Loss: 0.0055
Epoch [62/200], Step [600/1200], Loss: 0.0355
Epoch [62/200], Step [700/1200], Loss: 0.0020
Epoch [62/200], Step [800/1200], Loss: 0.0020
Epoch [62/200], Step [900/1200], Loss: 0.0008
Epoch [62/200], Step [1000/1200], Loss: 0.0073
Epoch [62/200], Step [1100/1200], Loss: 0.0191
Epoch [62/200], Step [1200/1200], Loss: 0.0160
Epoch [63/200], Step [100/1200], Loss: 0.0008
Epoch [63/200], Step [200/1200], Loss: 0.0002
Epoch [63/200], Step [300/1200], Loss: 0.0004
Epoch [63/200], Step [400/1200], Loss: 0.0002
Epoch [63/200], Step [500/1200], Loss: 0.0030
Epoch [63/200], Step [600/1200], Loss: 0.0002
Epoch [63/200], Step [700/1200], Loss: 0.0026
Epoch [63/200], Step [800/1200], Loss: 0.0035
Epoch [63/200], Step [900/1200], Loss: 0.0144
Epoch [63/200], Step [1000/1200], Loss: 0.0387
Epoch [63/200], Step [1100/1200], Loss: 0.0005
Epoch [63/200], Step [1200/1200], Loss: 0.0316
Epoch [64/200], Step [100/1200], Loss: 0.0016
Epoch [64/200], Step [200/1200], Loss: 0.0034
Epoch [64/200], Step [300/1200], Loss: 0.0005
Epoch [64/200], Step [400/1200], Loss: 0.0000
Epoch [64/200], Step [500/1200], Loss: 0.0041
Epoch [64/200], Step [600/1200], Loss: 0.0013
Epoch [64/200], Step [700/1200], Loss: 0.0000
Epoch [64/200], Step [800/1200], Loss: 0.0133
Epoch [64/200], Step [900/1200], Loss: 0.0131
Epoch [64/200], Step [1000/1200], Loss: 0.0070
Epoch [64/200], Step [1100/1200], Loss: 0.0446
Epoch [64/200], Step [1200/1200], Loss: 0.0013
Epoch [65/200], Step [100/1200], Loss: 0.0485
Epoch [65/200], Step [200/1200], Loss: 0.0003
Epoch [65/200], Step [300/1200], Loss: 0.0086
Epoch [65/200], Step [400/1200], Loss: 0.0001
Epoch [65/200], Step [500/1200], Loss: 0.0484
Epoch [65/200], Step [600/1200], Loss: 0.0007
Epoch [65/200], Step [700/1200], Loss: 0.0010
Epoch [65/200], Step [800/1200], Loss: 0.0365
Epoch [65/200], Step [900/1200], Loss: 0.0000
Epoch [65/200], Step [1000/1200], Loss: 0.0002
Epoch [65/200], Step [1100/1200], Loss: 0.0004
Epoch [65/200], Step [1200/1200], Loss: 0.0036
Epoch [66/200], Step [100/1200], Loss: 0.0006
Epoch [66/200], Step [200/1200], Loss: 0.0001
Epoch [66/200], Step [300/1200], Loss: 0.0324
Epoch [66/200], Step [400/1200], Loss: 0.0142
Epoch [66/200], Step [500/1200], Loss: 0.0010
Epoch [66/200], Step [600/1200], Loss: 0.0113
Epoch [66/200], Step [700/1200], Loss: 0.0040
Epoch [66/200], Step [800/1200], Loss: 0.1209
Epoch [66/200], Step [900/1200], Loss: 0.0021
Epoch [66/200], Step [1000/1200], Loss: 0.0493
Epoch [66/200], Step [1100/1200], Loss: 0.0150
Epoch [66/200], Step [1200/1200], Loss: 0.0001
Epoch [67/200], Step [100/1200], Loss: 0.0065
Epoch [67/200], Step [200/1200], Loss: 0.0001
Epoch [67/200], Step [300/1200], Loss: 0.0758
Epoch [67/200], Step [400/1200], Loss: 0.0054
Epoch [67/200], Step [500/1200], Loss: 0.0004
Epoch [67/200], Step [600/1200], Loss: 0.0060
Epoch [67/200], Step [700/1200], Loss: 0.0012
Epoch [67/200], Step [800/1200], Loss: 0.0003
Epoch [67/200], Step [900/1200], Loss: 0.0142
Epoch [67/200], Step [1000/1200], Loss: 0.0001
Epoch [67/200], Step [1100/1200], Loss: 0.0012
Epoch [67/200], Step [1200/1200], Loss: 0.0010
Epoch [68/200], Step [100/1200], Loss: 0.0011
Epoch [68/200], Step [200/1200], Loss: 0.0093
Epoch [68/200], Step [300/1200], Loss: 0.0013
Epoch [68/200], Step [400/1200], Loss: 0.0046
Epoch [68/200], Step [500/1200], Loss: 0.0129
Epoch [68/200], Step [600/1200], Loss: 0.0006
Epoch [68/200], Step [700/1200], Loss: 0.0086
Epoch [68/200], Step [800/1200], Loss: 0.0294
Epoch [68/200], Step [900/1200], Loss: 0.0011
Epoch [68/200], Step [1000/1200], Loss: 0.0596
Epoch [68/200], Step [1100/1200], Loss: 0.0022
Epoch [68/200], Step [1200/1200], Loss: 0.0015
Epoch [69/200], Step [100/1200], Loss: 0.0083
Epoch [69/200], Step [200/1200], Loss: 0.0004
Epoch [69/200], Step [300/1200], Loss: 0.0159
Epoch [69/200], Step [400/1200], Loss: 0.0129
Epoch [69/200], Step [500/1200], Loss: 0.0052
Epoch [69/200], Step [600/1200], Loss: 0.0001
Epoch [69/200], Step [700/1200], Loss: 0.0009
Epoch [69/200], Step [800/1200], Loss: 0.0234
Epoch [69/200], Step [900/1200], Loss: 0.0153
Epoch [69/200], Step [1000/1200], Loss: 0.0001
Epoch [69/200], Step [1100/1200], Loss: 0.0006
Epoch [69/200], Step [1200/1200], Loss: 0.0000
Epoch [70/200], Step [100/1200], Loss: 0.0053
Epoch [70/200], Step [200/1200], Loss: 0.0062
Epoch [70/200], Step [300/1200], Loss: 0.0000
Epoch [70/200], Step [400/1200], Loss: 0.0017
Epoch [70/200], Step [500/1200], Loss: 0.0672
Epoch [70/200], Step [600/1200], Loss: 0.0020
Epoch [70/200], Step [700/1200], Loss: 0.0001
Epoch [70/200], Step [800/1200], Loss: 0.0053
Epoch [70/200], Step [900/1200], Loss: 0.0002
Epoch [70/200], Step [1000/1200], Loss: 0.0010
Epoch [70/200], Step [1100/1200], Loss: 0.0004
Epoch [70/200], Step [1200/1200], Loss: 0.0018
Epoch [71/200], Step [100/1200], Loss: 0.0014
Epoch [71/200], Step [200/1200], Loss: 0.0263
Epoch [71/200], Step [300/1200], Loss: 0.0006
Epoch [71/200], Step [400/1200], Loss: 0.0021
Epoch [71/200], Step [500/1200], Loss: 0.0004
Epoch [71/200], Step [600/1200], Loss: 0.0030
Epoch [71/200], Step [700/1200], Loss: 0.0059
Epoch [71/200], Step [800/1200], Loss: 0.0603
Epoch [71/200], Step [900/1200], Loss: 0.0003
Epoch [71/200], Step [1000/1200], Loss: 0.0003
Epoch [71/200], Step [1100/1200], Loss: 0.0105
Epoch [71/200], Step [1200/1200], Loss: 0.0011
Epoch [72/200], Step [100/1200], Loss: 0.0002
Epoch [72/200], Step [200/1200], Loss: 0.0001
Epoch [72/200], Step [300/1200], Loss: 0.0031
Epoch [72/200], Step [400/1200], Loss: 0.0001
Epoch [72/200], Step [500/1200], Loss: 0.0000
Epoch [72/200], Step [600/1200], Loss: 0.0000
Epoch [72/200], Step [700/1200], Loss: 0.0022
Epoch [72/200], Step [800/1200], Loss: 0.0199
Epoch [72/200], Step [900/1200], Loss: 0.0062
Epoch [72/200], Step [1000/1200], Loss: 0.0036
Epoch [72/200], Step [1100/1200], Loss: 0.0000
Epoch [72/200], Step [1200/1200], Loss: 0.0008
Epoch [73/200], Step [100/1200], Loss: 0.0003
Epoch [73/200], Step [200/1200], Loss: 0.0001
Epoch [73/200], Step [300/1200], Loss: 0.0190
Epoch [73/200], Step [400/1200], Loss: 0.0627
Epoch [73/200], Step [500/1200], Loss: 0.0009
Epoch [73/200], Step [600/1200], Loss: 0.0218
Epoch [73/200], Step [700/1200], Loss: 0.0001
Epoch [73/200], Step [800/1200], Loss: 0.0050
Epoch [73/200], Step [900/1200], Loss: 0.0171
Epoch [73/200], Step [1000/1200], Loss: 0.0017
Epoch [73/200], Step [1100/1200], Loss: 0.0057
Epoch [73/200], Step [1200/1200], Loss: 0.0007
Epoch [74/200], Step [100/1200], Loss: 0.0003
Epoch [74/200], Step [200/1200], Loss: 0.0208
Epoch [74/200], Step [300/1200], Loss: 0.0003
Epoch [74/200], Step [400/1200], Loss: 0.0002
Epoch [74/200], Step [500/1200], Loss: 0.0171
Epoch [74/200], Step [600/1200], Loss: 0.0003
Epoch [74/200], Step [700/1200], Loss: 0.0474
Epoch [74/200], Step [800/1200], Loss: 0.0012
Epoch [74/200], Step [900/1200], Loss: 0.0008
Epoch [74/200], Step [1000/1200], Loss: 0.0000
Epoch [74/200], Step [1100/1200], Loss: 0.0008
Epoch [74/200], Step [1200/1200], Loss: 0.0105
Epoch [75/200], Step [100/1200], Loss: 0.0548
Epoch [75/200], Step [200/1200], Loss: 0.0009
Epoch [75/200], Step [300/1200], Loss: 0.0761
Epoch [75/200], Step [400/1200], Loss: 0.0812
Epoch [75/200], Step [500/1200], Loss: 0.0052
Epoch [75/200], Step [600/1200], Loss: 0.0028
Epoch [75/200], Step [700/1200], Loss: 0.0001
Epoch [75/200], Step [800/1200], Loss: 0.0000
Epoch [75/200], Step [900/1200], Loss: 0.0000
Epoch [75/200], Step [1000/1200], Loss: 0.0028
Epoch [75/200], Step [1100/1200], Loss: 0.0094
Epoch [75/200], Step [1200/1200], Loss: 0.0164
Epoch [76/200], Step [100/1200], Loss: 0.0056
Epoch [76/200], Step [200/1200], Loss: 0.0584
Epoch [76/200], Step [300/1200], Loss: 0.0032
Epoch [76/200], Step [400/1200], Loss: 0.0044
Epoch [76/200], Step [500/1200], Loss: 0.0020
Epoch [76/200], Step [600/1200], Loss: 0.0014
Epoch [76/200], Step [700/1200], Loss: 0.0010
Epoch [76/200], Step [800/1200], Loss: 0.0061
Epoch [76/200], Step [900/1200], Loss: 0.0000
Epoch [76/200], Step [1000/1200], Loss: 0.0000
Epoch [76/200], Step [1100/1200], Loss: 0.0008
Epoch [76/200], Step [1200/1200], Loss: 0.0312
Epoch [77/200], Step [100/1200], Loss: 0.0026
Epoch [77/200], Step [200/1200], Loss: 0.0089
Epoch [77/200], Step [300/1200], Loss: 0.0011
Epoch [77/200], Step [400/1200], Loss: 0.0002
Epoch [77/200], Step [500/1200], Loss: 0.0000
Epoch [77/200], Step [600/1200], Loss: 0.0004
Epoch [77/200], Step [700/1200], Loss: 0.0001
Epoch [77/200], Step [800/1200], Loss: 0.0010
Epoch [77/200], Step [900/1200], Loss: 0.0859
Epoch [77/200], Step [1000/1200], Loss: 0.0091
Epoch [77/200], Step [1100/1200], Loss: 0.0006
Epoch [77/200], Step [1200/1200], Loss: 0.0715
Epoch [78/200], Step [100/1200], Loss: 0.0026
Epoch [78/200], Step [200/1200], Loss: 0.0000
Epoch [78/200], Step [300/1200], Loss: 0.0025
Epoch [78/200], Step [400/1200], Loss: 0.0041
Epoch [78/200], Step [500/1200], Loss: 0.0006
Epoch [78/200], Step [600/1200], Loss: 0.0001
Epoch [78/200], Step [700/1200], Loss: 0.0006
Epoch [78/200], Step [800/1200], Loss: 0.0185
Epoch [78/200], Step [900/1200], Loss: 0.0005
Epoch [78/200], Step [1000/1200], Loss: 0.0093
Epoch [78/200], Step [1100/1200], Loss: 0.0000
Epoch [78/200], Step [1200/1200], Loss: 0.0018
Epoch [79/200], Step [100/1200], Loss: 0.0005
Epoch [79/200], Step [200/1200], Loss: 0.0006
Epoch [79/200], Step [300/1200], Loss: 0.0003
Epoch [79/200], Step [400/1200], Loss: 0.0219
Epoch [79/200], Step [500/1200], Loss: 0.0001
Epoch [79/200], Step [600/1200], Loss: 0.0078
Epoch [79/200], Step [700/1200], Loss: 0.0026
Epoch [79/200], Step [800/1200], Loss: 0.0034
Epoch [79/200], Step [900/1200], Loss: 0.0083
Epoch [79/200], Step [1000/1200], Loss: 0.0016
Epoch [79/200], Step [1100/1200], Loss: 0.0033
Epoch [79/200], Step [1200/1200], Loss: 0.0671
Epoch [80/200], Step [100/1200], Loss: 0.0007
Epoch [80/200], Step [200/1200], Loss: 0.0055
Epoch [80/200], Step [300/1200], Loss: 0.0019
Epoch [80/200], Step [400/1200], Loss: 0.0027
Epoch [80/200], Step [500/1200], Loss: 0.0001
Epoch [80/200], Step [600/1200], Loss: 0.0000
Epoch [80/200], Step [700/1200], Loss: 0.0001
Epoch [80/200], Step [800/1200], Loss: 0.0021
Epoch [80/200], Step [900/1200], Loss: 0.0031
Epoch [80/200], Step [1000/1200], Loss: 0.0006
Epoch [80/200], Step [1100/1200], Loss: 0.0078
Epoch [80/200], Step [1200/1200], Loss: 0.0041
Epoch [81/200], Step [100/1200], Loss: 0.0010
Epoch [81/200], Step [200/1200], Loss: 0.0002
Epoch [81/200], Step [300/1200], Loss: 0.0808
Epoch [81/200], Step [400/1200], Loss: 0.0025
Epoch [81/200], Step [500/1200], Loss: 0.0021
Epoch [81/200], Step [600/1200], Loss: 0.0005
Epoch [81/200], Step [700/1200], Loss: 0.0011
Epoch [81/200], Step [800/1200], Loss: 0.0004
Epoch [81/200], Step [900/1200], Loss: 0.0004
Epoch [81/200], Step [1000/1200], Loss: 0.0180
Epoch [81/200], Step [1100/1200], Loss: 0.0211
Epoch [81/200], Step [1200/1200], Loss: 0.0007
Epoch [82/200], Step [100/1200], Loss: 0.0007
Epoch [82/200], Step [200/1200], Loss: 0.0003
Epoch [82/200], Step [300/1200], Loss: 0.0151
Epoch [82/200], Step [400/1200], Loss: 0.0066
Epoch [82/200], Step [500/1200], Loss: 0.0021
Epoch [82/200], Step [600/1200], Loss: 0.0028
Epoch [82/200], Step [700/1200], Loss: 0.0041
Epoch [82/200], Step [800/1200], Loss: 0.1265
Epoch [82/200], Step [900/1200], Loss: 0.0001
Epoch [82/200], Step [1000/1200], Loss: 0.0010
Epoch [82/200], Step [1100/1200], Loss: 0.0035
Epoch [82/200], Step [1200/1200], Loss: 0.0052
Epoch [83/200], Step [100/1200], Loss: 0.0003
Epoch [83/200], Step [200/1200], Loss: 0.0000
Epoch [83/200], Step [300/1200], Loss: 0.0067
Epoch [83/200], Step [400/1200], Loss: 0.0002
Epoch [83/200], Step [500/1200], Loss: 0.0003
Epoch [83/200], Step [600/1200], Loss: 0.0469
Epoch [83/200], Step [700/1200], Loss: 0.0115
Epoch [83/200], Step [800/1200], Loss: 0.0003
Epoch [83/200], Step [900/1200], Loss: 0.0003
Epoch [83/200], Step [1000/1200], Loss: 0.0002
Epoch [83/200], Step [1100/1200], Loss: 0.0049
Epoch [83/200], Step [1200/1200], Loss: 0.0200
Epoch [84/200], Step [100/1200], Loss: 0.0010
Epoch [84/200], Step [200/1200], Loss: 0.0009
Epoch [84/200], Step [300/1200], Loss: 0.0009
Epoch [84/200], Step [400/1200], Loss: 0.0006
Epoch [84/200], Step [500/1200], Loss: 0.0006
Epoch [84/200], Step [600/1200], Loss: 0.0366
Epoch [84/200], Step [700/1200], Loss: 0.0020
Epoch [84/200], Step [800/1200], Loss: 0.0002
Epoch [84/200], Step [900/1200], Loss: 0.0000
Epoch [84/200], Step [1000/1200], Loss: 0.0117
Epoch [84/200], Step [1100/1200], Loss: 0.0037
Epoch [84/200], Step [1200/1200], Loss: 0.1137
Epoch [85/200], Step [100/1200], Loss: 0.0002
Epoch [85/200], Step [200/1200], Loss: 0.0025
Epoch [85/200], Step [300/1200], Loss: 0.0000
Epoch [85/200], Step [400/1200], Loss: 0.0008
Epoch [85/200], Step [500/1200], Loss: 0.0018
Epoch [85/200], Step [600/1200], Loss: 0.0002
Epoch [85/200], Step [700/1200], Loss: 0.0733
Epoch [85/200], Step [800/1200], Loss: 0.0015
Epoch [85/200], Step [900/1200], Loss: 0.0002
Epoch [85/200], Step [1000/1200], Loss: 0.0056
Epoch [85/200], Step [1100/1200], Loss: 0.0007
Epoch [85/200], Step [1200/1200], Loss: 0.0049
Epoch [86/200], Step [100/1200], Loss: 0.0000
Epoch [86/200], Step [200/1200], Loss: 0.0000
Epoch [86/200], Step [300/1200], Loss: 0.0012
Epoch [86/200], Step [400/1200], Loss: 0.0026
Epoch [86/200], Step [500/1200], Loss: 0.0008
Epoch [86/200], Step [600/1200], Loss: 0.0002
Epoch [86/200], Step [700/1200], Loss: 0.0045
Epoch [86/200], Step [800/1200], Loss: 0.0007
Epoch [86/200], Step [900/1200], Loss: 0.0112
Epoch [86/200], Step [1000/1200], Loss: 0.0103
Epoch [86/200], Step [1100/1200], Loss: 0.0108
Epoch [86/200], Step [1200/1200], Loss: 0.0002
Epoch [87/200], Step [100/1200], Loss: 0.0062
Epoch [87/200], Step [200/1200], Loss: 0.0001
Epoch [87/200], Step [300/1200], Loss: 0.0095
Epoch [87/200], Step [400/1200], Loss: 0.0006
Epoch [87/200], Step [500/1200], Loss: 0.0001
Epoch [87/200], Step [600/1200], Loss: 0.0001
Epoch [87/200], Step [700/1200], Loss: 0.0000
Epoch [87/200], Step [800/1200], Loss: 0.0001
Epoch [87/200], Step [900/1200], Loss: 0.0004
Epoch [87/200], Step [1000/1200], Loss: 0.0129
Epoch [87/200], Step [1100/1200], Loss: 0.0001
Epoch [87/200], Step [1200/1200], Loss: 0.0028
Epoch [88/200], Step [100/1200], Loss: 0.0020
Epoch [88/200], Step [200/1200], Loss: 0.0299
Epoch [88/200], Step [300/1200], Loss: 0.0315
Epoch [88/200], Step [400/1200], Loss: 0.0012
Epoch [88/200], Step [500/1200], Loss: 0.0036
Epoch [88/200], Step [600/1200], Loss: 0.0012
Epoch [88/200], Step [700/1200], Loss: 0.0329
Epoch [88/200], Step [800/1200], Loss: 0.0005
Epoch [88/200], Step [900/1200], Loss: 0.0020
Epoch [88/200], Step [1000/1200], Loss: 0.0006
Epoch [88/200], Step [1100/1200], Loss: 0.0005
Epoch [88/200], Step [1200/1200], Loss: 0.0016
Epoch [89/200], Step [100/1200], Loss: 0.0224
Epoch [89/200], Step [200/1200], Loss: 0.0000
Epoch [89/200], Step [300/1200], Loss: 0.0000
Epoch [89/200], Step [400/1200], Loss: 0.0002
Epoch [89/200], Step [500/1200], Loss: 0.0005
Epoch [89/200], Step [600/1200], Loss: 0.0035
Epoch [89/200], Step [700/1200], Loss: 0.0008
Epoch [89/200], Step [800/1200], Loss: 0.0087
Epoch [89/200], Step [900/1200], Loss: 0.0011
Epoch [89/200], Step [1000/1200], Loss: 0.0000
Epoch [89/200], Step [1100/1200], Loss: 0.0005
Epoch [89/200], Step [1200/1200], Loss: 0.0688
Epoch [90/200], Step [100/1200], Loss: 0.0003
Epoch [90/200], Step [200/1200], Loss: 0.0004
Epoch [90/200], Step [300/1200], Loss: 0.0021
Epoch [90/200], Step [400/1200], Loss: 0.0005
Epoch [90/200], Step [500/1200], Loss: 0.0011
Epoch [90/200], Step [600/1200], Loss: 0.0002
Epoch [90/200], Step [700/1200], Loss: 0.0000
Epoch [90/200], Step [800/1200], Loss: 0.0013
Epoch [90/200], Step [900/1200], Loss: 0.0424
Epoch [90/200], Step [1000/1200], Loss: 0.0014
Epoch [90/200], Step [1100/1200], Loss: 0.0002
Epoch [90/200], Step [1200/1200], Loss: 0.0001
Epoch [91/200], Step [100/1200], Loss: 0.0715
Epoch [91/200], Step [200/1200], Loss: 0.0073
Epoch [91/200], Step [300/1200], Loss: 0.0020
Epoch [91/200], Step [400/1200], Loss: 0.0083
Epoch [91/200], Step [500/1200], Loss: 0.0003
Epoch [91/200], Step [600/1200], Loss: 0.0001
Epoch [91/200], Step [700/1200], Loss: 0.0030
Epoch [91/200], Step [800/1200], Loss: 0.0133
Epoch [91/200], Step [900/1200], Loss: 0.0001
Epoch [91/200], Step [1000/1200], Loss: 0.0002
Epoch [91/200], Step [1100/1200], Loss: 0.0013
Epoch [91/200], Step [1200/1200], Loss: 0.0001
Epoch [92/200], Step [100/1200], Loss: 0.0000
Epoch [92/200], Step [200/1200], Loss: 0.0001
Epoch [92/200], Step [300/1200], Loss: 0.0007
Epoch [92/200], Step [400/1200], Loss: 0.0079
Epoch [92/200], Step [500/1200], Loss: 0.0071
Epoch [92/200], Step [600/1200], Loss: 0.0069
Epoch [92/200], Step [700/1200], Loss: 0.0005
Epoch [92/200], Step [800/1200], Loss: 0.0080
Epoch [92/200], Step [900/1200], Loss: 0.0041
Epoch [92/200], Step [1000/1200], Loss: 0.0093
Epoch [92/200], Step [1100/1200], Loss: 0.0012
Epoch [92/200], Step [1200/1200], Loss: 0.0001
Epoch [93/200], Step [100/1200], Loss: 0.0001
Epoch [93/200], Step [200/1200], Loss: 0.0004
Epoch [93/200], Step [300/1200], Loss: 0.0000
Epoch [93/200], Step [400/1200], Loss: 0.0010
Epoch [93/200], Step [500/1200], Loss: 0.0004
Epoch [93/200], Step [600/1200], Loss: 0.0000
Epoch [93/200], Step [700/1200], Loss: 0.0002
Epoch [93/200], Step [800/1200], Loss: 0.0005
Epoch [93/200], Step [900/1200], Loss: 0.0020
Epoch [93/200], Step [1000/1200], Loss: 0.0061
Epoch [93/200], Step [1100/1200], Loss: 0.0164
Epoch [93/200], Step [1200/1200], Loss: 0.0003
Epoch [94/200], Step [100/1200], Loss: 0.0274
Epoch [94/200], Step [200/1200], Loss: 0.0001
Epoch [94/200], Step [300/1200], Loss: 0.0008
Epoch [94/200], Step [400/1200], Loss: 0.0332
Epoch [94/200], Step [500/1200], Loss: 0.0024
Epoch [94/200], Step [600/1200], Loss: 0.0032
Epoch [94/200], Step [700/1200], Loss: 0.0002
Epoch [94/200], Step [800/1200], Loss: 0.0449
Epoch [94/200], Step [900/1200], Loss: 0.0026
Epoch [94/200], Step [1000/1200], Loss: 0.0986
Epoch [94/200], Step [1100/1200], Loss: 0.0036
Epoch [94/200], Step [1200/1200], Loss: 0.0062
Epoch [95/200], Step [100/1200], Loss: 0.0084
Epoch [95/200], Step [200/1200], Loss: 0.0002
Epoch [95/200], Step [300/1200], Loss: 0.0005
Epoch [95/200], Step [400/1200], Loss: 0.0034
Epoch [95/200], Step [500/1200], Loss: 0.0814
Epoch [95/200], Step [600/1200], Loss: 0.0104
Epoch [95/200], Step [700/1200], Loss: 0.0006
Epoch [95/200], Step [800/1200], Loss: 0.0021
Epoch [95/200], Step [900/1200], Loss: 0.0020
Epoch [95/200], Step [1000/1200], Loss: 0.0000
Epoch [95/200], Step [1100/1200], Loss: 0.0007
Epoch [95/200], Step [1200/1200], Loss: 0.0036
Epoch [96/200], Step [100/1200], Loss: 0.0077
Epoch [96/200], Step [200/1200], Loss: 0.0223
Epoch [96/200], Step [300/1200], Loss: 0.0000
Epoch [96/200], Step [400/1200], Loss: 0.0282
Epoch [96/200], Step [500/1200], Loss: 0.0011
Epoch [96/200], Step [600/1200], Loss: 0.0165
Epoch [96/200], Step [700/1200], Loss: 0.0009
Epoch [96/200], Step [800/1200], Loss: 0.0013
Epoch [96/200], Step [900/1200], Loss: 0.0001
Epoch [96/200], Step [1000/1200], Loss: 0.0006
Epoch [96/200], Step [1100/1200], Loss: 0.0005
Epoch [96/200], Step [1200/1200], Loss: 0.0039
Epoch [97/200], Step [100/1200], Loss: 0.0023
Epoch [97/200], Step [200/1200], Loss: 0.0002
Epoch [97/200], Step [300/1200], Loss: 0.0024
Epoch [97/200], Step [400/1200], Loss: 0.0101
Epoch [97/200], Step [500/1200], Loss: 0.0098
Epoch [97/200], Step [600/1200], Loss: 0.0414
Epoch [97/200], Step [700/1200], Loss: 0.0011
Epoch [97/200], Step [800/1200], Loss: 0.0033
Epoch [97/200], Step [900/1200], Loss: 0.0007
Epoch [97/200], Step [1000/1200], Loss: 0.0002
Epoch [97/200], Step [1100/1200], Loss: 0.0002
Epoch [97/200], Step [1200/1200], Loss: 0.0009
Epoch [98/200], Step [100/1200], Loss: 0.0000
Epoch [98/200], Step [200/1200], Loss: 0.0003
Epoch [98/200], Step [300/1200], Loss: 0.0130
Epoch [98/200], Step [400/1200], Loss: 0.0258
Epoch [98/200], Step [500/1200], Loss: 0.0017
Epoch [98/200], Step [600/1200], Loss: 0.0002
Epoch [98/200], Step [700/1200], Loss: 0.0006
Epoch [98/200], Step [800/1200], Loss: 0.0006
Epoch [98/200], Step [900/1200], Loss: 0.0082
Epoch [98/200], Step [1000/1200], Loss: 0.0035
Epoch [98/200], Step [1100/1200], Loss: 0.0117
Epoch [98/200], Step [1200/1200], Loss: 0.0560
Epoch [99/200], Step [100/1200], Loss: 0.0008
Epoch [99/200], Step [200/1200], Loss: 0.0003
Epoch [99/200], Step [300/1200], Loss: 0.0027
Epoch [99/200], Step [400/1200], Loss: 0.0043
Epoch [99/200], Step [500/1200], Loss: 0.0000
Epoch [99/200], Step [600/1200], Loss: 0.0006
Epoch [99/200], Step [700/1200], Loss: 0.0002
Epoch [99/200], Step [800/1200], Loss: 0.0002
Epoch [99/200], Step [900/1200], Loss: 0.0052
Epoch [99/200], Step [1000/1200], Loss: 0.0010
Epoch [99/200], Step [1100/1200], Loss: 0.0002
Epoch [99/200], Step [1200/1200], Loss: 0.0003
Epoch [100/200], Step [100/1200], Loss: 0.0002
Epoch [100/200], Step [200/1200], Loss: 0.0007
Epoch [100/200], Step [300/1200], Loss: 0.0002
Epoch [100/200], Step [400/1200], Loss: 0.0012
Epoch [100/200], Step [500/1200], Loss: 0.0049
Epoch [100/200], Step [600/1200], Loss: 0.0002
Epoch [100/200], Step [700/1200], Loss: 0.0003
Epoch [100/200], Step [800/1200], Loss: 0.0000
Epoch [100/200], Step [900/1200], Loss: 0.0001
Epoch [100/200], Step [1000/1200], Loss: 0.0003
Epoch [100/200], Step [1100/1200], Loss: 0.0006
Epoch [100/200], Step [1200/1200], Loss: 0.0028
Epoch [101/200], Step [100/1200], Loss: 0.0000
Epoch [101/200], Step [200/1200], Loss: 0.0305
Epoch [101/200], Step [300/1200], Loss: 0.0012
Epoch [101/200], Step [400/1200], Loss: 0.0001
Epoch [101/200], Step [500/1200], Loss: 0.0014
Epoch [101/200], Step [600/1200], Loss: 0.0403
Epoch [101/200], Step [700/1200], Loss: 0.0006
Epoch [101/200], Step [800/1200], Loss: 0.0033
Epoch [101/200], Step [900/1200], Loss: 0.0001
Epoch [101/200], Step [1000/1200], Loss: 0.0001
Epoch [101/200], Step [1100/1200], Loss: 0.0111
Epoch [101/200], Step [1200/1200], Loss: 0.0003
Epoch [102/200], Step [100/1200], Loss: 0.0104
Epoch [102/200], Step [200/1200], Loss: 0.0002
Epoch [102/200], Step [300/1200], Loss: 0.0000
Epoch [102/200], Step [400/1200], Loss: 0.0000
Epoch [102/200], Step [500/1200], Loss: 0.0007
Epoch [102/200], Step [600/1200], Loss: 0.0013
Epoch [102/200], Step [700/1200], Loss: 0.0209
Epoch [102/200], Step [800/1200], Loss: 0.0004
Epoch [102/200], Step [900/1200], Loss: 0.0000
Epoch [102/200], Step [1000/1200], Loss: 0.0115
Epoch [102/200], Step [1100/1200], Loss: 0.1452
Epoch [102/200], Step [1200/1200], Loss: 0.0001
Epoch [103/200], Step [100/1200], Loss: 0.0006
Epoch [103/200], Step [200/1200], Loss: 0.0000
Epoch [103/200], Step [300/1200], Loss: 0.0002
Epoch [103/200], Step [400/1200], Loss: 0.0000
Epoch [103/200], Step [500/1200], Loss: 0.0118
Epoch [103/200], Step [600/1200], Loss: 0.0014
Epoch [103/200], Step [700/1200], Loss: 0.0037
Epoch [103/200], Step [800/1200], Loss: 0.0028
Epoch [103/200], Step [900/1200], Loss: 0.0179
Epoch [103/200], Step [1000/1200], Loss: 0.0031
Epoch [103/200], Step [1100/1200], Loss: 0.0002
Epoch [103/200], Step [1200/1200], Loss: 0.0000
Epoch [104/200], Step [100/1200], Loss: 0.0202
Epoch [104/200], Step [200/1200], Loss: 0.0002
Epoch [104/200], Step [300/1200], Loss: 0.0069
Epoch [104/200], Step [400/1200], Loss: 0.0790
Epoch [104/200], Step [500/1200], Loss: 0.0004
Epoch [104/200], Step [600/1200], Loss: 0.0000
Epoch [104/200], Step [700/1200], Loss: 0.0026
Epoch [104/200], Step [800/1200], Loss: 0.0069
Epoch [104/200], Step [900/1200], Loss: 0.0023
Epoch [104/200], Step [1000/1200], Loss: 0.0076
Epoch [104/200], Step [1100/1200], Loss: 0.0503
Epoch [104/200], Step [1200/1200], Loss: 0.0000
Epoch [105/200], Step [100/1200], Loss: 0.0061
Epoch [105/200], Step [200/1200], Loss: 0.0000
Epoch [105/200], Step [300/1200], Loss: 0.0004
Epoch [105/200], Step [400/1200], Loss: 0.0022
Epoch [105/200], Step [500/1200], Loss: 0.0312
Epoch [105/200], Step [600/1200], Loss: 0.0000
Epoch [105/200], Step [700/1200], Loss: 0.0167
Epoch [105/200], Step [800/1200], Loss: 0.0524
Epoch [105/200], Step [900/1200], Loss: 0.0001
Epoch [105/200], Step [1000/1200], Loss: 0.0001
Epoch [105/200], Step [1100/1200], Loss: 0.0003
Epoch [105/200], Step [1200/1200], Loss: 0.0004
Epoch [106/200], Step [100/1200], Loss: 0.0015
Epoch [106/200], Step [200/1200], Loss: 0.0002
Epoch [106/200], Step [300/1200], Loss: 0.0013
Epoch [106/200], Step [400/1200], Loss: 0.0016
Epoch [106/200], Step [500/1200], Loss: 0.0000
Epoch [106/200], Step [600/1200], Loss: 0.0024
Epoch [106/200], Step [700/1200], Loss: 0.1306
Epoch [106/200], Step [800/1200], Loss: 0.0006
Epoch [106/200], Step [900/1200], Loss: 0.0230
Epoch [106/200], Step [1000/1200], Loss: 0.0000
Epoch [106/200], Step [1100/1200], Loss: 0.0240
Epoch [106/200], Step [1200/1200], Loss: 0.0008
Epoch [107/200], Step [100/1200], Loss: 0.0094
Epoch [107/200], Step [200/1200], Loss: 0.0005
Epoch [107/200], Step [300/1200], Loss: 0.0191
Epoch [107/200], Step [400/1200], Loss: 0.0389
Epoch [107/200], Step [500/1200], Loss: 0.0089
Epoch [107/200], Step [600/1200], Loss: 0.0000
Epoch [107/200], Step [700/1200], Loss: 0.0037
Epoch [107/200], Step [800/1200], Loss: 0.0021
Epoch [107/200], Step [900/1200], Loss: 0.0762
Epoch [107/200], Step [1000/1200], Loss: 0.0011
Epoch [107/200], Step [1100/1200], Loss: 0.0001
Epoch [107/200], Step [1200/1200], Loss: 0.0002
Epoch [108/200], Step [100/1200], Loss: 0.0004
Epoch [108/200], Step [200/1200], Loss: 0.0000
Epoch [108/200], Step [300/1200], Loss: 0.0001
Epoch [108/200], Step [400/1200], Loss: 0.1148
Epoch [108/200], Step [500/1200], Loss: 0.0000
Epoch [108/200], Step [600/1200], Loss: 0.0006
Epoch [108/200], Step [700/1200], Loss: 0.0043
Epoch [108/200], Step [800/1200], Loss: 0.0005
Epoch [108/200], Step [900/1200], Loss: 0.0094
Epoch [108/200], Step [1000/1200], Loss: 0.0005
Epoch [108/200], Step [1100/1200], Loss: 0.0004
Epoch [108/200], Step [1200/1200], Loss: 0.0000
Epoch [109/200], Step [100/1200], Loss: 0.0001
Epoch [109/200], Step [200/1200], Loss: 0.0002
Epoch [109/200], Step [300/1200], Loss: 0.0001
Epoch [109/200], Step [400/1200], Loss: 0.0020
Epoch [109/200], Step [500/1200], Loss: 0.0009
Epoch [109/200], Step [600/1200], Loss: 0.0001
Epoch [109/200], Step [700/1200], Loss: 0.0003
Epoch [109/200], Step [800/1200], Loss: 0.0011
Epoch [109/200], Step [900/1200], Loss: 0.0001
Epoch [109/200], Step [1000/1200], Loss: 0.0001
Epoch [109/200], Step [1100/1200], Loss: 0.0001
Epoch [109/200], Step [1200/1200], Loss: 0.0011
Epoch [110/200], Step [100/1200], Loss: 0.0001
Epoch [110/200], Step [200/1200], Loss: 0.0139
Epoch [110/200], Step [300/1200], Loss: 0.0003
Epoch [110/200], Step [400/1200], Loss: 0.0002
Epoch [110/200], Step [500/1200], Loss: 0.0000
Epoch [110/200], Step [600/1200], Loss: 0.0010
Epoch [110/200], Step [700/1200], Loss: 0.0103
Epoch [110/200], Step [800/1200], Loss: 0.0000
Epoch [110/200], Step [900/1200], Loss: 0.0006
Epoch [110/200], Step [1000/1200], Loss: 0.0003
Epoch [110/200], Step [1100/1200], Loss: 0.0001
Epoch [110/200], Step [1200/1200], Loss: 0.0001
Epoch [111/200], Step [100/1200], Loss: 0.0030
Epoch [111/200], Step [200/1200], Loss: 0.0002
Epoch [111/200], Step [300/1200], Loss: 0.0007
Epoch [111/200], Step [400/1200], Loss: 0.0038
Epoch [111/200], Step [500/1200], Loss: 0.0365
Epoch [111/200], Step [600/1200], Loss: 0.0005
Epoch [111/200], Step [700/1200], Loss: 0.0000
Epoch [111/200], Step [800/1200], Loss: 0.0009
Epoch [111/200], Step [900/1200], Loss: 0.0002
Epoch [111/200], Step [1000/1200], Loss: 0.0000
Epoch [111/200], Step [1100/1200], Loss: 0.0002
Epoch [111/200], Step [1200/1200], Loss: 0.0000
Epoch [112/200], Step [100/1200], Loss: 0.0000
Epoch [112/200], Step [200/1200], Loss: 0.0000
Epoch [112/200], Step [300/1200], Loss: 0.0001
Epoch [112/200], Step [400/1200], Loss: 0.0000
Epoch [112/200], Step [500/1200], Loss: 0.0536
Epoch [112/200], Step [600/1200], Loss: 0.0098
Epoch [112/200], Step [700/1200], Loss: 0.0000
Epoch [112/200], Step [800/1200], Loss: 0.0009
Epoch [112/200], Step [900/1200], Loss: 0.0001
Epoch [112/200], Step [1000/1200], Loss: 0.0005
Epoch [112/200], Step [1100/1200], Loss: 0.0001
Epoch [112/200], Step [1200/1200], Loss: 0.0054
Epoch [113/200], Step [100/1200], Loss: 0.1427
Epoch [113/200], Step [200/1200], Loss: 0.0013
Epoch [113/200], Step [300/1200], Loss: 0.0000
Epoch [113/200], Step [400/1200], Loss: 0.0043
Epoch [113/200], Step [500/1200], Loss: 0.0014
Epoch [113/200], Step [600/1200], Loss: 0.0004
Epoch [113/200], Step [700/1200], Loss: 0.0006
Epoch [113/200], Step [800/1200], Loss: 0.0001
Epoch [113/200], Step [900/1200], Loss: 0.0001
Epoch [113/200], Step [1000/1200], Loss: 0.0001
Epoch [113/200], Step [1100/1200], Loss: 0.0000
Epoch [113/200], Step [1200/1200], Loss: 0.0078
Epoch [114/200], Step [100/1200], Loss: 0.0000
Epoch [114/200], Step [200/1200], Loss: 0.0015
Epoch [114/200], Step [300/1200], Loss: 0.0004
Epoch [114/200], Step [400/1200], Loss: 0.0000
Epoch [114/200], Step [500/1200], Loss: 0.0000
Epoch [114/200], Step [600/1200], Loss: 0.0001
Epoch [114/200], Step [700/1200], Loss: 0.0036
Epoch [114/200], Step [800/1200], Loss: 0.0138
Epoch [114/200], Step [900/1200], Loss: 0.0001
Epoch [114/200], Step [1000/1200], Loss: 0.0000
Epoch [114/200], Step [1100/1200], Loss: 0.0194
Epoch [114/200], Step [1200/1200], Loss: 0.0003
Epoch [115/200], Step [100/1200], Loss: 0.0000
Epoch [115/200], Step [200/1200], Loss: 0.0351
Epoch [115/200], Step [300/1200], Loss: 0.0006
Epoch [115/200], Step [400/1200], Loss: 0.0000
Epoch [115/200], Step [500/1200], Loss: 0.0016
Epoch [115/200], Step [600/1200], Loss: 0.0106
Epoch [115/200], Step [700/1200], Loss: 0.0220
Epoch [115/200], Step [800/1200], Loss: 0.0000
Epoch [115/200], Step [900/1200], Loss: 0.0288
Epoch [115/200], Step [1000/1200], Loss: 0.0041
Epoch [115/200], Step [1100/1200], Loss: 0.0001
Epoch [115/200], Step [1200/1200], Loss: 0.0002
Epoch [116/200], Step [100/1200], Loss: 0.0400
Epoch [116/200], Step [200/1200], Loss: 0.0000
Epoch [116/200], Step [300/1200], Loss: 0.0172
Epoch [116/200], Step [400/1200], Loss: 0.0001
Epoch [116/200], Step [500/1200], Loss: 0.0004
Epoch [116/200], Step [600/1200], Loss: 0.0000
Epoch [116/200], Step [700/1200], Loss: 0.0088
Epoch [116/200], Step [800/1200], Loss: 0.0006
Epoch [116/200], Step [900/1200], Loss: 0.0001
Epoch [116/200], Step [1000/1200], Loss: 0.0001
Epoch [116/200], Step [1100/1200], Loss: 0.0004
Epoch [116/200], Step [1200/1200], Loss: 0.0363
Epoch [117/200], Step [100/1200], Loss: 0.0002
Epoch [117/200], Step [200/1200], Loss: 0.0002
Epoch [117/200], Step [300/1200], Loss: 0.0004
Epoch [117/200], Step [400/1200], Loss: 0.0002
Epoch [117/200], Step [500/1200], Loss: 0.0000
Epoch [117/200], Step [600/1200], Loss: 0.0050
Epoch [117/200], Step [700/1200], Loss: 0.0316
Epoch [117/200], Step [800/1200], Loss: 0.0003
Epoch [117/200], Step [900/1200], Loss: 0.0000
Epoch [117/200], Step [1000/1200], Loss: 0.0094
Epoch [117/200], Step [1100/1200], Loss: 0.0000
Epoch [117/200], Step [1200/1200], Loss: 0.0058
Epoch [118/200], Step [100/1200], Loss: 0.0000
Epoch [118/200], Step [200/1200], Loss: 0.0022
Epoch [118/200], Step [300/1200], Loss: 0.0165
Epoch [118/200], Step [400/1200], Loss: 0.0001
Epoch [118/200], Step [500/1200], Loss: 0.0001
Epoch [118/200], Step [600/1200], Loss: 0.0013
Epoch [118/200], Step [700/1200], Loss: 0.0046
Epoch [118/200], Step [800/1200], Loss: 0.0009
Epoch [118/200], Step [900/1200], Loss: 0.0014
Epoch [118/200], Step [1000/1200], Loss: 0.0433
Epoch [118/200], Step [1100/1200], Loss: 0.0081
Epoch [118/200], Step [1200/1200], Loss: 0.0307
Epoch [119/200], Step [100/1200], Loss: 0.0003
Epoch [119/200], Step [200/1200], Loss: 0.0000
Epoch [119/200], Step [300/1200], Loss: 0.0014
Epoch [119/200], Step [400/1200], Loss: 0.0011
Epoch [119/200], Step [500/1200], Loss: 0.0001
Epoch [119/200], Step [600/1200], Loss: 0.0005
Epoch [119/200], Step [700/1200], Loss: 0.0007
Epoch [119/200], Step [800/1200], Loss: 0.0001
Epoch [119/200], Step [900/1200], Loss: 0.0007
Epoch [119/200], Step [1000/1200], Loss: 0.0001
Epoch [119/200], Step [1100/1200], Loss: 0.2218
Epoch [119/200], Step [1200/1200], Loss: 0.0000
Epoch [120/200], Step [100/1200], Loss: 0.0002
Epoch [120/200], Step [200/1200], Loss: 0.0044
Epoch [120/200], Step [300/1200], Loss: 0.0462
Epoch [120/200], Step [400/1200], Loss: 0.0448
Epoch [120/200], Step [500/1200], Loss: 0.0004
Epoch [120/200], Step [600/1200], Loss: 0.0096
Epoch [120/200], Step [700/1200], Loss: 0.0003
Epoch [120/200], Step [800/1200], Loss: 0.0005
Epoch [120/200], Step [900/1200], Loss: 0.0002
Epoch [120/200], Step [1000/1200], Loss: 0.0026
Epoch [120/200], Step [1100/1200], Loss: 0.0005
Epoch [120/200], Step [1200/1200], Loss: 0.0001
Epoch [121/200], Step [100/1200], Loss: 0.0003
Epoch [121/200], Step [200/1200], Loss: 0.0083
Epoch [121/200], Step [300/1200], Loss: 0.0004
Epoch [121/200], Step [400/1200], Loss: 0.0000
Epoch [121/200], Step [500/1200], Loss: 0.0583
Epoch [121/200], Step [600/1200], Loss: 0.0025
Epoch [121/200], Step [700/1200], Loss: 0.1036
Epoch [121/200], Step [800/1200], Loss: 0.0001
Epoch [121/200], Step [900/1200], Loss: 0.0001
Epoch [121/200], Step [1000/1200], Loss: 0.0017
Epoch [121/200], Step [1100/1200], Loss: 0.0001
Epoch [121/200], Step [1200/1200], Loss: 0.0001
Epoch [122/200], Step [100/1200], Loss: 0.0001
Epoch [122/200], Step [200/1200], Loss: 0.0000
Epoch [122/200], Step [300/1200], Loss: 0.0000
Epoch [122/200], Step [400/1200], Loss: 0.0284
Epoch [122/200], Step [500/1200], Loss: 0.0045
Epoch [122/200], Step [600/1200], Loss: 0.0001
Epoch [122/200], Step [700/1200], Loss: 0.0000
Epoch [122/200], Step [800/1200], Loss: 0.0109
Epoch [122/200], Step [900/1200], Loss: 0.0070
Epoch [122/200], Step [1000/1200], Loss: 0.0005
Epoch [122/200], Step [1100/1200], Loss: 0.0017
Epoch [122/200], Step [1200/1200], Loss: 0.0238
Epoch [123/200], Step [100/1200], Loss: 0.0001
Epoch [123/200], Step [200/1200], Loss: 0.0006
Epoch [123/200], Step [300/1200], Loss: 0.0004
Epoch [123/200], Step [400/1200], Loss: 0.0000
Epoch [123/200], Step [500/1200], Loss: 0.0089
Epoch [123/200], Step [600/1200], Loss: 0.0008
Epoch [123/200], Step [700/1200], Loss: 0.0000
Epoch [123/200], Step [800/1200], Loss: 0.0000
Epoch [123/200], Step [900/1200], Loss: 0.0012
Epoch [123/200], Step [1000/1200], Loss: 0.0000
Epoch [123/200], Step [1100/1200], Loss: 0.0000
Epoch [123/200], Step [1200/1200], Loss: 0.0004
Epoch [124/200], Step [100/1200], Loss: 0.0000
Epoch [124/200], Step [200/1200], Loss: 0.0001
Epoch [124/200], Step [300/1200], Loss: 0.0423
Epoch [124/200], Step [400/1200], Loss: 0.0000
Epoch [124/200], Step [500/1200], Loss: 0.0008
Epoch [124/200], Step [600/1200], Loss: 0.0001
Epoch [124/200], Step [700/1200], Loss: 0.0032
Epoch [124/200], Step [800/1200], Loss: 0.0000
Epoch [124/200], Step [900/1200], Loss: 0.0001
Epoch [124/200], Step [1000/1200], Loss: 0.0004
Epoch [124/200], Step [1100/1200], Loss: 0.0001
Epoch [124/200], Step [1200/1200], Loss: 0.0002
Epoch [125/200], Step [100/1200], Loss: 0.0048
Epoch [125/200], Step [200/1200], Loss: 0.0003
Epoch [125/200], Step [300/1200], Loss: 0.0017
Epoch [125/200], Step [400/1200], Loss: 0.0008
Epoch [125/200], Step [500/1200], Loss: 0.0076
Epoch [125/200], Step [600/1200], Loss: 0.0170
Epoch [125/200], Step [700/1200], Loss: 0.0003
Epoch [125/200], Step [800/1200], Loss: 0.0000
Epoch [125/200], Step [900/1200], Loss: 0.0000
Epoch [125/200], Step [1000/1200], Loss: 0.0010
Epoch [125/200], Step [1100/1200], Loss: 0.0026
Epoch [125/200], Step [1200/1200], Loss: 0.0014
Epoch [126/200], Step [100/1200], Loss: 0.0009
Epoch [126/200], Step [200/1200], Loss: 0.0002
Epoch [126/200], Step [300/1200], Loss: 0.0001
Epoch [126/200], Step [400/1200], Loss: 0.0024
Epoch [126/200], Step [500/1200], Loss: 0.0062
Epoch [126/200], Step [600/1200], Loss: 0.0000
Epoch [126/200], Step [700/1200], Loss: 0.0000
Epoch [126/200], Step [800/1200], Loss: 0.0001
Epoch [126/200], Step [900/1200], Loss: 0.0002
Epoch [126/200], Step [1000/1200], Loss: 0.0004
Epoch [126/200], Step [1100/1200], Loss: 0.0005
Epoch [126/200], Step [1200/1200], Loss: 0.0002
Epoch [127/200], Step [100/1200], Loss: 0.0000
Epoch [127/200], Step [200/1200], Loss: 0.0000
Epoch [127/200], Step [300/1200], Loss: 0.0523
Epoch [127/200], Step [400/1200], Loss: 0.0004
Epoch [127/200], Step [500/1200], Loss: 0.0186
Epoch [127/200], Step [600/1200], Loss: 0.0009
Epoch [127/200], Step [700/1200], Loss: 0.0008
Epoch [127/200], Step [800/1200], Loss: 0.0011
Epoch [127/200], Step [900/1200], Loss: 0.0001
Epoch [127/200], Step [1000/1200], Loss: 0.0013
Epoch [127/200], Step [1100/1200], Loss: 0.0003
Epoch [127/200], Step [1200/1200], Loss: 0.0012
Epoch [128/200], Step [100/1200], Loss: 0.0095
Epoch [128/200], Step [200/1200], Loss: 0.0000
Epoch [128/200], Step [300/1200], Loss: 0.0006
Epoch [128/200], Step [400/1200], Loss: 0.0003
Epoch [128/200], Step [500/1200], Loss: 0.0001
Epoch [128/200], Step [600/1200], Loss: 0.0131
Epoch [128/200], Step [700/1200], Loss: 0.0003
Epoch [128/200], Step [800/1200], Loss: 0.0123
Epoch [128/200], Step [900/1200], Loss: 0.0000
Epoch [128/200], Step [1000/1200], Loss: 0.0203
Epoch [128/200], Step [1100/1200], Loss: 0.0012
Epoch [128/200], Step [1200/1200], Loss: 0.0000
Epoch [129/200], Step [100/1200], Loss: 0.0002
Epoch [129/200], Step [200/1200], Loss: 0.0523
Epoch [129/200], Step [300/1200], Loss: 0.0000
Epoch [129/200], Step [400/1200], Loss: 0.0000
Epoch [129/200], Step [500/1200], Loss: 0.0002
Epoch [129/200], Step [600/1200], Loss: 0.0118
Epoch [129/200], Step [700/1200], Loss: 0.0001
Epoch [129/200], Step [800/1200], Loss: 0.0945
Epoch [129/200], Step [900/1200], Loss: 0.0000
Epoch [129/200], Step [1000/1200], Loss: 0.0004
Epoch [129/200], Step [1100/1200], Loss: 0.0016
Epoch [129/200], Step [1200/1200], Loss: 0.0000
Epoch [130/200], Step [100/1200], Loss: 0.0022
Epoch [130/200], Step [200/1200], Loss: 0.0023
Epoch [130/200], Step [300/1200], Loss: 0.0004
Epoch [130/200], Step [400/1200], Loss: 0.0004
Epoch [130/200], Step [500/1200], Loss: 0.0001
Epoch [130/200], Step [600/1200], Loss: 0.0000
Epoch [130/200], Step [700/1200], Loss: 0.0002
Epoch [130/200], Step [800/1200], Loss: 0.0028
Epoch [130/200], Step [900/1200], Loss: 0.0010
Epoch [130/200], Step [1000/1200], Loss: 0.0000
Epoch [130/200], Step [1100/1200], Loss: 0.0089
Epoch [130/200], Step [1200/1200], Loss: 0.0001
Epoch [131/200], Step [100/1200], Loss: 0.0018
Epoch [131/200], Step [200/1200], Loss: 0.0000
Epoch [131/200], Step [300/1200], Loss: 0.0000
Epoch [131/200], Step [400/1200], Loss: 0.0001
Epoch [131/200], Step [500/1200], Loss: 0.0092
Epoch [131/200], Step [600/1200], Loss: 0.0001
Epoch [131/200], Step [700/1200], Loss: 0.0002
Epoch [131/200], Step [800/1200], Loss: 0.0000
Epoch [131/200], Step [900/1200], Loss: 0.0000
Epoch [131/200], Step [1000/1200], Loss: 0.0013
Epoch [131/200], Step [1100/1200], Loss: 0.0003
Epoch [131/200], Step [1200/1200], Loss: 0.0009
Epoch [132/200], Step [100/1200], Loss: 0.0005
Epoch [132/200], Step [200/1200], Loss: 0.0001
Epoch [132/200], Step [300/1200], Loss: 0.0001
Epoch [132/200], Step [400/1200], Loss: 0.0065
Epoch [132/200], Step [500/1200], Loss: 0.0011
Epoch [132/200], Step [600/1200], Loss: 0.0000
Epoch [132/200], Step [700/1200], Loss: 0.0100
Epoch [132/200], Step [800/1200], Loss: 0.0011
Epoch [132/200], Step [900/1200], Loss: 0.0214
Epoch [132/200], Step [1000/1200], Loss: 0.0078
Epoch [132/200], Step [1100/1200], Loss: 0.0008
Epoch [132/200], Step [1200/1200], Loss: 0.0001
Epoch [133/200], Step [100/1200], Loss: 0.0004
Epoch [133/200], Step [200/1200], Loss: 0.0010
Epoch [133/200], Step [300/1200], Loss: 0.0000
Epoch [133/200], Step [400/1200], Loss: 0.0032
Epoch [133/200], Step [500/1200], Loss: 0.0005
Epoch [133/200], Step [600/1200], Loss: 0.0004
Epoch [133/200], Step [700/1200], Loss: 0.0028
Epoch [133/200], Step [800/1200], Loss: 0.0000
Epoch [133/200], Step [900/1200], Loss: 0.0000
Epoch [133/200], Step [1000/1200], Loss: 0.0002
Epoch [133/200], Step [1100/1200], Loss: 0.0052
Epoch [133/200], Step [1200/1200], Loss: 0.0002
Epoch [134/200], Step [100/1200], Loss: 0.0000
Epoch [134/200], Step [200/1200], Loss: 0.0001
Epoch [134/200], Step [300/1200], Loss: 0.0001
Epoch [134/200], Step [400/1200], Loss: 0.0001
Epoch [134/200], Step [500/1200], Loss: 0.0000
Epoch [134/200], Step [600/1200], Loss: 0.0000
Epoch [134/200], Step [700/1200], Loss: 0.0012
Epoch [134/200], Step [800/1200], Loss: 0.0012
Epoch [134/200], Step [900/1200], Loss: 0.0030
Epoch [134/200], Step [1000/1200], Loss: 0.0012
Epoch [134/200], Step [1100/1200], Loss: 0.0130
Epoch [134/200], Step [1200/1200], Loss: 0.0001
Epoch [135/200], Step [100/1200], Loss: 0.0004
Epoch [135/200], Step [200/1200], Loss: 0.0004
Epoch [135/200], Step [300/1200], Loss: 0.0000
Epoch [135/200], Step [400/1200], Loss: 0.0398
Epoch [135/200], Step [500/1200], Loss: 0.0181
Epoch [135/200], Step [600/1200], Loss: 0.0005
Epoch [135/200], Step [700/1200], Loss: 0.0018
Epoch [135/200], Step [800/1200], Loss: 0.0203
Epoch [135/200], Step [900/1200], Loss: 0.0001
Epoch [135/200], Step [1000/1200], Loss: 0.0010
Epoch [135/200], Step [1100/1200], Loss: 0.0098
Epoch [135/200], Step [1200/1200], Loss: 0.0120
Epoch [136/200], Step [100/1200], Loss: 0.0005
Epoch [136/200], Step [200/1200], Loss: 0.0002
Epoch [136/200], Step [300/1200], Loss: 0.0305
Epoch [136/200], Step [400/1200], Loss: 0.0000
Epoch [136/200], Step [500/1200], Loss: 0.0000
Epoch [136/200], Step [600/1200], Loss: 0.0001
Epoch [136/200], Step [700/1200], Loss: 0.0015
Epoch [136/200], Step [800/1200], Loss: 0.0002
Epoch [136/200], Step [900/1200], Loss: 0.0015
Epoch [136/200], Step [1000/1200], Loss: 0.0003
Epoch [136/200], Step [1100/1200], Loss: 0.0020
Epoch [136/200], Step [1200/1200], Loss: 0.0026
Epoch [137/200], Step [100/1200], Loss: 0.0007
Epoch [137/200], Step [200/1200], Loss: 0.0000
Epoch [137/200], Step [300/1200], Loss: 0.0001
Epoch [137/200], Step [400/1200], Loss: 0.0000
Epoch [137/200], Step [500/1200], Loss: 0.0003
Epoch [137/200], Step [600/1200], Loss: 0.0001
Epoch [137/200], Step [700/1200], Loss: 0.0006
Epoch [137/200], Step [800/1200], Loss: 0.0000
Epoch [137/200], Step [900/1200], Loss: 0.0000
Epoch [137/200], Step [1000/1200], Loss: 0.0000
Epoch [137/200], Step [1100/1200], Loss: 0.0059
Epoch [137/200], Step [1200/1200], Loss: 0.0000
Epoch [138/200], Step [100/1200], Loss: 0.0006
Epoch [138/200], Step [200/1200], Loss: 0.0000
Epoch [138/200], Step [300/1200], Loss: 0.0008
Epoch [138/200], Step [400/1200], Loss: 0.0006
Epoch [138/200], Step [500/1200], Loss: 0.0023
Epoch [138/200], Step [600/1200], Loss: 0.0532
Epoch [138/200], Step [700/1200], Loss: 0.0020
Epoch [138/200], Step [800/1200], Loss: 0.0001
Epoch [138/200], Step [900/1200], Loss: 0.0001
Epoch [138/200], Step [1000/1200], Loss: 0.0001
Epoch [138/200], Step [1100/1200], Loss: 0.0041
Epoch [138/200], Step [1200/1200], Loss: 0.0003
Epoch [139/200], Step [100/1200], Loss: 0.0002
Epoch [139/200], Step [200/1200], Loss: 0.0000
Epoch [139/200], Step [300/1200], Loss: 0.0001
Epoch [139/200], Step [400/1200], Loss: 0.0119
Epoch [139/200], Step [500/1200], Loss: 0.0015
Epoch [139/200], Step [600/1200], Loss: 0.0001
Epoch [139/200], Step [700/1200], Loss: 0.0000
Epoch [139/200], Step [800/1200], Loss: 0.0000
Epoch [139/200], Step [900/1200], Loss: 0.0001
Epoch [139/200], Step [1000/1200], Loss: 0.0000
Epoch [139/200], Step [1100/1200], Loss: 0.0000
Epoch [139/200], Step [1200/1200], Loss: 0.0099
Epoch [140/200], Step [100/1200], Loss: 0.0000
Epoch [140/200], Step [200/1200], Loss: 0.0615
Epoch [140/200], Step [300/1200], Loss: 0.0003
Epoch [140/200], Step [400/1200], Loss: 0.0014
Epoch [140/200], Step [500/1200], Loss: 0.0045
Epoch [140/200], Step [600/1200], Loss: 0.0001
Epoch [140/200], Step [700/1200], Loss: 0.0000
Epoch [140/200], Step [800/1200], Loss: 0.0000
Epoch [140/200], Step [900/1200], Loss: 0.0005
Epoch [140/200], Step [1000/1200], Loss: 0.0001
Epoch [140/200], Step [1100/1200], Loss: 0.0012
Epoch [140/200], Step [1200/1200], Loss: 0.0001
Epoch [141/200], Step [100/1200], Loss: 0.0004
Epoch [141/200], Step [200/1200], Loss: 0.0000
Epoch [141/200], Step [300/1200], Loss: 0.0001
Epoch [141/200], Step [400/1200], Loss: 0.0000
Epoch [141/200], Step [500/1200], Loss: 0.0053
Epoch [141/200], Step [600/1200], Loss: 0.0104
Epoch [141/200], Step [700/1200], Loss: 0.0005
Epoch [141/200], Step [800/1200], Loss: 0.0001
Epoch [141/200], Step [900/1200], Loss: 0.0001
Epoch [141/200], Step [1000/1200], Loss: 0.0000
Epoch [141/200], Step [1100/1200], Loss: 0.0200
Epoch [141/200], Step [1200/1200], Loss: 0.0008
Epoch [142/200], Step [100/1200], Loss: 0.0022
Epoch [142/200], Step [200/1200], Loss: 0.0000
Epoch [142/200], Step [300/1200], Loss: 0.0003
Epoch [142/200], Step [400/1200], Loss: 0.0066
Epoch [142/200], Step [500/1200], Loss: 0.0007
Epoch [142/200], Step [600/1200], Loss: 0.0001
Epoch [142/200], Step [700/1200], Loss: 0.0032
Epoch [142/200], Step [800/1200], Loss: 0.0008
Epoch [142/200], Step [900/1200], Loss: 0.0005
Epoch [142/200], Step [1000/1200], Loss: 0.0000
Epoch [142/200], Step [1100/1200], Loss: 0.0000
Epoch [142/200], Step [1200/1200], Loss: 0.0000
Epoch [143/200], Step [100/1200], Loss: 0.0000
Epoch [143/200], Step [200/1200], Loss: 0.0000
Epoch [143/200], Step [300/1200], Loss: 0.0004
Epoch [143/200], Step [400/1200], Loss: 0.0000
Epoch [143/200], Step [500/1200], Loss: 0.0001
Epoch [143/200], Step [600/1200], Loss: 0.0003
Epoch [143/200], Step [700/1200], Loss: 0.0000
Epoch [143/200], Step [800/1200], Loss: 0.0000
Epoch [143/200], Step [900/1200], Loss: 0.0000
Epoch [143/200], Step [1000/1200], Loss: 0.0178
Epoch [143/200], Step [1100/1200], Loss: 0.0001
Epoch [143/200], Step [1200/1200], Loss: 0.0058
Epoch [144/200], Step [100/1200], Loss: 0.0016
Epoch [144/200], Step [200/1200], Loss: 0.0100
Epoch [144/200], Step [300/1200], Loss: 0.0009
Epoch [144/200], Step [400/1200], Loss: 0.0001
Epoch [144/200], Step [500/1200], Loss: 0.0003
Epoch [144/200], Step [600/1200], Loss: 0.0007
Epoch [144/200], Step [700/1200], Loss: 0.0001
Epoch [144/200], Step [800/1200], Loss: 0.0000
Epoch [144/200], Step [900/1200], Loss: 0.0333
Epoch [144/200], Step [1000/1200], Loss: 0.0297
Epoch [144/200], Step [1100/1200], Loss: 0.0001
Epoch [144/200], Step [1200/1200], Loss: 0.0145
Epoch [145/200], Step [100/1200], Loss: 0.0007
Epoch [145/200], Step [200/1200], Loss: 0.0027
Epoch [145/200], Step [300/1200], Loss: 0.0024
Epoch [145/200], Step [400/1200], Loss: 0.0004
Epoch [145/200], Step [500/1200], Loss: 0.0003
Epoch [145/200], Step [600/1200], Loss: 0.0002
Epoch [145/200], Step [700/1200], Loss: 0.0000
Epoch [145/200], Step [800/1200], Loss: 0.0000
Epoch [145/200], Step [900/1200], Loss: 0.0000
Epoch [145/200], Step [1000/1200], Loss: 0.0045
Epoch [145/200], Step [1100/1200], Loss: 0.0075
Epoch [145/200], Step [1200/1200], Loss: 0.0000
Epoch [146/200], Step [100/1200], Loss: 0.0242
Epoch [146/200], Step [200/1200], Loss: 0.0000
Epoch [146/200], Step [300/1200], Loss: 0.0000
Epoch [146/200], Step [400/1200], Loss: 0.0003
Epoch [146/200], Step [500/1200], Loss: 0.0235
Epoch [146/200], Step [600/1200], Loss: 0.0001
Epoch [146/200], Step [700/1200], Loss: 0.0002
Epoch [146/200], Step [800/1200], Loss: 0.0003
Epoch [146/200], Step [900/1200], Loss: 0.0000
Epoch [146/200], Step [1000/1200], Loss: 0.0126
Epoch [146/200], Step [1100/1200], Loss: 0.0000
Epoch [146/200], Step [1200/1200], Loss: 0.0007
Epoch [147/200], Step [100/1200], Loss: 0.0417
Epoch [147/200], Step [200/1200], Loss: 0.0000
Epoch [147/200], Step [300/1200], Loss: 0.0002
Epoch [147/200], Step [400/1200], Loss: 0.0000
Epoch [147/200], Step [500/1200], Loss: 0.0001
Epoch [147/200], Step [600/1200], Loss: 0.0009
Epoch [147/200], Step [700/1200], Loss: 0.0058
Epoch [147/200], Step [800/1200], Loss: 0.0004
Epoch [147/200], Step [900/1200], Loss: 0.0013
Epoch [147/200], Step [1000/1200], Loss: 0.0010
Epoch [147/200], Step [1100/1200], Loss: 0.0000
Epoch [147/200], Step [1200/1200], Loss: 0.0000
Epoch [148/200], Step [100/1200], Loss: 0.0000
Epoch [148/200], Step [200/1200], Loss: 0.0093
Epoch [148/200], Step [300/1200], Loss: 0.0032
Epoch [148/200], Step [400/1200], Loss: 0.0005
Epoch [148/200], Step [500/1200], Loss: 0.0022
Epoch [148/200], Step [600/1200], Loss: 0.0000
Epoch [148/200], Step [700/1200], Loss: 0.0003
Epoch [148/200], Step [800/1200], Loss: 0.0000
Epoch [148/200], Step [900/1200], Loss: 0.0001
Epoch [148/200], Step [1000/1200], Loss: 0.0000
Epoch [148/200], Step [1100/1200], Loss: 0.0079
Epoch [148/200], Step [1200/1200], Loss: 0.0093
Epoch [149/200], Step [100/1200], Loss: 0.0022
Epoch [149/200], Step [200/1200], Loss: 0.0023
Epoch [149/200], Step [300/1200], Loss: 0.0000
Epoch [149/200], Step [400/1200], Loss: 0.0005
Epoch [149/200], Step [500/1200], Loss: 0.0017
Epoch [149/200], Step [600/1200], Loss: 0.0001
Epoch [149/200], Step [700/1200], Loss: 0.0000
Epoch [149/200], Step [800/1200], Loss: 0.0002
Epoch [149/200], Step [900/1200], Loss: 0.0000
Epoch [149/200], Step [1000/1200], Loss: 0.0007
Epoch [149/200], Step [1100/1200], Loss: 0.0006
Epoch [149/200], Step [1200/1200], Loss: 0.0087
Epoch [150/200], Step [100/1200], Loss: 0.0001
Epoch [150/200], Step [200/1200], Loss: 0.0003
Epoch [150/200], Step [300/1200], Loss: 0.0000
Epoch [150/200], Step [400/1200], Loss: 0.0004
Epoch [150/200], Step [500/1200], Loss: 0.0445
Epoch [150/200], Step [600/1200], Loss: 0.0001
Epoch [150/200], Step [700/1200], Loss: 0.0000
Epoch [150/200], Step [800/1200], Loss: 0.0005
Epoch [150/200], Step [900/1200], Loss: 0.0003
Epoch [150/200], Step [1000/1200], Loss: 0.0098
Epoch [150/200], Step [1100/1200], Loss: 0.0003
Epoch [150/200], Step [1200/1200], Loss: 0.0000
Epoch [151/200], Step [100/1200], Loss: 0.0001
Epoch [151/200], Step [200/1200], Loss: 0.0000
Epoch [151/200], Step [300/1200], Loss: 0.0000
Epoch [151/200], Step [400/1200], Loss: 0.0000
Epoch [151/200], Step [500/1200], Loss: 0.0002
Epoch [151/200], Step [600/1200], Loss: 0.0007
Epoch [151/200], Step [700/1200], Loss: 0.0000
Epoch [151/200], Step [800/1200], Loss: 0.0000
Epoch [151/200], Step [900/1200], Loss: 0.0129
Epoch [151/200], Step [1000/1200], Loss: 0.0008
Epoch [151/200], Step [1100/1200], Loss: 0.0001
Epoch [151/200], Step [1200/1200], Loss: 0.0032
Epoch [152/200], Step [100/1200], Loss: 0.0002
Epoch [152/200], Step [200/1200], Loss: 0.0001
Epoch [152/200], Step [300/1200], Loss: 0.0000
Epoch [152/200], Step [400/1200], Loss: 0.0001
Epoch [152/200], Step [500/1200], Loss: 0.0006
Epoch [152/200], Step [600/1200], Loss: 0.0001
Epoch [152/200], Step [700/1200], Loss: 0.0001
Epoch [152/200], Step [800/1200], Loss: 0.0001
Epoch [152/200], Step [900/1200], Loss: 0.0002
Epoch [152/200], Step [1000/1200], Loss: 0.0001
Epoch [152/200], Step [1100/1200], Loss: 0.0000
Epoch [152/200], Step [1200/1200], Loss: 0.0033
Epoch [153/200], Step [100/1200], Loss: 0.0027
Epoch [153/200], Step [200/1200], Loss: 0.0000
Epoch [153/200], Step [300/1200], Loss: 0.0000
Epoch [153/200], Step [400/1200], Loss: 0.0775
Epoch [153/200], Step [500/1200], Loss: 0.0001
Epoch [153/200], Step [600/1200], Loss: 0.0004
Epoch [153/200], Step [700/1200], Loss: 0.0020
Epoch [153/200], Step [800/1200], Loss: 0.0187
Epoch [153/200], Step [900/1200], Loss: 0.0050
Epoch [153/200], Step [1000/1200], Loss: 0.0013
Epoch [153/200], Step [1100/1200], Loss: 0.0001
Epoch [153/200], Step [1200/1200], Loss: 0.0000
Epoch [154/200], Step [100/1200], Loss: 0.0026
Epoch [154/200], Step [200/1200], Loss: 0.0022
Epoch [154/200], Step [300/1200], Loss: 0.0000
Epoch [154/200], Step [400/1200], Loss: 0.0001
Epoch [154/200], Step [500/1200], Loss: 0.0006
Epoch [154/200], Step [600/1200], Loss: 0.0000
Epoch [154/200], Step [700/1200], Loss: 0.0000
Epoch [154/200], Step [800/1200], Loss: 0.0140
Epoch [154/200], Step [900/1200], Loss: 0.0001
Epoch [154/200], Step [1000/1200], Loss: 0.0000
Epoch [154/200], Step [1100/1200], Loss: 0.0004
Epoch [154/200], Step [1200/1200], Loss: 0.0078
Epoch [155/200], Step [100/1200], Loss: 0.0000
Epoch [155/200], Step [200/1200], Loss: 0.0000
Epoch [155/200], Step [300/1200], Loss: 0.0102
Epoch [155/200], Step [400/1200], Loss: 0.0000
Epoch [155/200], Step [500/1200], Loss: 0.0001
Epoch [155/200], Step [600/1200], Loss: 0.0000
Epoch [155/200], Step [700/1200], Loss: 0.0050
Epoch [155/200], Step [800/1200], Loss: 0.0006
Epoch [155/200], Step [900/1200], Loss: 0.0152
Epoch [155/200], Step [1000/1200], Loss: 0.0013
Epoch [155/200], Step [1100/1200], Loss: 0.0000
Epoch [155/200], Step [1200/1200], Loss: 0.0411
Epoch [156/200], Step [100/1200], Loss: 0.0160
Epoch [156/200], Step [200/1200], Loss: 0.0000
Epoch [156/200], Step [300/1200], Loss: 0.0000
Epoch [156/200], Step [400/1200], Loss: 0.0001
Epoch [156/200], Step [500/1200], Loss: 0.0000
Epoch [156/200], Step [600/1200], Loss: 0.0001
Epoch [156/200], Step [700/1200], Loss: 0.0000
Epoch [156/200], Step [800/1200], Loss: 0.0001
Epoch [156/200], Step [900/1200], Loss: 0.0027
Epoch [156/200], Step [1000/1200], Loss: 0.0003
Epoch [156/200], Step [1100/1200], Loss: 0.0027
Epoch [156/200], Step [1200/1200], Loss: 0.0003
Epoch [157/200], Step [100/1200], Loss: 0.0002
Epoch [157/200], Step [200/1200], Loss: 0.0000
Epoch [157/200], Step [300/1200], Loss: 0.0000
Epoch [157/200], Step [400/1200], Loss: 0.0000
Epoch [157/200], Step [500/1200], Loss: 0.0000
Epoch [157/200], Step [600/1200], Loss: 0.0004
Epoch [157/200], Step [700/1200], Loss: 0.0000
Epoch [157/200], Step [800/1200], Loss: 0.0001
Epoch [157/200], Step [900/1200], Loss: 0.0000
Epoch [157/200], Step [1000/1200], Loss: 0.0107
Epoch [157/200], Step [1100/1200], Loss: 0.0013
Epoch [157/200], Step [1200/1200], Loss: 0.0007
Epoch [158/200], Step [100/1200], Loss: 0.0214
Epoch [158/200], Step [200/1200], Loss: 0.0000
Epoch [158/200], Step [300/1200], Loss: 0.0221
Epoch [158/200], Step [400/1200], Loss: 0.0022
Epoch [158/200], Step [500/1200], Loss: 0.0019
Epoch [158/200], Step [600/1200], Loss: 0.0016
Epoch [158/200], Step [700/1200], Loss: 0.0083
Epoch [158/200], Step [800/1200], Loss: 0.0002
Epoch [158/200], Step [900/1200], Loss: 0.0001
Epoch [158/200], Step [1000/1200], Loss: 0.0001
Epoch [158/200], Step [1100/1200], Loss: 0.0000
Epoch [158/200], Step [1200/1200], Loss: 0.0051
Epoch [159/200], Step [100/1200], Loss: 0.0001
Epoch [159/200], Step [200/1200], Loss: 0.0000
Epoch [159/200], Step [300/1200], Loss: 0.0001
Epoch [159/200], Step [400/1200], Loss: 0.0000
Epoch [159/200], Step [500/1200], Loss: 0.0006
Epoch [159/200], Step [600/1200], Loss: 0.0001
Epoch [159/200], Step [700/1200], Loss: 0.0076
Epoch [159/200], Step [800/1200], Loss: 0.0000
Epoch [159/200], Step [900/1200], Loss: 0.0003
Epoch [159/200], Step [1000/1200], Loss: 0.0000
Epoch [159/200], Step [1100/1200], Loss: 0.0000
Epoch [159/200], Step [1200/1200], Loss: 0.0021
Epoch [160/200], Step [100/1200], Loss: 0.0116
Epoch [160/200], Step [200/1200], Loss: 0.0129
Epoch [160/200], Step [300/1200], Loss: 0.0024
Epoch [160/200], Step [400/1200], Loss: 0.0000
Epoch [160/200], Step [500/1200], Loss: 0.0025
Epoch [160/200], Step [600/1200], Loss: 0.0000
Epoch [160/200], Step [700/1200], Loss: 0.0000
Epoch [160/200], Step [800/1200], Loss: 0.0000
Epoch [160/200], Step [900/1200], Loss: 0.0000
Epoch [160/200], Step [1000/1200], Loss: 0.0381
Epoch [160/200], Step [1100/1200], Loss: 0.0000
Epoch [160/200], Step [1200/1200], Loss: 0.0001
Epoch [161/200], Step [100/1200], Loss: 0.0003
Epoch [161/200], Step [200/1200], Loss: 0.0003
Epoch [161/200], Step [300/1200], Loss: 0.0001
Epoch [161/200], Step [400/1200], Loss: 0.0000
Epoch [161/200], Step [500/1200], Loss: 0.0010
Epoch [161/200], Step [600/1200], Loss: 0.0001
Epoch [161/200], Step [700/1200], Loss: 0.0000
Epoch [161/200], Step [800/1200], Loss: 0.0000
Epoch [161/200], Step [900/1200], Loss: 0.0004
Epoch [161/200], Step [1000/1200], Loss: 0.0010
Epoch [161/200], Step [1100/1200], Loss: 0.0008
Epoch [161/200], Step [1200/1200], Loss: 0.0192
Epoch [162/200], Step [100/1200], Loss: 0.0000
Epoch [162/200], Step [200/1200], Loss: 0.0003
Epoch [162/200], Step [300/1200], Loss: 0.0062
Epoch [162/200], Step [400/1200], Loss: 0.0001
Epoch [162/200], Step [500/1200], Loss: 0.0002
Epoch [162/200], Step [600/1200], Loss: 0.0001
Epoch [162/200], Step [700/1200], Loss: 0.0022
Epoch [162/200], Step [800/1200], Loss: 0.0000
Epoch [162/200], Step [900/1200], Loss: 0.0000
Epoch [162/200], Step [1000/1200], Loss: 0.0000
Epoch [162/200], Step [1100/1200], Loss: 0.0000
Epoch [162/200], Step [1200/1200], Loss: 0.0013
Epoch [163/200], Step [100/1200], Loss: 0.0009
Epoch [163/200], Step [200/1200], Loss: 0.0000
Epoch [163/200], Step [300/1200], Loss: 0.0193
Epoch [163/200], Step [400/1200], Loss: 0.0000
Epoch [163/200], Step [500/1200], Loss: 0.0000
Epoch [163/200], Step [600/1200], Loss: 0.0101
Epoch [163/200], Step [700/1200], Loss: 0.0001
Epoch [163/200], Step [800/1200], Loss: 0.1059
Epoch [163/200], Step [900/1200], Loss: 0.0021
Epoch [163/200], Step [1000/1200], Loss: 0.0159
Epoch [163/200], Step [1100/1200], Loss: 0.0014
Epoch [163/200], Step [1200/1200], Loss: 0.0187
Epoch [164/200], Step [100/1200], Loss: 0.0035
Epoch [164/200], Step [200/1200], Loss: 0.0000
Epoch [164/200], Step [300/1200], Loss: 0.0001
Epoch [164/200], Step [400/1200], Loss: 0.0034
Epoch [164/200], Step [500/1200], Loss: 0.0441
Epoch [164/200], Step [600/1200], Loss: 0.0000
Epoch [164/200], Step [700/1200], Loss: 0.0005
Epoch [164/200], Step [800/1200], Loss: 0.0001
Epoch [164/200], Step [900/1200], Loss: 0.0358
Epoch [164/200], Step [1000/1200], Loss: 0.0005
Epoch [164/200], Step [1100/1200], Loss: 0.0000
Epoch [164/200], Step [1200/1200], Loss: 0.0000
Epoch [165/200], Step [100/1200], Loss: 0.0000
Epoch [165/200], Step [200/1200], Loss: 0.0000
Epoch [165/200], Step [300/1200], Loss: 0.0000
Epoch [165/200], Step [400/1200], Loss: 0.0002
Epoch [165/200], Step [500/1200], Loss: 0.0011
Epoch [165/200], Step [600/1200], Loss: 0.0009
Epoch [165/200], Step [700/1200], Loss: 0.0010
Epoch [165/200], Step [800/1200], Loss: 0.0003
Epoch [165/200], Step [900/1200], Loss: 0.0007
Epoch [165/200], Step [1000/1200], Loss: 0.0000
Epoch [165/200], Step [1100/1200], Loss: 0.0000
Epoch [165/200], Step [1200/1200], Loss: 0.0001
Epoch [166/200], Step [100/1200], Loss: 0.0005
Epoch [166/200], Step [200/1200], Loss: 0.0035
Epoch [166/200], Step [300/1200], Loss: 0.0000
Epoch [166/200], Step [400/1200], Loss: 0.0004
Epoch [166/200], Step [500/1200], Loss: 0.0006
Epoch [166/200], Step [600/1200], Loss: 0.0004
Epoch [166/200], Step [700/1200], Loss: 0.0029
Epoch [166/200], Step [800/1200], Loss: 0.0000
Epoch [166/200], Step [900/1200], Loss: 0.0001
Epoch [166/200], Step [1000/1200], Loss: 0.0002
Epoch [166/200], Step [1100/1200], Loss: 0.0352
Epoch [166/200], Step [1200/1200], Loss: 0.0004
Epoch [167/200], Step [100/1200], Loss: 0.0430
Epoch [167/200], Step [200/1200], Loss: 0.0000
Epoch [167/200], Step [300/1200], Loss: 0.0077
Epoch [167/200], Step [400/1200], Loss: 0.0002
Epoch [167/200], Step [500/1200], Loss: 0.0001
Epoch [167/200], Step [600/1200], Loss: 0.0001
Epoch [167/200], Step [700/1200], Loss: 0.0000
Epoch [167/200], Step [800/1200], Loss: 0.0355
Epoch [167/200], Step [900/1200], Loss: 0.0000
Epoch [167/200], Step [1000/1200], Loss: 0.0000
Epoch [167/200], Step [1100/1200], Loss: 0.0000
Epoch [167/200], Step [1200/1200], Loss: 0.0000
Epoch [168/200], Step [100/1200], Loss: 0.0016
Epoch [168/200], Step [200/1200], Loss: 0.0000
Epoch [168/200], Step [300/1200], Loss: 0.0000
Epoch [168/200], Step [400/1200], Loss: 0.0231
Epoch [168/200], Step [500/1200], Loss: 0.0149
Epoch [168/200], Step [600/1200], Loss: 0.0308
Epoch [168/200], Step [700/1200], Loss: 0.0004
Epoch [168/200], Step [800/1200], Loss: 0.0001
Epoch [168/200], Step [900/1200], Loss: 0.0001
Epoch [168/200], Step [1000/1200], Loss: 0.0000
Epoch [168/200], Step [1100/1200], Loss: 0.0000
Epoch [168/200], Step [1200/1200], Loss: 0.0001
Epoch [169/200], Step [100/1200], Loss: 0.0001
Epoch [169/200], Step [200/1200], Loss: 0.0001
Epoch [169/200], Step [300/1200], Loss: 0.0000
Epoch [169/200], Step [400/1200], Loss: 0.0002
Epoch [169/200], Step [500/1200], Loss: 0.0011
Epoch [169/200], Step [600/1200], Loss: 0.0001
Epoch [169/200], Step [700/1200], Loss: 0.0000
Epoch [169/200], Step [800/1200], Loss: 0.0011
Epoch [169/200], Step [900/1200], Loss: 0.0052
Epoch [169/200], Step [1000/1200], Loss: 0.0011
Epoch [169/200], Step [1100/1200], Loss: 0.0012
Epoch [169/200], Step [1200/1200], Loss: 0.0000
Epoch [170/200], Step [100/1200], Loss: 0.0000
Epoch [170/200], Step [200/1200], Loss: 0.0004
Epoch [170/200], Step [300/1200], Loss: 0.0002
Epoch [170/200], Step [400/1200], Loss: 0.0000
Epoch [170/200], Step [500/1200], Loss: 0.0070
Epoch [170/200], Step [600/1200], Loss: 0.0000
Epoch [170/200], Step [700/1200], Loss: 0.0001
Epoch [170/200], Step [800/1200], Loss: 0.0362
Epoch [170/200], Step [900/1200], Loss: 0.0001
Epoch [170/200], Step [1000/1200], Loss: 0.0000
Epoch [170/200], Step [1100/1200], Loss: 0.0016
Epoch [170/200], Step [1200/1200], Loss: 0.0002
Epoch [171/200], Step [100/1200], Loss: 0.0000
Epoch [171/200], Step [200/1200], Loss: 0.0001
Epoch [171/200], Step [300/1200], Loss: 0.0000
Epoch [171/200], Step [400/1200], Loss: 0.0000
Epoch [171/200], Step [500/1200], Loss: 0.0004
Epoch [171/200], Step [600/1200], Loss: 0.0000
Epoch [171/200], Step [700/1200], Loss: 0.0004
Epoch [171/200], Step [800/1200], Loss: 0.0000
Epoch [171/200], Step [900/1200], Loss: 0.0009
Epoch [171/200], Step [1000/1200], Loss: 0.0001
Epoch [171/200], Step [1100/1200], Loss: 0.0003
Epoch [171/200], Step [1200/1200], Loss: 0.0004
Epoch [172/200], Step [100/1200], Loss: 0.0000
Epoch [172/200], Step [200/1200], Loss: 0.0000
Epoch [172/200], Step [300/1200], Loss: 0.0000
Epoch [172/200], Step [400/1200], Loss: 0.0000
Epoch [172/200], Step [500/1200], Loss: 0.0002
Epoch [172/200], Step [600/1200], Loss: 0.0000
Epoch [172/200], Step [700/1200], Loss: 0.0000
Epoch [172/200], Step [800/1200], Loss: 0.0017
Epoch [172/200], Step [900/1200], Loss: 0.0001
Epoch [172/200], Step [1000/1200], Loss: 0.0000
Epoch [172/200], Step [1100/1200], Loss: 0.0000
Epoch [172/200], Step [1200/1200], Loss: 0.0000
Epoch [173/200], Step [100/1200], Loss: 0.0007
Epoch [173/200], Step [200/1200], Loss: 0.0054
Epoch [173/200], Step [300/1200], Loss: 0.0252
Epoch [173/200], Step [400/1200], Loss: 0.0000
Epoch [173/200], Step [500/1200], Loss: 0.0000
Epoch [173/200], Step [600/1200], Loss: 0.0001
Epoch [173/200], Step [700/1200], Loss: 0.0000
Epoch [173/200], Step [800/1200], Loss: 0.0000
Epoch [173/200], Step [900/1200], Loss: 0.0002
Epoch [173/200], Step [1000/1200], Loss: 0.0007
Epoch [173/200], Step [1100/1200], Loss: 0.0000
Epoch [173/200], Step [1200/1200], Loss: 0.0002
Epoch [174/200], Step [100/1200], Loss: 0.0000
Epoch [174/200], Step [200/1200], Loss: 0.0015
Epoch [174/200], Step [300/1200], Loss: 0.0001
Epoch [174/200], Step [400/1200], Loss: 0.0001
Epoch [174/200], Step [500/1200], Loss: 0.0005
Epoch [174/200], Step [600/1200], Loss: 0.0000
Epoch [174/200], Step [700/1200], Loss: 0.0000
Epoch [174/200], Step [800/1200], Loss: 0.0000
Epoch [174/200], Step [900/1200], Loss: 0.0490
Epoch [174/200], Step [1000/1200], Loss: 0.0000
Epoch [174/200], Step [1100/1200], Loss: 0.0000
Epoch [174/200], Step [1200/1200], Loss: 0.0003
Epoch [175/200], Step [100/1200], Loss: 0.0000
Epoch [175/200], Step [200/1200], Loss: 0.0000
Epoch [175/200], Step [300/1200], Loss: 0.0000
Epoch [175/200], Step [400/1200], Loss: 0.0000
Epoch [175/200], Step [500/1200], Loss: 0.0353
Epoch [175/200], Step [600/1200], Loss: 0.0002
Epoch [175/200], Step [700/1200], Loss: 0.0000
Epoch [175/200], Step [800/1200], Loss: 0.0000
Epoch [175/200], Step [900/1200], Loss: 0.0001
Epoch [175/200], Step [1000/1200], Loss: 0.0000
Epoch [175/200], Step [1100/1200], Loss: 0.0035
Epoch [175/200], Step [1200/1200], Loss: 0.0054
Epoch [176/200], Step [100/1200], Loss: 0.0004
Epoch [176/200], Step [200/1200], Loss: 0.0000
Epoch [176/200], Step [300/1200], Loss: 0.0032
Epoch [176/200], Step [400/1200], Loss: 0.0004
Epoch [176/200], Step [500/1200], Loss: 0.0000
Epoch [176/200], Step [600/1200], Loss: 0.0000
Epoch [176/200], Step [700/1200], Loss: 0.0000
Epoch [176/200], Step [800/1200], Loss: 0.0000
Epoch [176/200], Step [900/1200], Loss: 0.0000
Epoch [176/200], Step [1000/1200], Loss: 0.0005
Epoch [176/200], Step [1100/1200], Loss: 0.0009
Epoch [176/200], Step [1200/1200], Loss: 0.0006
Epoch [177/200], Step [100/1200], Loss: 0.0008
Epoch [177/200], Step [200/1200], Loss: 0.0021
Epoch [177/200], Step [300/1200], Loss: 0.0006
Epoch [177/200], Step [400/1200], Loss: 0.0000
Epoch [177/200], Step [500/1200], Loss: 0.0012
Epoch [177/200], Step [600/1200], Loss: 0.0000
Epoch [177/200], Step [700/1200], Loss: 0.0038
Epoch [177/200], Step [800/1200], Loss: 0.0015
Epoch [177/200], Step [900/1200], Loss: 0.0054
Epoch [177/200], Step [1000/1200], Loss: 0.0402
Epoch [177/200], Step [1100/1200], Loss: 0.0000
Epoch [177/200], Step [1200/1200], Loss: 0.0065
Epoch [178/200], Step [100/1200], Loss: 0.0000
Epoch [178/200], Step [200/1200], Loss: 0.0033
Epoch [178/200], Step [300/1200], Loss: 0.0000
Epoch [178/200], Step [400/1200], Loss: 0.0001
Epoch [178/200], Step [500/1200], Loss: 0.0143
Epoch [178/200], Step [600/1200], Loss: 0.0004
Epoch [178/200], Step [700/1200], Loss: 0.0000
Epoch [178/200], Step [800/1200], Loss: 0.0033
Epoch [178/200], Step [900/1200], Loss: 0.0000
Epoch [178/200], Step [1000/1200], Loss: 0.0009
Epoch [178/200], Step [1100/1200], Loss: 0.0000
Epoch [178/200], Step [1200/1200], Loss: 0.0041
Epoch [179/200], Step [100/1200], Loss: 0.0000
Epoch [179/200], Step [200/1200], Loss: 0.0000
Epoch [179/200], Step [300/1200], Loss: 0.0004
Epoch [179/200], Step [400/1200], Loss: 0.0000
Epoch [179/200], Step [500/1200], Loss: 0.0032
Epoch [179/200], Step [600/1200], Loss: 0.0000
Epoch [179/200], Step [700/1200], Loss: 0.0000
Epoch [179/200], Step [800/1200], Loss: 0.0000
Epoch [179/200], Step [900/1200], Loss: 0.0000
Epoch [179/200], Step [1000/1200], Loss: 0.0000
Epoch [179/200], Step [1100/1200], Loss: 0.0070
Epoch [179/200], Step [1200/1200], Loss: 0.0000
Epoch [180/200], Step [100/1200], Loss: 0.0499
Epoch [180/200], Step [200/1200], Loss: 0.0002
Epoch [180/200], Step [300/1200], Loss: 0.0052
Epoch [180/200], Step [400/1200], Loss: 0.0000
Epoch [180/200], Step [500/1200], Loss: 0.0000
Epoch [180/200], Step [600/1200], Loss: 0.0084
Epoch [180/200], Step [700/1200], Loss: 0.0001
Epoch [180/200], Step [800/1200], Loss: 0.0000
Epoch [180/200], Step [900/1200], Loss: 0.0118
Epoch [180/200], Step [1000/1200], Loss: 0.0000
Epoch [180/200], Step [1100/1200], Loss: 0.0006
Epoch [180/200], Step [1200/1200], Loss: 0.0000
Epoch [181/200], Step [100/1200], Loss: 0.0000
Epoch [181/200], Step [200/1200], Loss: 0.0009
Epoch [181/200], Step [300/1200], Loss: 0.0016
Epoch [181/200], Step [400/1200], Loss: 0.0000
Epoch [181/200], Step [500/1200], Loss: 0.0001
Epoch [181/200], Step [600/1200], Loss: 0.0003
Epoch [181/200], Step [700/1200], Loss: 0.0001
Epoch [181/200], Step [800/1200], Loss: 0.0000
Epoch [181/200], Step [900/1200], Loss: 0.0003
Epoch [181/200], Step [1000/1200], Loss: 0.0061
Epoch [181/200], Step [1100/1200], Loss: 0.0007
Epoch [181/200], Step [1200/1200], Loss: 0.0001
Epoch [182/200], Step [100/1200], Loss: 0.0000
Epoch [182/200], Step [200/1200], Loss: 0.0000
Epoch [182/200], Step [300/1200], Loss: 0.0000
Epoch [182/200], Step [400/1200], Loss: 0.0002
Epoch [182/200], Step [500/1200], Loss: 0.0000
Epoch [182/200], Step [600/1200], Loss: 0.0000
Epoch [182/200], Step [700/1200], Loss: 0.0070
Epoch [182/200], Step [800/1200], Loss: 0.0004
Epoch [182/200], Step [900/1200], Loss: 0.0002
Epoch [182/200], Step [1000/1200], Loss: 0.0000
Epoch [182/200], Step [1100/1200], Loss: 0.0001
Epoch [182/200], Step [1200/1200], Loss: 0.0004
Epoch [183/200], Step [100/1200], Loss: 0.0000
Epoch [183/200], Step [200/1200], Loss: 0.0000
Epoch [183/200], Step [300/1200], Loss: 0.0030
Epoch [183/200], Step [400/1200], Loss: 0.0001
Epoch [183/200], Step [500/1200], Loss: 0.0236
Epoch [183/200], Step [600/1200], Loss: 0.0041
Epoch [183/200], Step [700/1200], Loss: 0.0003
Epoch [183/200], Step [800/1200], Loss: 0.0002
Epoch [183/200], Step [900/1200], Loss: 0.0000
Epoch [183/200], Step [1000/1200], Loss: 0.0043
Epoch [183/200], Step [1100/1200], Loss: 0.0000
Epoch [183/200], Step [1200/1200], Loss: 0.0001
Epoch [184/200], Step [100/1200], Loss: 0.0001
Epoch [184/200], Step [200/1200], Loss: 0.0094
Epoch [184/200], Step [300/1200], Loss: 0.0000
Epoch [184/200], Step [400/1200], Loss: 0.0244
Epoch [184/200], Step [500/1200], Loss: 0.0000
Epoch [184/200], Step [600/1200], Loss: 0.0000
Epoch [184/200], Step [700/1200], Loss: 0.0001
Epoch [184/200], Step [800/1200], Loss: 0.0001
Epoch [184/200], Step [900/1200], Loss: 0.0001
Epoch [184/200], Step [1000/1200], Loss: 0.0002
Epoch [184/200], Step [1100/1200], Loss: 0.0000
Epoch [184/200], Step [1200/1200], Loss: 0.0003
Epoch [185/200], Step [100/1200], Loss: 0.0001
Epoch [185/200], Step [200/1200], Loss: 0.0001
Epoch [185/200], Step [300/1200], Loss: 0.0002
Epoch [185/200], Step [400/1200], Loss: 0.0000
Epoch [185/200], Step [500/1200], Loss: 0.0001
Epoch [185/200], Step [600/1200], Loss: 0.0062
Epoch [185/200], Step [700/1200], Loss: 0.0000
Epoch [185/200], Step [800/1200], Loss: 0.0001
Epoch [185/200], Step [900/1200], Loss: 0.0000
Epoch [185/200], Step [1000/1200], Loss: 0.0022
Epoch [185/200], Step [1100/1200], Loss: 0.0006
Epoch [185/200], Step [1200/1200], Loss: 0.0004
Epoch [186/200], Step [100/1200], Loss: 0.0683
Epoch [186/200], Step [200/1200], Loss: 0.0000
Epoch [186/200], Step [300/1200], Loss: 0.0084
Epoch [186/200], Step [400/1200], Loss: 0.0000
Epoch [186/200], Step [500/1200], Loss: 0.0073
Epoch [186/200], Step [600/1200], Loss: 0.0096
Epoch [186/200], Step [700/1200], Loss: 0.0044
Epoch [186/200], Step [800/1200], Loss: 0.0000
Epoch [186/200], Step [900/1200], Loss: 0.0009
Epoch [186/200], Step [1000/1200], Loss: 0.0005
Epoch [186/200], Step [1100/1200], Loss: 0.0000
Epoch [186/200], Step [1200/1200], Loss: 0.0000
Epoch [187/200], Step [100/1200], Loss: 0.0000
Epoch [187/200], Step [200/1200], Loss: 0.0000
Epoch [187/200], Step [300/1200], Loss: 0.0000
Epoch [187/200], Step [400/1200], Loss: 0.0000
Epoch [187/200], Step [500/1200], Loss: 0.0337
Epoch [187/200], Step [600/1200], Loss: 0.0007
Epoch [187/200], Step [700/1200], Loss: 0.0001
Epoch [187/200], Step [800/1200], Loss: 0.0000
Epoch [187/200], Step [900/1200], Loss: 0.0000
Epoch [187/200], Step [1000/1200], Loss: 0.0001
Epoch [187/200], Step [1100/1200], Loss: 0.0016
Epoch [187/200], Step [1200/1200], Loss: 0.0000
Epoch [188/200], Step [100/1200], Loss: 0.0000
Epoch [188/200], Step [200/1200], Loss: 0.0000
Epoch [188/200], Step [300/1200], Loss: 0.0053
Epoch [188/200], Step [400/1200], Loss: 0.0019
Epoch [188/200], Step [500/1200], Loss: 0.0007
Epoch [188/200], Step [600/1200], Loss: 0.0042
Epoch [188/200], Step [700/1200], Loss: 0.0001
Epoch [188/200], Step [800/1200], Loss: 0.0000
Epoch [188/200], Step [900/1200], Loss: 0.0047
Epoch [188/200], Step [1000/1200], Loss: 0.0000
Epoch [188/200], Step [1100/1200], Loss: 0.0000
Epoch [188/200], Step [1200/1200], Loss: 0.0007
Epoch [189/200], Step [100/1200], Loss: 0.0000
Epoch [189/200], Step [200/1200], Loss: 0.0018
Epoch [189/200], Step [300/1200], Loss: 0.0000
Epoch [189/200], Step [400/1200], Loss: 0.0006
Epoch [189/200], Step [500/1200], Loss: 0.0001
Epoch [189/200], Step [600/1200], Loss: 0.0001
Epoch [189/200], Step [700/1200], Loss: 0.0090
Epoch [189/200], Step [800/1200], Loss: 0.0002
Epoch [189/200], Step [900/1200], Loss: 0.0000
Epoch [189/200], Step [1000/1200], Loss: 0.0330
Epoch [189/200], Step [1100/1200], Loss: 0.0002
Epoch [189/200], Step [1200/1200], Loss: 0.0001
Epoch [190/200], Step [100/1200], Loss: 0.0092
Epoch [190/200], Step [200/1200], Loss: 0.0000
Epoch [190/200], Step [300/1200], Loss: 0.0002
Epoch [190/200], Step [400/1200], Loss: 0.0000
Epoch [190/200], Step [500/1200], Loss: 0.0001
Epoch [190/200], Step [600/1200], Loss: 0.0000
Epoch [190/200], Step [700/1200], Loss: 0.0001
Epoch [190/200], Step [800/1200], Loss: 0.0000
Epoch [190/200], Step [900/1200], Loss: 0.0000
Epoch [190/200], Step [1000/1200], Loss: 0.0000
Epoch [190/200], Step [1100/1200], Loss: 0.0002
Epoch [190/200], Step [1200/1200], Loss: 0.0003
Epoch [191/200], Step [100/1200], Loss: 0.0000
Epoch [191/200], Step [200/1200], Loss: 0.0000
Epoch [191/200], Step [300/1200], Loss: 0.0000
Epoch [191/200], Step [400/1200], Loss: 0.0040
Epoch [191/200], Step [500/1200], Loss: 0.0000
Epoch [191/200], Step [600/1200], Loss: 0.0000
Epoch [191/200], Step [700/1200], Loss: 0.0006
Epoch [191/200], Step [800/1200], Loss: 0.0003
Epoch [191/200], Step [900/1200], Loss: 0.0000
Epoch [191/200], Step [1000/1200], Loss: 0.0000
Epoch [191/200], Step [1100/1200], Loss: 0.0000
Epoch [191/200], Step [1200/1200], Loss: 0.0000
Epoch [192/200], Step [100/1200], Loss: 0.0018
Epoch [192/200], Step [200/1200], Loss: 0.0171
Epoch [192/200], Step [300/1200], Loss: 0.0001
Epoch [192/200], Step [400/1200], Loss: 0.0000
Epoch [192/200], Step [500/1200], Loss: 0.0000
Epoch [192/200], Step [600/1200], Loss: 0.0000
Epoch [192/200], Step [700/1200], Loss: 0.0006
Epoch [192/200], Step [800/1200], Loss: 0.0002
Epoch [192/200], Step [900/1200], Loss: 0.0000
Epoch [192/200], Step [1000/1200], Loss: 0.0013
Epoch [192/200], Step [1100/1200], Loss: 0.0000
Epoch [192/200], Step [1200/1200], Loss: 0.0001
Epoch [193/200], Step [100/1200], Loss: 0.0001
Epoch [193/200], Step [200/1200], Loss: 0.0000
Epoch [193/200], Step [300/1200], Loss: 0.0001
Epoch [193/200], Step [400/1200], Loss: 0.0012
Epoch [193/200], Step [500/1200], Loss: 0.0001
Epoch [193/200], Step [600/1200], Loss: 0.0000
Epoch [193/200], Step [700/1200], Loss: 0.0000
Epoch [193/200], Step [800/1200], Loss: 0.0000
Epoch [193/200], Step [900/1200], Loss: 0.0002
Epoch [193/200], Step [1000/1200], Loss: 0.0483
Epoch [193/200], Step [1100/1200], Loss: 0.0000
Epoch [193/200], Step [1200/1200], Loss: 0.0001
Epoch [194/200], Step [100/1200], Loss: 0.0001
Epoch [194/200], Step [200/1200], Loss: 0.0009
Epoch [194/200], Step [300/1200], Loss: 0.0007
Epoch [194/200], Step [400/1200], Loss: 0.0056
Epoch [194/200], Step [500/1200], Loss: 0.0002
Epoch [194/200], Step [600/1200], Loss: 0.0024
Epoch [194/200], Step [700/1200], Loss: 0.0003
Epoch [194/200], Step [800/1200], Loss: 0.0000
Epoch [194/200], Step [900/1200], Loss: 0.0000
Epoch [194/200], Step [1000/1200], Loss: 0.0000
Epoch [194/200], Step [1100/1200], Loss: 0.0002
Epoch [194/200], Step [1200/1200], Loss: 0.0001
Epoch [195/200], Step [100/1200], Loss: 0.0000
Epoch [195/200], Step [200/1200], Loss: 0.0006
Epoch [195/200], Step [300/1200], Loss: 0.0112
Epoch [195/200], Step [400/1200], Loss: 0.0001
Epoch [195/200], Step [500/1200], Loss: 0.0131
Epoch [195/200], Step [600/1200], Loss: 0.0004
Epoch [195/200], Step [700/1200], Loss: 0.0000
Epoch [195/200], Step [800/1200], Loss: 0.0006
Epoch [195/200], Step [900/1200], Loss: 0.0102
Epoch [195/200], Step [1000/1200], Loss: 0.0000
Epoch [195/200], Step [1100/1200], Loss: 0.0000
Epoch [195/200], Step [1200/1200], Loss: 0.0014
Epoch [196/200], Step [100/1200], Loss: 0.0000
Epoch [196/200], Step [200/1200], Loss: 0.0001
Epoch [196/200], Step [300/1200], Loss: 0.0000
Epoch [196/200], Step [400/1200], Loss: 0.0020
Epoch [196/200], Step [500/1200], Loss: 0.0071
Epoch [196/200], Step [600/1200], Loss: 0.0007
Epoch [196/200], Step [700/1200], Loss: 0.0169
Epoch [196/200], Step [800/1200], Loss: 0.0000
Epoch [196/200], Step [900/1200], Loss: 0.0000
Epoch [196/200], Step [1000/1200], Loss: 0.0000
Epoch [196/200], Step [1100/1200], Loss: 0.0001
Epoch [196/200], Step [1200/1200], Loss: 0.0000
Epoch [197/200], Step [100/1200], Loss: 0.0065
Epoch [197/200], Step [200/1200], Loss: 0.0000
Epoch [197/200], Step [300/1200], Loss: 0.0006
Epoch [197/200], Step [400/1200], Loss: 0.0024
Epoch [197/200], Step [500/1200], Loss: 0.0007
Epoch [197/200], Step [600/1200], Loss: 0.0000
Epoch [197/200], Step [700/1200], Loss: 0.0001
Epoch [197/200], Step [800/1200], Loss: 0.0000
Epoch [197/200], Step [900/1200], Loss: 0.0032
Epoch [197/200], Step [1000/1200], Loss: 0.0076
Epoch [197/200], Step [1100/1200], Loss: 0.0001
Epoch [197/200], Step [1200/1200], Loss: 0.0011
Epoch [198/200], Step [100/1200], Loss: 0.0009
Epoch [198/200], Step [200/1200], Loss: 0.0000
Epoch [198/200], Step [300/1200], Loss: 0.0001
Epoch [198/200], Step [400/1200], Loss: 0.0017
Epoch [198/200], Step [500/1200], Loss: 0.0029
Epoch [198/200], Step [600/1200], Loss: 0.0000
Epoch [198/200], Step [700/1200], Loss: 0.0137
Epoch [198/200], Step [800/1200], Loss: 0.0006
Epoch [198/200], Step [900/1200], Loss: 0.0000
Epoch [198/200], Step [1000/1200], Loss: 0.0000
Epoch [198/200], Step [1100/1200], Loss: 0.0001
Epoch [198/200], Step [1200/1200], Loss: 0.0000
Epoch [199/200], Step [100/1200], Loss: 0.0001
Epoch [199/200], Step [200/1200], Loss: 0.0000
Epoch [199/200], Step [300/1200], Loss: 0.0002
Epoch [199/200], Step [400/1200], Loss: 0.0225
Epoch [199/200], Step [500/1200], Loss: 0.0043
Epoch [199/200], Step [600/1200], Loss: 0.0003
Epoch [199/200], Step [700/1200], Loss: 0.0458
Epoch [199/200], Step [800/1200], Loss: 0.0021
Epoch [199/200], Step [900/1200], Loss: 0.0004
Epoch [199/200], Step [1000/1200], Loss: 0.0017
Epoch [199/200], Step [1100/1200], Loss: 0.0012
Epoch [199/200], Step [1200/1200], Loss: 0.0000
Epoch [200/200], Step [100/1200], Loss: 0.0000
Epoch [200/200], Step [200/1200], Loss: 0.0001
Epoch [200/200], Step [300/1200], Loss: 0.0010
Epoch [200/200], Step [400/1200], Loss: 0.0007
Epoch [200/200], Step [500/1200], Loss: 0.0000
Epoch [200/200], Step [600/1200], Loss: 0.0001
Epoch [200/200], Step [700/1200], Loss: 0.0000
Epoch [200/200], Step [800/1200], Loss: 0.0001
Epoch [200/200], Step [900/1200], Loss: 0.0001
Epoch [200/200], Step [1000/1200], Loss: 0.0000
Epoch [200/200], Step [1100/1200], Loss: 0.0009
Epoch [200/200], Step [1200/1200], Loss: 0.0000
Test Accuracy of the model on the 10000 test images: 98.89 %
]0;harditsinghmarwah@fastai-instance-2: ~/ML-res-urrect[01;32mharditsinghmarwah@fastai-instance-2[00m:[01;34m~/ML-res-urrect[00m$ exit
exit

Script done on Thu 28 Mar 2019 03:20:08 PM UTC
